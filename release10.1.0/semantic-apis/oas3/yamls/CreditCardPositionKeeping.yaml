openapi: 3.0.1
info:
  title: Credit Card Position Keeping
  description: 'Maintain a log of credit card bookings and authorizations for operational and management information, tracking and reconciliation purposes.'
  contact:
    name: BIAN
    url: https://bian.org
  version: '10.1.0'
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CreditCardPositionKeeping/10.1.0
paths:
  '/CreditCardPositionKeeping/{creditcardpositionkeepingid}/Capture':
    put:
      tags:
        - CR - CreditCardPositionLog
      summary: Capture Credit Card Position Log
      description: Capture Credit Card Position Log
      operationId: Capture
      parameters:
        - $ref: '#/components/parameters/creditcardpositionkeepingid'
      requestBody:
        $ref: '#/components/requestBodies/CreditCardPositionLog'
      responses:
        '200':
          $ref: '#/components/responses/CreditCardPositionLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CreditCardPositionKeeping/{creditcardpositionkeepingid}/Control':
    put:
      tags:
        - CR - CreditCardPositionLog
      summary: Control Credit Card Position Log
      description: Control Credit Card Position Log
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/creditcardpositionkeepingid'
      requestBody:
        $ref: '#/components/requestBodies/CreditCardPositionLog'
      responses:
        '200':
          $ref: '#/components/responses/CreditCardPositionLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /CreditCardPositionKeeping/Initiate:
    post:
      tags:
        - CR - CreditCardPositionLog
      summary: Initiate Credit Card Position Log
      description: Initiate Credit Card Position Log
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/CreditCardPositionLog'
      responses:
        '200':
          $ref: '#/components/responses/CreditCardPositionLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CreditCardPositionKeeping/{creditcardpositionkeepingid}/Notify':
    get:
      tags:
        - CR - CreditCardPositionLog
      summary: Notify Credit Card Position Log
      description: Notify Credit Card Position Log
      operationId: Notify
      parameters:
        - $ref: '#/components/parameters/creditcardpositionkeepingid'
      responses:
        '200':
          $ref: '#/components/responses/CreditCardPositionLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CreditCardPositionKeeping/{creditcardpositionkeepingid}/Retrieve':
    get:
      tags:
        - CR - CreditCardPositionLog
      summary: Retrieve Credit Card Position Log
      description: Retrieve Credit Card Position Log
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/creditcardpositionkeepingid'
      responses:
        '200':
          $ref: '#/components/responses/CreditCardPositionLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CreditCardPositionKeeping/{creditcardpositionkeepingid}/Update':
    put:
      tags:
        - CR - CreditCardPositionLog
      summary: Update Credit Card Position Log
      description: Update Credit Card Position Log
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/creditcardpositionkeepingid'
      requestBody:
        $ref: '#/components/requestBodies/CreditCardPositionLog'
      responses:
        '200':
          $ref: '#/components/responses/CreditCardPositionLog'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CreditCardPositionKeeping/{creditcardpositionkeepingid}/CardTransactionEvent/{cardtransactioneventid}/Capture':
    put:
      tags:
        - BQ - CardTransactionEvent
      summary: Capture Card Transaction Event
      description: Capture Card Transaction Event
      operationId: CaptureCardTransactionEvent
      parameters:
        - $ref: '#/components/parameters/creditcardpositionkeepingid'
        - $ref: '#/components/parameters/cardtransactioneventid'
      requestBody:
        $ref: '#/components/requestBodies/CardTransactionEvent'
      responses:
        '200':
          $ref: '#/components/responses/CardTransactionEvent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CreditCardPositionKeeping/{creditcardpositionkeepingid}/CardTransactionEvent/{cardtransactioneventid}/Notify':
    get:
      tags:
        - BQ - CardTransactionEvent
      summary: Notify Card Transaction Event
      description: Notify Card Transaction Event
      operationId: NotifyCardTransactionEvent
      parameters:
        - $ref: '#/components/parameters/creditcardpositionkeepingid'
        - $ref: '#/components/parameters/cardtransactioneventid'
      responses:
        '200':
          $ref: '#/components/responses/CardTransactionEvent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CreditCardPositionKeeping/{creditcardpositionkeepingid}/CardTransactionEvent/{cardtransactioneventid}/Retrieve':
    get:
      tags:
        - BQ - CardTransactionEvent
      summary: Retrieve Card Transaction Event
      description: Retrieve Card Transaction Event
      operationId: RetrieveCardTransactionEvent
      parameters:
        - $ref: '#/components/parameters/creditcardpositionkeepingid'
        - $ref: '#/components/parameters/cardtransactioneventid'
      responses:
        '200':
          $ref: '#/components/responses/CardTransactionEvent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CreditCardPositionKeeping/{creditcardpositionkeepingid}/CardTransactionEvent/{cardtransactioneventid}/Update':
    put:
      tags:
        - BQ - CardTransactionEvent
      summary: Update Card Transaction Event
      description: Update Card Transaction Event
      operationId: UpdateCardTransactionEvent
      parameters:
        - $ref: '#/components/parameters/creditcardpositionkeepingid'
        - $ref: '#/components/parameters/cardtransactioneventid'
      requestBody:
        $ref: '#/components/requestBodies/CardTransactionEvent'
      responses:
        '200':
          $ref: '#/components/responses/CardTransactionEvent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    condition:
      type: object
      properties:
        Condition:
          type: string
          description: "Condition is a premise upon which the fulfillment of an agreement depends \n\nGeneral and special arrangements, provisions, requirements, rules, specifications, and standards that form an integral part of an agreement or contract.\n\nRead more: http://www.businessdictionary.com/definition/terms-and-conditions.html\n\n"
          format: class
      description: The required status/situation before the event is captured
    schedule:
      type: object
      properties:
        Schedule:
          type: string
          description: "Defined sequence of planned tasks/actions or a timetable of available services\n\nA schedule is a time based series of something"
          format: datatype
      description: The timing and key actions/milestones involved in capturing the event
    businessservice:
      type: object
      properties:
        BusinessService:
          type: string
          description: "A business service supports business capabilities through an explicitly defined interface and is explicitly governed by an organization. TOGAF 9.2\n\nA business service represents explicitly defined behavior that a business role, business actor, or business collaboration exposes to its environment. ArchiMate 3.1\n"
          format: class
      description: The Card Transaction Event specific Business Service
    log:
      type: object
      properties:
        Log:
          type: string
          description: "A record of events/entries.\n"
          format: class
      description: Reference to Card Transaction Event
    event:
      type: object
      properties:
        Event:
          type: string
          description: 'Something that happens, has happened, can happen or is planned to happen.'
          format: class
      description: Reference to Card Transaction Event
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: The type of Card Transaction Event
    CardTransactionEvent:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        CreditCardPositionLogReference:
          $ref: '#/components/schemas/log'
        CardTransactionEventReference:
          $ref: '#/components/schemas/event'
        CardTransactionEventType:
          $ref: '#/components/schemas/text'
      description: The Card Transaction Event is one of the specific types of events that is recorded in the Card Transaction Event
    CreditCardPositionKeepingOutcome:
      type: object
      properties:
        CreditCardPositionKeepingIncident:
          $ref: '#/components/schemas/event'
        CreditCardPositionKeepingLog:
          $ref: '#/components/schemas/log'
      description: The Card Transaction Event is one of the specific types of events that is recorded in the Card Transaction Event
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: ''
    servicetype:
      type: object
      properties:
        ServiceTypeName:
          $ref: '#/components/schemas/name'
        ServiceType:
          type: string
          description: ''
          format: servicetypevalues
      description: ''
    service:
      type: object
      properties:
        ServiceName:
          $ref: '#/components/schemas/name'
        ServiceDescription:
          $ref: '#/components/schemas/text'
        ServiceType:
          $ref: '#/components/schemas/servicetype'
      description: A selected optional business service as subject matter of Credit Card Position Log
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          type: string
          description: ''
          format: string
        TimeZoneCode:
          type: string
          description: ''
          format: string
        DaylightSavingIndicator:
          type: string
          description: ''
          format: string
      description: ''
    value:
      type: object
      properties:
        Value:
          type: string
          description: 'A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)'
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          type: string
          description: ''
          format: partyidentificationtypevalues
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\n* `Agreementinvolvement` - \n* `Partyinvolvement` - \n* `Arrangementinvolvement` - \n* `Designspecificationinvolvement` - \n* `Relationshipinvolvement` - \n* `Locationinvolvement` - \n* `Bankguaranteeinvolvement` - \n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: Reference to the party who is involved in Credit Card Position Log
    businessunit:
      type: object
      properties:
        BusinessFunction:
          type: string
          description: ''
          format: string
        Goal:
          type: string
          description: ''
          format: string
      description: Reference to the business unit which is involved in Credit Card Position Log
    position:
      type: object
      properties:
        PositionValue:
          type: string
          description: ''
          format: string
        PositionQuantity:
          type: string
          description: ''
          format: string
        PositionDate:
          type: string
          description: The date on which the state of something is calculated
          format: string
        PositionAmount:
          type: string
          description: ''
          format: string
      description: The position of Credit Card Position Log
    positiontype:
      type: object
      properties:
        PositionType:
          type: string
          description: 'A classification of the position. '
          format: class
      description: A classification value expressing the kind of position withing the Credit Card Position Log
    limitarrangement:
      type: object
      properties:
        LimitArrangement:
          type: string
          description: "An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. "
          format: class
      description: Reference to the time limitation related to the position of Credit Card Position Log
    CreditCardPositionLog:
      type: object
      properties:
        CreditCardPositionLogParameterType:
          $ref: '#/components/schemas/text'
        CreditCardPositionLogSelectedOption:
          $ref: '#/components/schemas/service'
        CreditCardPositionLogType:
          $ref: '#/components/schemas/text'
        CreditCardPositionLogSchedule:
          $ref: '#/components/schemas/schedule'
        CreditCardPositionLogUsageLog:
          $ref: '#/components/schemas/log'
        CreditCardPositionLogUpdateLog:
          $ref: '#/components/schemas/log'
        CreditCardPositionLogAssociatedParty:
          $ref: '#/components/schemas/involvedparty'
        CreditCardPositionLogBusinessUnitReference:
          $ref: '#/components/schemas/businessunit'
        CreditCardPositionLogCustomerReference:
          $ref: '#/components/schemas/involvedparty'
        CreditCardPositionLogServiceConfiguration:
          $ref: '#/components/schemas/text'
        CreditCardPositionLogPosition:
          $ref: '#/components/schemas/position'
        CreditCardPositionLogPositionType:
          $ref: '#/components/schemas/positiontype'
        CreditCardPositionLogPositionLimitTime:
          $ref: '#/components/schemas/limitarrangement'
        CreditCardPositionLogReference:
          $ref: '#/components/schemas/log'
      description: 'Maintain a log of transactions or activity, typically a financial account/journal or a log of activity to support behavioral analysis within Credit Card Position Keeping. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CreditCardPositionLog:
      description: CreditCardPositionLog
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreditCardPositionLog'
    CardTransactionEvent:
      description: CardTransactionEvent
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CardTransactionEvent'
  parameters:
    creditcardpositionkeepingid:
      name: creditcardpositionkeepingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    cardtransactioneventid:
      name: cardtransactioneventid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CreditCardPositionLog:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreditCardPositionLog'
      required: true
    CardTransactionEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CardTransactionEvent'
      required: true