openapi: 3.0.1
info:
  title: Customer Proposition
  description: This Service Domain maintains bank and customer defined requirements spanning all products and services
  contact:
    name: BIAN
    url: https://bian.org
  version: '10.1.0'
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CustomerProposition/10.1.0
paths:
  '/CustomerProposition/{customerpropositionid}/Control':
    put:
      tags:
        - CR - CustomerPropositionAgreement
      summary: Control Customer Proposition Agreement
      description: Control Customer Proposition Agreement
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerPropositionAgreement'
      responses:
        '200':
          $ref: '#/components/responses/CustomerPropositionAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/Evaluate:
    post:
      tags:
        - CR - CustomerPropositionAgreement
      summary: Evaluate Customer Proposition Agreement
      description: Evaluate Customer Proposition Agreement
      operationId: Evaluate
      requestBody:
        $ref: '#/components/requestBodies/CustomerPropositionAgreement'
      responses:
        '200':
          $ref: '#/components/responses/CustomerPropositionAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/Exchange':
    put:
      tags:
        - CR - CustomerPropositionAgreement
      summary: Exchange Customer Proposition Agreement
      description: Exchange Customer Proposition Agreement
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerPropositionAgreement'
      responses:
        '200':
          $ref: '#/components/responses/CustomerPropositionAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/Grant':
    put:
      tags:
        - CR - CustomerPropositionAgreement
      summary: Grant Customer Proposition Agreement
      description: Grant Customer Proposition Agreement
      operationId: Grant
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerPropositionAgreement'
      responses:
        '200':
          $ref: '#/components/responses/CustomerPropositionAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/Notify':
    get:
      tags:
        - CR - CustomerPropositionAgreement
      summary: Notify Customer Proposition Agreement
      description: Notify Customer Proposition Agreement
      operationId: Notify
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerPropositionAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/Request':
    put:
      tags:
        - CR - CustomerPropositionAgreement
      summary: Request Customer Proposition Agreement
      description: Request Customer Proposition Agreement
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerPropositionAgreement'
      responses:
        '200':
          $ref: '#/components/responses/CustomerPropositionAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/Retrieve':
    get:
      tags:
        - CR - CustomerPropositionAgreement
      summary: Retrieve Customer Proposition Agreement
      description: Retrieve Customer Proposition Agreement
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerPropositionAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/Update':
    put:
      tags:
        - CR - CustomerPropositionAgreement
      summary: Update Customer Proposition Agreement
      description: Update Customer Proposition Agreement
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerPropositionAgreement'
      responses:
        '200':
          $ref: '#/components/responses/CustomerPropositionAgreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/BankDefinedProductandServiceTerm/{bankdefinedproductandservicetermid}/Evaluate':
    post:
      tags:
        - BQ - BankDefinedProductandServiceTerm
      summary: Evaluate Bank Defined Product and Service Term
      description: Evaluate Bank Defined Product and Service Term
      operationId: EvaluateBankDefinedProductandServiceTerm
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
        - $ref: '#/components/parameters/bankdefinedproductandservicetermid'
      requestBody:
        $ref: '#/components/requestBodies/BankDefinedProductandServiceTerm'
      responses:
        '200':
          $ref: '#/components/responses/BankDefinedProductandServiceTerm'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/CustomerDefinedProductandServiceTerm/{customerdefinedproductandservicetermid}/Evaluate':
    post:
      tags:
        - BQ - CustomerDefinedProductandServiceTerm
      summary: Evaluate Customer Defined Product and Service Term
      description: Evaluate Customer Defined Product and Service Term
      operationId: EvaluateCustomerDefinedProductandServiceTerm
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
        - $ref: '#/components/parameters/customerdefinedproductandservicetermid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerDefinedProductandServiceTerm'
      responses:
        '200':
          $ref: '#/components/responses/CustomerDefinedProductandServiceTerm'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/BankDefinedProductandServiceTerm/{bankdefinedproductandservicetermid}/Exchange':
    put:
      tags:
        - BQ - BankDefinedProductandServiceTerm
      summary: Exchange Bank Defined Product and Service Term
      description: Exchange Bank Defined Product and Service Term
      operationId: ExchangeBankDefinedProductandServiceTerm
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
        - $ref: '#/components/parameters/bankdefinedproductandservicetermid'
      requestBody:
        $ref: '#/components/requestBodies/BankDefinedProductandServiceTerm'
      responses:
        '200':
          $ref: '#/components/responses/BankDefinedProductandServiceTerm'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/CustomerDefinedProductandServiceTerm/{customerdefinedproductandservicetermid}/Exchange':
    put:
      tags:
        - BQ - CustomerDefinedProductandServiceTerm
      summary: Exchange Customer Defined Product and Service Term
      description: Exchange Customer Defined Product and Service Term
      operationId: ExchangeCustomerDefinedProductandServiceTerm
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
        - $ref: '#/components/parameters/customerdefinedproductandservicetermid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerDefinedProductandServiceTerm'
      responses:
        '200':
          $ref: '#/components/responses/CustomerDefinedProductandServiceTerm'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/BankDefinedProductandServiceTerm/{bankdefinedproductandservicetermid}/Notify':
    get:
      tags:
        - BQ - BankDefinedProductandServiceTerm
      summary: Notify Bank Defined Product and Service Term
      description: Notify Bank Defined Product and Service Term
      operationId: NotifyBankDefinedProductandServiceTerm
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
        - $ref: '#/components/parameters/bankdefinedproductandservicetermid'
      responses:
        '200':
          $ref: '#/components/responses/BankDefinedProductandServiceTerm'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/CustomerDefinedProductandServiceTerm/{customerdefinedproductandservicetermid}/Notify':
    get:
      tags:
        - BQ - CustomerDefinedProductandServiceTerm
      summary: Notify Customer Defined Product and Service Term
      description: Notify Customer Defined Product and Service Term
      operationId: NotifyCustomerDefinedProductandServiceTerm
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
        - $ref: '#/components/parameters/customerdefinedproductandservicetermid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerDefinedProductandServiceTerm'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/BankDefinedProductandServiceTerm/{bankdefinedproductandservicetermid}/Request':
    put:
      tags:
        - BQ - BankDefinedProductandServiceTerm
      summary: Request Bank Defined Product and Service Term
      description: Request Bank Defined Product and Service Term
      operationId: RequestBankDefinedProductandServiceTerm
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
        - $ref: '#/components/parameters/bankdefinedproductandservicetermid'
      requestBody:
        $ref: '#/components/requestBodies/BankDefinedProductandServiceTerm'
      responses:
        '200':
          $ref: '#/components/responses/BankDefinedProductandServiceTerm'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/CustomerDefinedProductandServiceTerm/{customerdefinedproductandservicetermid}/Request':
    put:
      tags:
        - BQ - CustomerDefinedProductandServiceTerm
      summary: Request Customer Defined Product and Service Term
      description: Request Customer Defined Product and Service Term
      operationId: RequestCustomerDefinedProductandServiceTerm
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
        - $ref: '#/components/parameters/customerdefinedproductandservicetermid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerDefinedProductandServiceTerm'
      responses:
        '200':
          $ref: '#/components/responses/CustomerDefinedProductandServiceTerm'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/BankDefinedProductandServiceTerm/{bankdefinedproductandservicetermid}/Retrieve':
    get:
      tags:
        - BQ - BankDefinedProductandServiceTerm
      summary: Retrieve Bank Defined Product and Service Term
      description: Retrieve Bank Defined Product and Service Term
      operationId: RetrieveBankDefinedProductandServiceTerm
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
        - $ref: '#/components/parameters/bankdefinedproductandservicetermid'
      responses:
        '200':
          $ref: '#/components/responses/BankDefinedProductandServiceTerm'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/CustomerDefinedProductandServiceTerm/{customerdefinedproductandservicetermid}/Retrieve':
    get:
      tags:
        - BQ - CustomerDefinedProductandServiceTerm
      summary: Retrieve Customer Defined Product and Service Term
      description: Retrieve Customer Defined Product and Service Term
      operationId: RetrieveCustomerDefinedProductandServiceTerm
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
        - $ref: '#/components/parameters/customerdefinedproductandservicetermid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerDefinedProductandServiceTerm'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/BankDefinedProductandServiceTerm/{bankdefinedproductandservicetermid}/Update':
    put:
      tags:
        - BQ - BankDefinedProductandServiceTerm
      summary: Update Bank Defined Product and Service Term
      description: Update Bank Defined Product and Service Term
      operationId: UpdateBankDefinedProductandServiceTerm
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
        - $ref: '#/components/parameters/bankdefinedproductandservicetermid'
      requestBody:
        $ref: '#/components/requestBodies/BankDefinedProductandServiceTerm'
      responses:
        '200':
          $ref: '#/components/responses/BankDefinedProductandServiceTerm'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerProposition/{customerpropositionid}/CustomerDefinedProductandServiceTerm/{customerdefinedproductandservicetermid}/Update':
    put:
      tags:
        - BQ - CustomerDefinedProductandServiceTerm
      summary: Update Customer Defined Product and Service Term
      description: Update Customer Defined Product and Service Term
      operationId: UpdateCustomerDefinedProductandServiceTerm
      parameters:
        - $ref: '#/components/parameters/customerpropositionid'
        - $ref: '#/components/parameters/customerdefinedproductandservicetermid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerDefinedProductandServiceTerm'
      responses:
        '200':
          $ref: '#/components/responses/CustomerDefinedProductandServiceTerm'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    date:
      type: object
      properties:
        Date:
          type: string
          description: "A date is a Gregorian calendar representation in various common resolutions: year, month, week, day. (UN/CEFACT)\n\nA particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. (ISO20022)"
          format: datatype
      description: Date on which the agreement was signed by all parties. (ISO20022)
    datetimeperiod:
      type: object
      properties:
        Datetimeperiod:
          type: string
          description: 'Time span defined by a start date and time, and an end date and time. (ISO20022)'
          format: datatype
      description: "Period during which the agreement is valid\n"
    agreementlifecyclestatus:
      type: object
      properties:
        Agreementlifecyclestatus:
          type: string
          description: 'Data type that specifies the LifecycleStatus of agreement (e.g., potential, offered, confirmed, completed, signed, terminated).'
          format: datatype
      description: 'A characteristic of agreement which refers to the LifecycleStatus of agreement (e.g., potential, offered, confirmed, completed, signed, terminated).'
    identifier:
      type: object
      properties:
        Identifier:
          type: string
          description: An identifier is a character string used to uniquely identify one instance of an object within an identification scheme that is managed by an agency. (UN/CEFAT)
          format: datatype
      description: 'The identifier of agreement like Agreement Number, Contract Number, Contract Registration Number, etc. '
    datetime:
      type: object
      properties:
        Datetime:
          type: string
          description: "A date time identifies a date and time of day to various common resolutions: year, month, week, day, hour, minute, second, and fraction of second. (UN/CEFACT)\n\nA particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in \"XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004\" which is aligned with ISO 8601. (ISO20022)\nNote on the time format:\n1) beginning / end of calendar day\n00:00:00 = the beginning of a calendar day\n24:00:00 = the end of a calendar day\n2) fractions of second in time format\nDecimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed."
          format: datatype
      description: 'A characteristic of agreement which refers to 1) LifecycleDate of agreement (e.g., SignedDate, TerminatedDate, FulfilledDate) OR 2) ArrangedDate of agreement (e.g., StartingDate, EndingDate, ValidityPeriod, EffectiveDate).'
    agreement:
      type: object
      properties:
        AgreementSignedDate:
          $ref: '#/components/schemas/date'
        AgreementType:
          type: agreementtype
          description: 'Specifies the category of agreement. Agreement type is very often referred to product. But, the term product does not cover all kinds of agreements. An Agreement can be subtyped from the perspective of various aspects of interest. One can classify the agreement from the perspective of format type (e.g., verbal agreement, written agreement). Other one can classify agreement based on duration like short-term agreement or long-term agreement.'
          format: agreementtype
        AgreementValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        AgreementVersion:
          type: string
          description: ''
          format: string
        AgreementStatus:
          $ref: '#/components/schemas/agreementlifecyclestatus'
        AgreementSubjectMatter:
          type: string
          description: ''
          format: string
        AgreementIdentification:
          $ref: '#/components/schemas/identifier'
        AgreementDate:
          $ref: '#/components/schemas/datetime'
      description: Reference to Customer Defined Product and Service Term
    actiontype:
      type: object
      properties:
        Actiontype:
          type: string
          description: Data type that specifies type of business action
          format: datatype
      description: ''
    arrangementlifecyclestatus:
      type: object
      properties:
        Arrangementlifecyclestatus:
          type: string
          description: 'Data type that specifies the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.).'
          format: datatype
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    arrangement:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontype'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementlifecyclestatus'
      description: Reference to Customer Defined Product and Service Term
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: The type of Customer Defined Product and Service Term
    CustomerDefinedProductandServiceTerm:
      type: object
      properties:
        Preconditions:
          type: string
          description: The required status/situation for the terms to apply and or tasks that need to be completed prior to the initiation of the workstep
          format: condition(class)
        Schedule:
          type: schedule
          description: Any timing/duration considerations applying to the Customer Defined Product and Service Term
          format: schedule
        BusinessService:
          type: businessservice
          description: The Customer Defined Product and Service Term specific Business Service
          format: businessservice
        CustomerPropositionAgreementReference:
          $ref: '#/components/schemas/agreement'
        CustomerDefinedProductandServiceTermReference:
          $ref: '#/components/schemas/arrangement'
        CustomerDefinedProductandServiceTermType:
          $ref: '#/components/schemas/text'
      description: The Customer Defined Product and Service Term reflects the application of a specific rule or regulation that is an aspect of the Customer Defined Product and Service Term
    BankDefinedProductandServiceTerm:
      type: object
      properties:
        Preconditions:
          type: string
          description: The required status/situation for the terms to apply and or tasks that need to be completed prior to the initiation of the workstep
          format: condition(class)
        Schedule:
          type: schedule
          description: Any timing/duration considerations applying to the Bank Defined Product and Service Term
          format: schedule
        BusinessService:
          type: businessservice
          description: The Bank Defined Product and Service Term specific Business Service
          format: businessservice
        CustomerPropositionAgreementReference:
          $ref: '#/components/schemas/agreement'
        BankDefinedProductandServiceTermReference:
          $ref: '#/components/schemas/arrangement'
        BankDefinedProductandServiceTermType:
          $ref: '#/components/schemas/text'
      description: The Customer Defined Product and Service Term reflects the application of a specific rule or regulation that is an aspect of the Customer Defined Product and Service Term
    workproduct:
      type: object
      properties:
        Workproduct:
          type: string
          description: 'Contact records, working papers, documents and activity logs produced during the execution of a work task'
          format: datatype
      description: ''
    workproducttypevalues:
      enum:
        - Document
        - WorkingPaper
        - ActivityLog
        - Form
        - File
        - MeetingSchedule
        - MeetingMinute
      type: string
      description: ">\n* `Document` - \n* `WorkingPaper` - \n* `ActivityLog` - \n* `Form` - \n* `File` - File of consolidated notes, evaluations and recommendations for the work task\n* `MeetingSchedule` - \n* `MeetingMinute` - \n"
    CustomerPropositionOutcome:
      type: object
      properties:
        CustomerPropositionAgreement:
          $ref: '#/components/schemas/agreement'
        CustomerPropositionWorkProduct:
          $ref: '#/components/schemas/workproduct'
        CustomerPropositionWorkProductType:
          $ref: '#/components/schemas/workproducttypevalues'
      description: The Customer Defined Product and Service Term reflects the application of a specific rule or regulation that is an aspect of the Customer Defined Product and Service Term
    feature:
      type: object
      properties:
        FeatureType:
          type: string
          description: ''
          format: string
      description: 'A selected optional feature in a product, identified by Parameter Type'
    agreementtypevalues:
      enum:
        - CustomerAgreement
        - SupplierAgreement
        - ProductBrokerAgreement
        - ProductSaleAgreement
        - FiduciaryAgreement
        - CommissionSaleAgreement
        - ServicingMandateAgreement
        - ChannelAccessAgreement
      type: string
      description: ">\n* `CustomerAgreement` - \n* `SupplierAgreement` - \n* `ProductBrokerAgreement` - \n* `ProductSaleAgreement` - \n* `FiduciaryAgreement` - \n* `CommissionSaleAgreement` - \n* `ServicingMandateAgreement` - \n* `ChannelAccessAgreement` - \n"
    instructionlifecyclestatus:
      type: object
      properties:
        Instructionlifecyclestatus:
          type: string
          description: 'Data type that specifies the LifecycleStatus of instruction (e.g., requested, executed, fulfilled, etc.); '
          format: datatype
      description: 'A characteristic of instruction which refers to the LifecycleStatus of instruction (e.g., requested, executed, fulfilled, etc.); '
    instruction:
      type: object
      properties:
        InstructionDueDate:
          $ref: '#/components/schemas/date'
        InstructionStatus:
          $ref: '#/components/schemas/instructionlifecyclestatus'
        ObligeeReference:
          type: string
          description: ''
          format: string
        ObligorReference:
          type: string
          description: ''
          format: string
        InstructionIdentifier:
          $ref: '#/components/schemas/identifier'
        InstructionType:
          type: string
          description: "Classification Value classifying the instruction according to the \"type of action\" to be applied to a subject matter.\n\nexamples: payment instruction, withdrawal instruction, blocking instruction, accounting instruction, sending instruction, purchase instruction blocked deposit, a blocked securities portfolio, pawn, etc."
          format: string
        InstructionResult:
          type: string
          description: ''
          format: string
        InstructionDescription:
          type: string
          description: ''
          format: string
        InstructionLog:
          type: string
          description: ''
          format: string
        InstructionPurpose:
          type: string
          description: ''
          format: string
      description: Request to discharge Customer Proposition Agreement
    schedule:
      type: object
      properties:
        Schedule:
          type: string
          description: "Defined sequence of planned tasks/actions or a timetable of available services\n\nA schedule is a time based series of something"
          format: datatype
      description: Timetable to discharge Customer Proposition Agreement
    involvedparty:
      type: object
      properties:
        Involvedparty:
          type: string
          description: ''
          format: datatype
      description: Party who is involved in Customer Proposition Agreement
    rulesettype:
      type: object
      properties:
        Rulesettype:
          type: string
          description: Data type specifies the classification of RuleSet
          format: datatype
      description: ''
    ruleset:
      type: object
      properties:
        RuleSetDefinition:
          type: string
          description: ''
          format: string
        RuleSetInterpretation:
          type: string
          description: ''
          format: string
        RuleSetType:
          $ref: '#/components/schemas/rulesettype'
        RuleSetName:
          type: string
          description: ''
          format: string
        RuleSetIdentification:
          type: string
          description: ''
          format: string
      description: Reference to the regulation which is defined in Customer Proposition Agreement
    accountidentification:
      type: object
      properties:
        Accountidentification:
          type: string
          description: ''
          format: datatype
      description: The identifier of account like Account Number.
    accountdate:
      type: object
      properties:
        Accountdate:
          type: string
          description: ''
          format: datatype
      description: 'A characteristic of account which refers to LifecycleDate of account (e.g., ClosingDate, OpeningDate, LiveDate, etc.) '
    accounttype:
      type: object
      properties:
        Accounttype:
          type: string
          description: 'A classification of accounts based on their purpose '
          format: datatype
      description: 'Specifies the category of account like payment account, loan account, cash account, securities account, etc. '
    accountbalance:
      type: object
      properties:
        Accountbalance:
          type: string
          description: "Numerical representation of the net increases and decreases in an account at a specific point in time. (ISO20022)\nhttps://www.iso20022.org/standardsrepository/type/Balance"
          format: datatype
      description: "The state of the obligations managed on the account, the result of all entries on the account.\n\nNumerical representation of the net increases and decreases in an account at a specific point in time. (ISO20022)\n\nBanking: Amount available in an account for withdrawal or use.\nRead more: http://www.businessdictionary.com/definition/balance.html\n\nBookkeeping: Difference between the debit and credit sides of an account.\nRead more: http://www.businessdictionary.com/definition/balance.html"
    accountcurrency:
      type: object
      properties:
        Accountcurrency:
          type: string
          description: ''
          format: datatype
      description: ''
    account:
      type: object
      properties:
        AccountStatus:
          type: string
          description: 'A characteristic of account which refers to the LifecycleStatus of account like opened, closed, blocked, etc.'
          format: string
        AccountIdentification:
          $ref: '#/components/schemas/accountidentification'
        AccountDate:
          $ref: '#/components/schemas/accountdate'
        AccountType:
          $ref: '#/components/schemas/accounttype'
        AccountPurpose:
          $ref: '#/components/schemas/text'
        AccountBalance:
          $ref: '#/components/schemas/accountbalance'
        AccountCurrency:
          $ref: '#/components/schemas/accountcurrency'
        AccountDescription:
          $ref: '#/components/schemas/text'
      description: "Reference to the account which is linked to Customer Proposition Agreement\n\nA characteristic of agreement which refers to its involved account to specify the account that will be used to register for the transactions in position keeping management."
    object:
      type: object
      properties:
        ObjectProperties:
          type: string
          description: ''
          format: string
        ObjectDescription:
          type: string
          description: ''
          format: string
      description: The subject matter of  Customer Proposition Agreement
    productidentification:
      type: object
      properties:
        Productidentification:
          type: string
          description: ''
          format: datatype
      description: The identifier of product e.g. ISIN Code.
    bankingproducttype:
      type: object
      properties:
        Bankingproducttype:
          type: string
          description: "Functional classification of the product \n\n-Refer to Specification for the description of banking products or services (BPoS)"
          format: datatype
      description: 'Specifies the category/type/class of product like financial product. Product can be categorized according to different perspectives.  '
    productlifecyclestatus:
      type: object
      properties:
        Productlifecyclestatus:
          type: string
          description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
          format: datatype
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    bankingproduct:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductType:
          $ref: '#/components/schemas/bankingproducttype'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productlifecyclestatus'
        ProductPriority:
          type: string
          description: ''
          format: string
        ProductDescription:
          type: string
          description: A detailed explanation or commentary of product.
          format: string
        ProductVersion:
          type: string
          description: ''
          format: string
      description: "Reference to the product which is linked to Customer Proposition Agreement\n\nComment: \nA characteristic of agreement which refers to its related products that are sold by agreement."
    calendar:
      type: object
      properties:
        Calendar:
          type: string
          description: 'A series of dates/times of specific types of actions/events associated with the fulfillment of some form of arrangement - planned and actual. '
          format: datatype
      description: The calendar of Customer Proposition Agreement
    CustomerPropositionAgreement:
      type: object
      properties:
        CustomerPropositionAgreementParameterType:
          $ref: '#/components/schemas/text'
        CustomerPropositionAgreementSelectedOption:
          $ref: '#/components/schemas/feature'
        CustomerPropositionAgreementType:
          $ref: '#/components/schemas/agreementtypevalues'
        CustomerPropositionAgreementReference:
          $ref: '#/components/schemas/agreement'
        CustomerPropositionAgreementDischargeRequest:
          $ref: '#/components/schemas/instruction'
        CustomerPropositionAgreementDischargeSchedule:
          $ref: '#/components/schemas/schedule'
        CustomerPropositionAgreementStatus:
          $ref: '#/components/schemas/agreementlifecyclestatus'
        CustomerPropositionAgreementAssociatedParty:
          $ref: '#/components/schemas/involvedparty'
        CustomerPropositionAgreementCustomerReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerPropositionAgreementObligation:
          $ref: '#/components/schemas/arrangement'
        CustomerPropositionAgreementEntitlement:
          $ref: '#/components/schemas/arrangement'
        CustomerPropositionAgreementRegulationReference:
          $ref: '#/components/schemas/ruleset'
        CustomerPropositionAgreementRegulationType:
          $ref: '#/components/schemas/rulesettype'
        CustomerPropositionAgreementJurisdiction:
          type: string
          description: Reference to the jurisdiction that is assigned to Customer Proposition Agreement in case of legal dispute.
          format: jurisdiction(class)
        CustomerPropositionAgreementAccountReference:
          $ref: '#/components/schemas/account'
        CustomerPropositionAgreementSubjectMatter:
          $ref: '#/components/schemas/object'
        CustomerPropositionAgreementProductReference:
          $ref: '#/components/schemas/bankingproduct'
        CustomerPropositionAgreementCalendarReference:
          $ref: '#/components/schemas/calendar'
        CustomerPropositionAgreementAssociatedAgreementReference:
          $ref: '#/components/schemas/agreement'
      description: "Maintain the terms and conditions that apply to a commercial relationship within Customer Proposition.\n\n"
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CustomerPropositionAgreement:
      description: CustomerPropositionAgreement
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerPropositionAgreement'
    BankDefinedProductandServiceTerm:
      description: BankDefinedProductandServiceTerm
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BankDefinedProductandServiceTerm'
    CustomerDefinedProductandServiceTerm:
      description: CustomerDefinedProductandServiceTerm
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerDefinedProductandServiceTerm'
  parameters:
    customerpropositionid:
      name: customerpropositionid
      in: path
      required: true
      style: simple
      schema:
        type: string
    bankdefinedproductandservicetermid:
      name: bankdefinedproductandservicetermid
      in: path
      required: true
      style: simple
      schema:
        type: string
    customerdefinedproductandservicetermid:
      name: customerdefinedproductandservicetermid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CustomerPropositionAgreement:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerPropositionAgreement'
      required: true
    BankDefinedProductandServiceTerm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BankDefinedProductandServiceTerm'
      required: true
    CustomerDefinedProductandServiceTerm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerDefinedProductandServiceTerm'
      required: true