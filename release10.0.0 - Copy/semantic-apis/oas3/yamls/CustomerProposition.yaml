openapi: 3.0.1
info:
  title: Customer Proposition
  description: This Service Domain maintains bank and customer defined requirements spanning all products and services
  version: 10.0.0
servers:
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/B154/CustomerProposition/10.0.0
paths:
  /CustomerProposition/{customerpropositionId}/Control:
    put:
      tags:
      - CR - CustomerPropositionAgreement
      summary: Control Customer Proposition Agreement
      description: Control Customer Proposition Agreement
      operationId: Control
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      requestBody:
        $ref: '#/components/requestBodies/CustomerPropositionAgreement'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPropositionAgreement'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/Evaluate:
    post:
      tags:
      - CR - CustomerPropositionAgreement
      summary: Evaluate Customer Proposition Agreement
      description: Evaluate Customer Proposition Agreement
      operationId: Evaluate
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/CustomerPropositionAgreement'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPropositionAgreement'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/Exchange:
    put:
      tags:
      - CR - CustomerPropositionAgreement
      summary: Exchange Customer Proposition Agreement
      description: Exchange Customer Proposition Agreement
      operationId: Exchange
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      requestBody:
        $ref: '#/components/requestBodies/CustomerPropositionAgreement'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPropositionAgreement'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/Grant:
    put:
      tags:
      - CR - CustomerPropositionAgreement
      summary: Grant Customer Proposition Agreement
      description: Grant Customer Proposition Agreement
      operationId: Grant
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      requestBody:
        $ref: '#/components/requestBodies/CustomerPropositionAgreement'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPropositionAgreement'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/Notify:
    get:
      tags:
      - CR - CustomerPropositionAgreement
      summary: Notify Customer Proposition Agreement
      description: Notify Customer Proposition Agreement
      operationId: Notify
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPropositionAgreement'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/Request:
    put:
      tags:
      - CR - CustomerPropositionAgreement
      summary: Request Customer Proposition Agreement
      description: Request Customer Proposition Agreement
      operationId: Request
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      requestBody:
        $ref: '#/components/requestBodies/CustomerPropositionAgreement'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPropositionAgreement'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/Retrieve:
    get:
      tags:
      - CR - CustomerPropositionAgreement
      summary: Retrieve Customer Proposition Agreement
      description: Retrieve Customer Proposition Agreement
      operationId: Retrieve
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPropositionAgreement'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/Update:
    put:
      tags:
      - CR - CustomerPropositionAgreement
      summary: Update Customer Proposition Agreement
      description: Update Customer Proposition Agreement
      operationId: Update
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      requestBody:
        $ref: '#/components/requestBodies/CustomerPropositionAgreement'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPropositionAgreement'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/BankDefinedProductandServiceTerm/Evaluate:
    post:
      tags:
      - BQ - BankDefinedProductandServiceTerm
      summary: Evaluate Bank Defined Product and Service Term
      description: Evaluate Bank Defined Product and Service Term
      operationId: EvaluateBankDefinedProductandServiceTerm
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      requestBody:
        $ref: '#/components/requestBodies/BankDefinedProductandServiceTerm'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankDefinedProductandServiceTerm'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/CustomerDefinedProductandServiceTerm/Evaluate:
    post:
      tags:
      - BQ - CustomerDefinedProductandServiceTerm
      summary: Evaluate Customer Defined Product and Service Term
      description: Evaluate Customer Defined Product and Service Term
      operationId: EvaluateCustomerDefinedProductandServiceTerm
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      requestBody:
        $ref: '#/components/requestBodies/CustomerDefinedProductandServiceTerm'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDefinedProductandServiceTerm'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/BankDefinedProductandServiceTerm/{bankdefinedproductandservicetermId}/Exchange:
    put:
      tags:
      - BQ - BankDefinedProductandServiceTerm
      summary: Exchange Bank Defined Product and Service Term
      description: Exchange Bank Defined Product and Service Term
      operationId: ExchangeBankDefinedProductandServiceTerm
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      - $ref: '#/components/parameters/BankDefinedProductandServiceTermID'
      requestBody:
        $ref: '#/components/requestBodies/BankDefinedProductandServiceTerm'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankDefinedProductandServiceTerm'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  ? /CustomerProposition/{customerpropositionId}/CustomerDefinedProductandServiceTerm/{customerdefinedproductandservicetermId}/Exchange
  : put:
      tags:
      - BQ - CustomerDefinedProductandServiceTerm
      summary: Exchange Customer Defined Product and Service Term
      description: Exchange Customer Defined Product and Service Term
      operationId: ExchangeCustomerDefinedProductandServiceTerm
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      - $ref: '#/components/parameters/CustomerDefinedProductandServiceTermID'
      requestBody:
        $ref: '#/components/requestBodies/CustomerDefinedProductandServiceTerm'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDefinedProductandServiceTerm'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/BankDefinedProductandServiceTerm/{bankdefinedproductandservicetermId}/Notify:
    get:
      tags:
      - BQ - BankDefinedProductandServiceTerm
      summary: Notify Bank Defined Product and Service Term
      description: Notify Bank Defined Product and Service Term
      operationId: NotifyBankDefinedProductandServiceTerm
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      - $ref: '#/components/parameters/BankDefinedProductandServiceTermID'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankDefinedProductandServiceTerm'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  ? /CustomerProposition/{customerpropositionId}/CustomerDefinedProductandServiceTerm/{customerdefinedproductandservicetermId}/Notify
  : get:
      tags:
      - BQ - CustomerDefinedProductandServiceTerm
      summary: Notify Customer Defined Product and Service Term
      description: Notify Customer Defined Product and Service Term
      operationId: NotifyCustomerDefinedProductandServiceTerm
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      - $ref: '#/components/parameters/CustomerDefinedProductandServiceTermID'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDefinedProductandServiceTerm'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/BankDefinedProductandServiceTerm/{bankdefinedproductandservicetermId}/Request:
    put:
      tags:
      - BQ - BankDefinedProductandServiceTerm
      summary: Request Bank Defined Product and Service Term
      description: Request Bank Defined Product and Service Term
      operationId: RequestBankDefinedProductandServiceTerm
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      - $ref: '#/components/parameters/BankDefinedProductandServiceTermID'
      requestBody:
        $ref: '#/components/requestBodies/BankDefinedProductandServiceTerm'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankDefinedProductandServiceTerm'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  ? /CustomerProposition/{customerpropositionId}/CustomerDefinedProductandServiceTerm/{customerdefinedproductandservicetermId}/Request
  : put:
      tags:
      - BQ - CustomerDefinedProductandServiceTerm
      summary: Request Customer Defined Product and Service Term
      description: Request Customer Defined Product and Service Term
      operationId: RequestCustomerDefinedProductandServiceTerm
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      - $ref: '#/components/parameters/CustomerDefinedProductandServiceTermID'
      requestBody:
        $ref: '#/components/requestBodies/CustomerDefinedProductandServiceTerm'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDefinedProductandServiceTerm'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/BankDefinedProductandServiceTerm/{bankdefinedproductandservicetermId}/Retrieve:
    get:
      tags:
      - BQ - BankDefinedProductandServiceTerm
      summary: Retrieve Bank Defined Product and Service Term
      description: Retrieve Bank Defined Product and Service Term
      operationId: RetrieveBankDefinedProductandServiceTerm
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      - $ref: '#/components/parameters/BankDefinedProductandServiceTermID'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankDefinedProductandServiceTerm'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  ? /CustomerProposition/{customerpropositionId}/CustomerDefinedProductandServiceTerm/{customerdefinedproductandservicetermId}/Retrieve
  : get:
      tags:
      - BQ - CustomerDefinedProductandServiceTerm
      summary: Retrieve Customer Defined Product and Service Term
      description: Retrieve Customer Defined Product and Service Term
      operationId: RetrieveCustomerDefinedProductandServiceTerm
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      - $ref: '#/components/parameters/CustomerDefinedProductandServiceTermID'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDefinedProductandServiceTerm'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /CustomerProposition/{customerpropositionId}/BankDefinedProductandServiceTerm/{bankdefinedproductandservicetermId}/Update:
    put:
      tags:
      - BQ - BankDefinedProductandServiceTerm
      summary: Update Bank Defined Product and Service Term
      description: Update Bank Defined Product and Service Term
      operationId: UpdateBankDefinedProductandServiceTerm
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      - $ref: '#/components/parameters/BankDefinedProductandServiceTermID'
      requestBody:
        $ref: '#/components/requestBodies/BankDefinedProductandServiceTerm'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankDefinedProductandServiceTerm'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  ? /CustomerProposition/{customerpropositionId}/CustomerDefinedProductandServiceTerm/{customerdefinedproductandservicetermId}/Update
  : put:
      tags:
      - BQ - CustomerDefinedProductandServiceTerm
      summary: Update Customer Defined Product and Service Term
      description: Update Customer Defined Product and Service Term
      operationId: UpdateCustomerDefinedProductandServiceTerm
      parameters:
      - $ref: '#/components/parameters/CustomerPropositionID'
      - $ref: '#/components/parameters/CustomerDefinedProductandServiceTermID'
      requestBody:
        $ref: '#/components/requestBodies/CustomerDefinedProductandServiceTerm'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDefinedProductandServiceTerm'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    CustomerPropositionAgreement:
      type: object
      properties:
        CustomerPropositionAgreementParameterType:
          type: string
          description: A Classification value that distinguishes between Options defined within Customer Proposition Agreement
        CustomerPropositionAgreementSelectedOption:
          type: string
          description: A selected optional feature in a product, identified by Parameter Type
        CustomerPropositionAgreementType:
          type: string
          description: A Classification value that distinguishes between the subject matters of Customer Proposition Agreement
        CustomerPropositionAgreementReference:
          type: string
          description: An unique reference to an item or an occurrence of Customer Proposition Agreement
        CustomerPropositionAgreementDischargeRequest:
          type: string
          description: Request to discharge Customer Proposition Agreement
        CustomerPropositionAgreementDischargeSchedule:
          type: object
          description: Timetable to discharge Customer Proposition Agreement
        CustomerPropositionAgreementStatus:
          type: string
          description: The status of Customer Proposition Agreement
        CustomerPropositionAgreementAssociatedParty:
          type: object
          description: Party who is involved in Customer Proposition Agreement
        CustomerPropositionAgreementCustomerReference:
          type: object
          description: Reference to the customer who is involved in Customer Proposition Agreement
        CustomerPropositionAgreementObligation:
          type: string
          description: Liability or duty to do something under the terms of Customer Proposition Agreement
        CustomerPropositionAgreementEntitlement:
          type: string
          description: Right to do something under the terms of Customer Proposition Agreement
        CustomerPropositionAgreementRegulationReference:
          type: object
          description: Reference to the regulation which is defined in Customer Proposition Agreement
        CustomerPropositionAgreementRegulationType:
          type: string
          description: A Classification that distinguishes between the regularity domains of Customer Proposition Agreement
        CustomerPropositionAgreementJurisdiction:
          type: object
          description: Reference to the jurisdiction that is assigned to Customer Proposition Agreement in case of legal dispute.
        CustomerPropositionAgreementAccountReference:
          type: string
          description: >-
            Reference to the account which is linked to Customer Proposition Agreement


            A characteristic of agreement which refers to its involved account to specify the account that will be used to register for the transactions in position keeping management.
        CustomerPropositionAgreementSubjectMatter:
          type: object
          description: The subject matter of  Customer Proposition Agreement
        CustomerPropositionAgreementProductReference:
          type: object
          description: "Reference to the product which is linked to Customer Proposition Agreement\n\nComment: \nA characteristic of agreement which refers to its related products that are sold by agreement."
        CustomerPropositionAgreementCalendarReference:
          type: string
          description: The calendar of Customer Proposition Agreement
        CustomerPropositionAgreementAssociatedAgreementReference:
          type: string
          description: Reference to the agreement that is related to Customer Proposition Agreement
    BankDefinedProductandServiceTerm:
      type: object
      properties:
        Preconditions:
          type: object
          description: The required status/situation for the terms to apply and or tasks that need to be completed prior to the initiation of the workstep
        Schedule:
          type: object
          description: Any timing/duration considerations applying to the Bank Defined Product and Service Term
        BusinessService:
          type: object
          description: The Bank Defined Product and Service Term specific Business Service
        CustomerPropositionAgreementReference:
          type: string
          description: Reference to Bank Defined Product and Service Term
        BankDefinedProductandServiceTermReference:
          type: string
          description: Reference to Bank Defined Product and Service Term
        BankDefinedProductandServiceTermType:
          type: string
          description: The type of Bank Defined Product and Service Term
    CustomerDefinedProductandServiceTerm:
      type: object
      properties:
        Preconditions:
          type: object
          description: The required status/situation for the terms to apply and or tasks that need to be completed prior to the initiation of the workstep
        Schedule:
          type: object
          description: Any timing/duration considerations applying to the Customer Defined Product and Service Term
        BusinessService:
          type: object
          description: The Customer Defined Product and Service Term specific Business Service
        CustomerPropositionAgreementReference:
          type: string
          description: Reference to Customer Defined Product and Service Term
        CustomerDefinedProductandServiceTermReference:
          type: string
          description: Reference to Customer Defined Product and Service Term
        CustomerDefinedProductandServiceTermType:
          type: string
          description: The type of Customer Defined Product and Service Term
    CustomerPropositionOutcome:
      type: object
      properties:
        CustomerPropositionAgreement:
          type: string
          description: ''
        CustomerPropositionWorkProduct:
          type: object
          description: ''
        CustomerPropositionWorkProductType:
          type: string
          description: ''
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          description: NA
        status:
          type: string
          description: NA
        message:
          type: string
          description: NA
  parameters:
    CustomerPropositionID:
      name: customerpropositionId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    BankDefinedProductandServiceTermID:
      name: bankdefinedproductandservicetermId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    CustomerDefinedProductandServiceTermID:
      name: customerdefinedproductandservicetermId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    CustomerPropositionOutcomeID:
      name: customerpropositionoutcomeId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
  requestBodies:
    CustomerPropositionAgreement:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerPropositionAgreement'
    BankDefinedProductandServiceTerm:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BankDefinedProductandServiceTerm'
    CustomerDefinedProductandServiceTerm:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerDefinedProductandServiceTerm'
  responses:
    HTTPError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequestsError:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
...
