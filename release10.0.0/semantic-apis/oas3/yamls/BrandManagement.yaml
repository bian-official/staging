openapi: 3.0.1
info:
  title: Brand Management
  description: Respond to events that potentially damage the brand or provide an opportunity to strengthen/leverage brand awareness
  version: 10.0.0
servers:
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/B154/BrandManagement/10.0.0
paths:
  /BrandManagement/{brandmanagementId}/Update:
    put:
      tags:
      - CR - BrandManagementPlan
      summary: UpCR Update aspects of eth brand management plan
      description: UpCR Update aspects of eth brand management plan
      operationId: Update
      parameters:
      - $ref: '#/components/parameters/BrandManagementID'
      requestBody:
        $ref: '#/components/requestBodies/BrandManagementPlan'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandManagementPlan'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /BrandManagement/{brandmanagementId}/Request:
    put:
      tags:
      - CR - BrandManagementPlan
      summary: RqCR Request manual intervention with the brand management plan (e.g. reassess brand value/significance)
      description: RqCR Request manual intervention with the brand management plan (e.g. reassess brand value/significance)
      operationId: Request
      parameters:
      - $ref: '#/components/parameters/BrandManagementID'
      requestBody:
        $ref: '#/components/requestBodies/BrandManagementPlan'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandManagementPlan'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /BrandManagement/{brandmanagementId}/Retrieve:
    get:
      tags:
      - CR - BrandManagementPlan
      summary: ReCR Retrieve details about brand management activity
      description: ReCR Retrieve details about brand management activity
      operationId: Retrieve
      parameters:
      - $ref: '#/components/parameters/BrandManagementID'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandManagementPlan'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /BrandManagement/{brandmanagementId}/BrandAdvice/Create:
    post:
      tags:
      - BQ - BrandAdvice
      summary: CrBQ Create a brand advice task
      description: CrBQ Create a brand advice task
      operationId: CreateBrandAdvice
      parameters:
      - $ref: '#/components/parameters/BrandManagementID'
      requestBody:
        $ref: '#/components/requestBodies/CreateBrandAdviceRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBrandAdviceResponse'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /BrandManagement/{brandmanagementId}/BrandAdvice/{brandadviceId}/Update:
    put:
      tags:
      - BQ - BrandAdvice
      summary: UpBQ Update details of provided brand related advice
      description: UpBQ Update details of provided brand related advice
      operationId: UpdateBrandAdvice
      parameters:
      - $ref: '#/components/parameters/BrandManagementID'
      - $ref: '#/components/parameters/BrandAdviceID'
      requestBody:
        $ref: '#/components/requestBodies/UpdateBrandAdviceRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateBrandAdviceResponse'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /BrandManagement/{brandmanagementId}/BrandAdvice/{brandadviceId}/Request:
    put:
      tags:
      - BQ - BrandAdvice
      summary: RqBQ Request manual intervention for brand advice (e.g. request specialist support)
      description: RqBQ Request manual intervention for brand advice (e.g. request specialist support)
      operationId: RequestBrandAdvice
      parameters:
      - $ref: '#/components/parameters/BrandManagementID'
      - $ref: '#/components/parameters/BrandAdviceID'
      requestBody:
        $ref: '#/components/requestBodies/RequestBrandAdviceRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestBrandAdviceResponse'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /BrandManagement/{brandmanagementId}/BrandAdvice/{brandadviceId}/Retrieve:
    get:
      tags:
      - BQ - BrandAdvice
      summary: ReBQ Retrieve details about brand advice activity
      description: ReBQ Retrieve details about brand advice activity
      operationId: RetrieveBrandAdvice
      parameters:
      - $ref: '#/components/parameters/BrandManagementID'
      - $ref: '#/components/parameters/BrandAdviceID'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveBrandAdviceResponse'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /BrandManagement/{brandmanagementId}/Troubleshooting/Create:
    post:
      tags:
      - BQ - Troubleshooting
      summary: CrBQ Create a brand troubleshooting action
      description: CrBQ Create a brand troubleshooting action
      operationId: CreateTroubleshooting
      parameters:
      - $ref: '#/components/parameters/BrandManagementID'
      requestBody:
        $ref: '#/components/requestBodies/CreateTroubleshootingRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandManagementPlan'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /BrandManagement/{brandmanagementId}/Troubleshooting/{troubleshootingId}/Update:
    put:
      tags:
      - BQ - Troubleshooting
      summary: UpBQ Update details relating to brand troubleshooting activity
      description: UpBQ Update details relating to brand troubleshooting activity
      operationId: UpdateTroubleshooting
      parameters:
      - $ref: '#/components/parameters/BrandManagementID'
      - $ref: '#/components/parameters/TroubleshootingID'
      requestBody:
        $ref: '#/components/requestBodies/Troubleshooting'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Troubleshooting'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /BrandManagement/{brandmanagementId}/Troubleshooting/{troubleshootingId}/Request:
    put:
      tags:
      - BQ - Troubleshooting
      summary: RqBQ Request manual intervention in a troubleshooting action
      description: RqBQ Request manual intervention in a troubleshooting action
      operationId: RequestTroubleshooting
      parameters:
      - $ref: '#/components/parameters/BrandManagementID'
      - $ref: '#/components/parameters/TroubleshootingID'
      requestBody:
        $ref: '#/components/requestBodies/RequestTroubleshootingRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Troubleshooting'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /BrandManagement/{brandmanagementId}/Troubleshooting/{troubleshootingId}/Retrieve:
    get:
      tags:
      - BQ - Troubleshooting
      summary: ReBQ Retrieve details about brand troubleshooting activity
      description: ReBQ Retrieve details about brand troubleshooting activity
      operationId: RetrieveTroubleshooting
      parameters:
      - $ref: '#/components/parameters/BrandManagementID'
      - $ref: '#/components/parameters/TroubleshootingID'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Troubleshooting'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        429:
          $ref: '#/components/responses/TooManyRequestsError'
        500:
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    BrandManagementPlan:
      type: object
      properties:
        BrandDefinition:
          type: string
        BrandValueAssessment:
          type: string
        BrandUsage:
          type: string
        BrandDevelopmentSchedule:
          type: string
    Troubleshooting:
      type: object
      properties:
        BrandImpactEventType:
          type: string
        BrandImpactTroubleshootingTask:
          type: string
        BrandImpactEventDescription:
          type: string
        BrandImpactEventResponseSchedule:
          type: string
        BrandImpactEventResponseAction:
          type: string
        BrandImpactEventWorkProducts:
          type: string
        BrandImpactEventWorkTaskResult:
          type: string
        BrandImpactEventWorkTaskDate-Time:
          type: string
    BrandAdvice:
      type: object
      properties:
        BrandAdviceWorkTaskType:
          type: string
        BrandAdviceWorkTask:
          type: string
        BrandAdviceWorkTaskWorkProducts:
          type: string
        BrandAdviceWorkTaskResult:
          type: string
        BrandAdviceWorkTaskDate-Time:
          type: string
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
        status:
          type: string
        message:
          type: string
    CreateBrandAdviceRequest:
      type: object
      properties:
        BrandManagementPlan:
          type: object
          properties:
            BrandDefinition:
              type: string
            BrandValueAssessment:
              type: string
            BrandUsage:
              type: string
            BrandDevelopmentSchedule:
              type: string
        BrandAdvice:
          type: object
          properties:
            BrandAdviceWorkTaskType:
              type: string
            BrandAdviceWorkTaskDate-Time:
              type: string
    CreateBrandAdviceResponse:
      type: object
      properties:
        BrandManagementPlan:
          type: object
          properties:
            BrandDefinition:
              type: string
            BrandValueAssessment:
              type: string
            BrandUsage:
              type: string
            BrandDevelopmentSchedule:
              type: string
        BrandAdvice:
          type: object
          properties:
            BrandAdviceWorkTaskType:
              type: string
            BrandAdviceWorkTaskWorkProducts:
              type: string
            BrandAdviceWorkTaskResult:
              type: string
            BrandAdviceWorkTaskDate-Time:
              type: string
    UpdateBrandAdviceRequest:
      type: object
      properties:
        BrandAdvice:
          type: object
          properties:
            BrandAdviceWorkTaskType:
              type: string
            BrandAdviceWorkTaskWorkProducts:
              type: string
            BrandAdviceWorkTaskResult:
              type: string
            BrandAdviceWorkTaskDate-Time:
              type: string
    UpdateBrandAdviceResponse:
      type: object
      properties:
        BrandAdvice:
          type: object
          properties:
            BrandAdviceWorkTaskType:
              type: string
            BrandAdviceWorkTaskWorkProducts:
              type: string
            BrandAdviceWorkTaskResult:
              type: string
            BrandAdviceWorkTaskDate-Time:
              type: string
    RequestBrandAdviceRequest:
      type: object
      properties:
        BrandAdvice:
          type: object
          properties:
            BrandAdviceWorkTaskType:
              type: string
            BrandAdviceWorkTaskDate-Time:
              type: string
    RequestBrandAdviceResponse:
      type: object
      properties:
        BrandAdvice:
          type: object
          properties:
            BrandAdviceWorkTaskType:
              type: string
            BrandAdviceWorkTaskWorkProducts:
              type: string
            BrandAdviceWorkTaskResult:
              type: string
            BrandAdviceWorkTaskDate-Time:
              type: string
    RetrieveBrandAdviceResponse:
      type: object
      properties:
        BrandAdvice:
          type: object
          properties:
            BrandAdviceWorkTaskType:
              type: string
            BrandAdviceWorkTaskWorkProducts:
              type: string
            BrandAdviceWorkTaskResult:
              type: string
            BrandAdviceWorkTaskDate-Time:
              type: string
    CreateTroubleshootingRequest:
      type: object
      properties:
        BrandManagementPlan:
          type: object
          properties:
            BrandDefinition:
              type: string
            BrandValueAssessment:
              type: string
            BrandUsage:
              type: string
            BrandDevelopmentSchedule:
              type: string
        Troubleshooting:
          type: object
          properties:
            BrandImpactEventType:
              type: string
            BrandImpactTroubleshootingTask:
              type: string
            BrandImpactEventDescription:
              type: string
            BrandImpactEventResponseSchedule:
              type: string
            BrandImpactEventResponseAction:
              type: string
            BrandImpactEventWorkTaskDate-Time:
              type: string
    RequestTroubleshootingRequest:
      type: object
      properties:
        Troubleshooting:
          type: object
          properties:
            BrandImpactEventType:
              type: string
            BrandImpactTroubleshootingTask:
              type: string
            BrandImpactEventDescription:
              type: string
            BrandImpactEventResponseSchedule:
              type: string
            BrandImpactEventResponseAction:
              type: string
            BrandImpactEventWorkTaskDate-Time:
              type: string
  parameters:
    BrandManagementID:
      name: brandmanagementId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    TroubleshootingID:
      name: troubleshootingId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
    BrandAdviceID:
      name: brandadviceId
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string
  requestBodies:
    BrandManagementPlan:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BrandManagementPlan'
    CreateBrandAdviceRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateBrandAdviceRequest'
    UpdateBrandAdviceRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateBrandAdviceRequest'
    RequestBrandAdviceRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestBrandAdviceRequest'
    CreateTroubleshootingRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTroubleshootingRequest'
    Troubleshooting:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Troubleshooting'
    RequestTroubleshootingRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestTroubleshootingRequest'
  responses:
    HTTPError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequestsError:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
...
