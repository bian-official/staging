openapi: 3.0.1
info:
  title: Virtual Account
  description: 'A Virtual Account is a bank account that is defined on an underlying real account. It can receive and send payments for the underlying account while behaving towards the outside as a separate account. '
  contact:
    name: BIAN
    url: https://bian.org
  version: 12.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/VirtualAccount/12.0.0
paths:
  '/VirtualAccount/{virtualaccountid}/Capture':
    put:
      tags:
        - CR - VirtualAccountFacility
      summary: CaCR Capture Virtual Account Facility activity or event related information
      description: CaCR Capture Virtual Account Facility activity or event related information
      operationId: Capture
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/VirtualAccountFacility'
      responses:
        '200':
          $ref: '#/components/responses/VirtualAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Control':
    put:
      tags:
        - CR - VirtualAccountFacility
      summary: CoCR Control the processing of Virtual Account Facility
      description: CoCR Control the processing of Virtual Account Facility
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/VirtualAccountFacility'
      responses:
        '200':
          $ref: '#/components/responses/VirtualAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Exchange':
    put:
      tags:
        - CR - VirtualAccountFacility
      summary: 'EcCR Accept, verify, etc. aspects of Virtual Account Facility processing'
      description: 'EcCR Accept, verify, etc. aspects of Virtual Account Facility processing'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/VirtualAccountFacility'
      responses:
        '200':
          $ref: '#/components/responses/VirtualAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Execute':
    put:
      tags:
        - CR - VirtualAccountFacility
      summary: ExCR Execute an available automated action for Virtual Account Facility
      description: ExCR Execute an available automated action for Virtual Account Facility
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/VirtualAccountFacility'
      responses:
        '200':
          $ref: '#/components/responses/VirtualAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Grant':
    put:
      tags:
        - CR - VirtualAccountFacility
      summary: GrCR Obtain permission to act in relation to Virtual Account Facility
      description: GrCR Obtain permission to act in relation to Virtual Account Facility
      operationId: Grant
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/VirtualAccountFacility'
      responses:
        '200':
          $ref: '#/components/responses/VirtualAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /VirtualAccount/Initiate:
    post:
      tags:
        - CR - VirtualAccountFacility
      summary: InCR Instantiate a new Virtual Account Facility
      description: InCR Instantiate a new Virtual Account Facility
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/VirtualAccountFacility'
      responses:
        '200':
          $ref: '#/components/responses/VirtualAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Retrieve':
    get:
      tags:
        - CR - VirtualAccountFacility
      summary: ReCR Retrieve details about any aspect of Virtual Account Facility
      description: ReCR Retrieve details about any aspect of Virtual Account Facility
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      responses:
        '200':
          $ref: '#/components/responses/VirtualAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Request':
    put:
      tags:
        - CR - VirtualAccountFacility
      summary: RqCR Request manual intervention or a decision with respect to Virtual Account Facility
      description: RqCR Request manual intervention or a decision with respect to Virtual Account Facility
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/VirtualAccountFacility'
      responses:
        '200':
          $ref: '#/components/responses/VirtualAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Update':
    put:
      tags:
        - CR - VirtualAccountFacility
      summary: UpCR Update details relating to Virtual Account Facility
      description: UpCR Update details relating to Virtual Account Facility
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/VirtualAccountFacility'
      responses:
        '200':
          $ref: '#/components/responses/VirtualAccountFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/DirectDebit/{directdebitid}/Capture':
    put:
      tags:
        - BQ - DirectDebit
      summary: CaBQ Capture Direct Debit activity or event related information
      description: CaBQ Capture Direct Debit activity or event related information
      operationId: CaptureDirectDebit
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/directdebitid'
      requestBody:
        $ref: '#/components/requestBodies/DirectDebit'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/StandingOrder/{standingorderid}/Capture':
    put:
      tags:
        - BQ - StandingOrder
      summary: CaBQ Capture Standing Order activity or event related information
      description: CaBQ Capture Standing Order activity or event related information
      operationId: CaptureStandingOrder
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/standingorderid'
      requestBody:
        $ref: '#/components/requestBodies/StandingOrder'
      responses:
        '200':
          $ref: '#/components/responses/StandingOrder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/DirectDebit/{directdebitid}/Control':
    put:
      tags:
        - BQ - DirectDebit
      summary: CoBQ Control the processing of Direct Debit
      description: CoBQ Control the processing of Direct Debit
      operationId: ControlDirectDebit
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/directdebitid'
      requestBody:
        $ref: '#/components/requestBodies/DirectDebit'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/ServiceFees/{servicefeesid}/Exchange':
    put:
      tags:
        - BQ - ServiceFees
      summary: 'EcBQ Accept, verify, etc. aspects of Fee processing'
      description: 'EcBQ Accept, verify, etc. aspects of Fee processing'
      operationId: ExchangeServiceFees
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/servicefeesid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceFees'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFees'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Interest/{interestid}/Exchange':
    put:
      tags:
        - BQ - Interest
      summary: 'EcBQ Accept, verify, etc. aspects of Interest processing'
      description: 'EcBQ Accept, verify, etc. aspects of Interest processing'
      operationId: ExchangeInterest
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/interestid'
      requestBody:
        $ref: '#/components/requestBodies/Interest'
      responses:
        '200':
          $ref: '#/components/responses/Interest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Statement/{statementid}/Exchange':
    put:
      tags:
        - BQ - Statement
      summary: 'EcBQ Accept, verify, etc. aspects of Statement processing'
      description: 'EcBQ Accept, verify, etc. aspects of Statement processing'
      operationId: ExchangeStatement
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/statementid'
      requestBody:
        $ref: '#/components/requestBodies/Statement'
      responses:
        '200':
          $ref: '#/components/responses/Statement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/ServiceFees/{servicefeesid}/Execute':
    put:
      tags:
        - BQ - ServiceFees
      summary: Execute Apply Service Fee
      description: Execute Apply Service Fee
      operationId: ExecuteServiceFees
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/servicefeesid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceFees'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFees'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Interest/{interestid}/Execute':
    put:
      tags:
        - BQ - Interest
      summary: ExBQ Execute Apply Interest
      description: ExBQ Execute Apply Interest
      operationId: ExecuteInterest
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/interestid'
      requestBody:
        $ref: '#/components/requestBodies/Interest'
      responses:
        '200':
          $ref: '#/components/responses/Interest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/DirectDebit/{directdebitid}/Grant':
    put:
      tags:
        - BQ - DirectDebit
      summary: GrBQ Obtain permission to act in relation to Direct Debit
      description: GrBQ Obtain permission to act in relation to Direct Debit
      operationId: GrantDirectDebit
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/directdebitid'
      requestBody:
        $ref: '#/components/requestBodies/DirectDebit'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/StandingOrder/{standingorderid}/Grant':
    put:
      tags:
        - BQ - StandingOrder
      summary: GrBQ Obtain permission to act in relation to Standing Order
      description: GrBQ Obtain permission to act in relation to Standing Order
      operationId: GrantStandingOrder
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/standingorderid'
      requestBody:
        $ref: '#/components/requestBodies/StandingOrder'
      responses:
        '200':
          $ref: '#/components/responses/StandingOrder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Statement/{statementid}/Grant':
    put:
      tags:
        - BQ - Statement
      summary: GrBQ Obtain permission to act in relation to Statement
      description: GrBQ Obtain permission to act in relation to Statement
      operationId: GrantStatement
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/statementid'
      requestBody:
        $ref: '#/components/requestBodies/Statement'
      responses:
        '200':
          $ref: '#/components/responses/Statement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/DirectDebit/Initiate':
    post:
      tags:
        - BQ - DirectDebit
      summary: InBQ Instantiate a new Direct Debit
      description: InBQ Instantiate a new Direct Debit
      operationId: InitiateDirectDebit
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/DirectDebit'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/ServiceFees/Initiate':
    post:
      tags:
        - BQ - ServiceFees
      summary: InBQ Instantiate a new Fee
      description: InBQ Instantiate a new Fee
      operationId: InitiateServiceFees
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceFees'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFees'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Interest/Initiate':
    post:
      tags:
        - BQ - Interest
      summary: InBQ Instantiate a new Interest
      description: InBQ Instantiate a new Interest
      operationId: InitiateInterest
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/Interest'
      responses:
        '200':
          $ref: '#/components/responses/Interest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/StandingOrder/Initiate':
    post:
      tags:
        - BQ - StandingOrder
      summary: InBQ Instantiate a new Standing Order
      description: InBQ Instantiate a new Standing Order
      operationId: InitiateStandingOrder
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/StandingOrder'
      responses:
        '200':
          $ref: '#/components/responses/StandingOrder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Statement/Initiate':
    post:
      tags:
        - BQ - Statement
      summary: InBQ Instantiate a new Statement
      description: InBQ Instantiate a new Statement
      operationId: InitiateStatement
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/Statement'
      responses:
        '200':
          $ref: '#/components/responses/Statement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/DirectDebit/{directdebitid}/Retrieve':
    get:
      tags:
        - BQ - DirectDebit
      summary: ReBQ Retrieve details about any aspect of Direct Debit
      description: ReBQ Retrieve details about any aspect of Direct Debit
      operationId: RetrieveDirectDebit
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/directdebitid'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/ServiceFees/{servicefeesid}/Retrieve':
    get:
      tags:
        - BQ - ServiceFees
      summary: ReBQ Retrieve details about any aspect of Fee
      description: ReBQ Retrieve details about any aspect of Fee
      operationId: RetrieveServiceFees
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/servicefeesid'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFees'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Interest/{interestid}/Retrieve':
    get:
      tags:
        - BQ - Interest
      summary: ReBQ Retrieve details about any aspect of Interest
      description: ReBQ Retrieve details about any aspect of Interest
      operationId: RetrieveInterest
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/interestid'
      responses:
        '200':
          $ref: '#/components/responses/Interest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/StandingOrder/{standingorderid}/Retrieve':
    get:
      tags:
        - BQ - StandingOrder
      summary: ReBQ Retrieve details about any aspect of Standing Order
      description: ReBQ Retrieve details about any aspect of Standing Order
      operationId: RetrieveStandingOrder
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/standingorderid'
      responses:
        '200':
          $ref: '#/components/responses/StandingOrder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Statement/{statementid}/Retrieve':
    get:
      tags:
        - BQ - Statement
      summary: ReBQ Retrieve details about any aspect of Statement
      description: ReBQ Retrieve details about any aspect of Statement
      operationId: RetrieveStatement
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/statementid'
      responses:
        '200':
          $ref: '#/components/responses/Statement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/DirectDebit/{directdebitid}/Request':
    put:
      tags:
        - BQ - DirectDebit
      summary: RqBQ Request manual intervention or a decision with respect to Direct Debit
      description: RqBQ Request manual intervention or a decision with respect to Direct Debit
      operationId: RequestDirectDebit
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/directdebitid'
      requestBody:
        $ref: '#/components/requestBodies/DirectDebit'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/ServiceFees/{servicefeesid}/Request':
    put:
      tags:
        - BQ - ServiceFees
      summary: RqBQ Request manual intervention or a decision with respect to Fee
      description: RqBQ Request manual intervention or a decision with respect to Fee
      operationId: RequestServiceFees
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/servicefeesid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceFees'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFees'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Interest/{interestid}/Request':
    put:
      tags:
        - BQ - Interest
      summary: RqBQ Request manual intervention or a decision with respect to Interest
      description: RqBQ Request manual intervention or a decision with respect to Interest
      operationId: RequestInterest
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/interestid'
      requestBody:
        $ref: '#/components/requestBodies/Interest'
      responses:
        '200':
          $ref: '#/components/responses/Interest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/StandingOrder/{standingorderid}/Request':
    put:
      tags:
        - BQ - StandingOrder
      summary: RqBQ Request manual intervention or a decision with respect to Standing Order
      description: RqBQ Request manual intervention or a decision with respect to Standing Order
      operationId: RequestStandingOrder
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/standingorderid'
      requestBody:
        $ref: '#/components/requestBodies/StandingOrder'
      responses:
        '200':
          $ref: '#/components/responses/StandingOrder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Statement/{statementid}/Request':
    put:
      tags:
        - BQ - Statement
      summary: RqBQ Request manual intervention or a decision with respect to Statement
      description: RqBQ Request manual intervention or a decision with respect to Statement
      operationId: RequestStatement
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/statementid'
      requestBody:
        $ref: '#/components/requestBodies/Statement'
      responses:
        '200':
          $ref: '#/components/responses/Statement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/DirectDebit/{directdebitid}/Update':
    put:
      tags:
        - BQ - DirectDebit
      summary: UpBQ Update details relating to Direct Debit
      description: UpBQ Update details relating to Direct Debit
      operationId: UpdateDirectDebit
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/directdebitid'
      requestBody:
        $ref: '#/components/requestBodies/DirectDebit'
      responses:
        '200':
          $ref: '#/components/responses/DirectDebit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/ServiceFees/{servicefeesid}/Update':
    put:
      tags:
        - BQ - ServiceFees
      summary: Update details about an applied service fee
      description: Update details about an applied service fee
      operationId: UpdateServiceFees
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/servicefeesid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceFees'
      responses:
        '200':
          $ref: '#/components/responses/ServiceFees'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Interest/{interestid}/Update':
    put:
      tags:
        - BQ - Interest
      summary: UpBQ Update details relating to Interest
      description: UpBQ Update details relating to Interest
      operationId: UpdateInterest
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/interestid'
      requestBody:
        $ref: '#/components/requestBodies/Interest'
      responses:
        '200':
          $ref: '#/components/responses/Interest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/StandingOrder/{standingorderid}/Update':
    put:
      tags:
        - BQ - StandingOrder
      summary: UpBQ Update details relating to Standing Order
      description: UpBQ Update details relating to Standing Order
      operationId: UpdateStandingOrder
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/standingorderid'
      requestBody:
        $ref: '#/components/requestBodies/StandingOrder'
      responses:
        '200':
          $ref: '#/components/responses/StandingOrder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/Statement/{statementid}/Update':
    put:
      tags:
        - BQ - Statement
      summary: UpBQ Update details relating to Statement
      description: UpBQ Update details relating to Statement
      operationId: UpdateStatement
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/statementid'
      requestBody:
        $ref: '#/components/requestBodies/Statement'
      responses:
        '200':
          $ref: '#/components/responses/Statement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/AmountBlock/Initiate':
    post:
      tags:
        - BQ - AmountBlock
      summary: Initiate an amount block
      description: Initiate an amount block
      operationId: InitiateAmountBlock
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/AmountBlock'
      responses:
        '200':
          $ref: '#/components/responses/AmountBlock'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/AmountBlock/{amountblockid}/Retrieve':
    get:
      tags:
        - BQ - AmountBlock
      summary: Retrieve details about an amount block
      description: Retrieve details about an amount block
      operationId: RetrieveAmountBlock
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/amountblockid'
      responses:
        '200':
          $ref: '#/components/responses/AmountBlock'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/AmountBlock/{amountblockid}/Update':
    put:
      tags:
        - BQ - AmountBlock
      summary: Update details of an amount block
      description: Update details of an amount block
      operationId: UpdateAmountBlock
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/amountblockid'
      requestBody:
        $ref: '#/components/requestBodies/AmountBlock'
      responses:
        '200':
          $ref: '#/components/responses/AmountBlock'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/IssuedDevice/Initiate':
    post:
      tags:
        - BQ - IssuedDevice
      summary: Initiate Provision of Issued Device
      description: Initiate Provision of Issued Device
      operationId: InitiateIssuedDevice
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
      requestBody:
        $ref: '#/components/requestBodies/IssuedDevice'
      responses:
        '200':
          $ref: '#/components/responses/IssuedDevice'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/IssuedDevice/{issueddeviceid}/Retrieve':
    get:
      tags:
        - BQ - IssuedDevice
      summary: Retrieve Details about Issued Device
      description: Retrieve Details about Issued Device
      operationId: RetrieveIssuedDevice
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/issueddeviceid'
      responses:
        '200':
          $ref: '#/components/responses/IssuedDevice'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/IssuedDevice/{issueddeviceid}/Update':
    put:
      tags:
        - BQ - IssuedDevice
      summary: Update Details of Issued Device Allocated to This Account
      description: Update Details of Issued Device Allocated to This Account
      operationId: UpdateIssuedDevice
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/issueddeviceid'
      requestBody:
        $ref: '#/components/requestBodies/IssuedDevice'
      responses:
        '200':
          $ref: '#/components/responses/IssuedDevice'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/VirtualAccount/{virtualaccountid}/BookingAuthorization/{bookingauthorizationid}/Execute':
    put:
      tags:
        - BQ - BookingAuthorization
      summary: Execute Authorization of Booking
      description: Execute Authorization of Booking
      operationId: ExecuteBookingAuthorization
      parameters:
        - $ref: '#/components/parameters/virtualaccountid'
        - $ref: '#/components/parameters/bookingauthorizationid'
      requestBody:
        $ref: '#/components/requestBodies/BookingAuthorization'
      responses:
        '200':
          $ref: '#/components/responses/BookingAuthorization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    AccountStatement:
      type: object
      description: ''
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ' CurrencyCode|CurrencyCode (https://www.iso20022.org/standardsrepository/type/CurrencyCode)|Standard|ISO20022 BM ()'
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          type: string
          description: "Decimal point position starts calulating from the right\n"
          format: string
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: "The amount of funds entered on the account\n\nhas a plus or minus sign"
    currencytypevalues:
      enum:
        - BaseCurrency
        - ReportingCurrency
        - SecondaryCurrency
        - TransferCurrency
      type: string
      description: ">\r\n* `BaseCurrency` - Base currency of the account. (ISO20022)\n\r\n* `ReportingCurrency` - Currency used to calculate and report the balance and related entries of an account. (ISO20022)\n\r\n* `SecondaryCurrency` - \r\n* `TransferCurrency` - Currency of the amount to be transferred which may be different from the currency of the debtor's account. (ISO20022)\r\n"
    accountcurrency:
      type: object
      properties:
        AccountCurrencyType:
          $ref: '#/components/schemas/currencytypevalues'
        AccountCurrency:
          $ref: '#/components/schemas/currencycode'
      description: The currency in which the AccountEntryAmount is expressed
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: ''
    datetime:
      type: object
      properties:
        DateTimeContent:
          type: string
          description: ''
          format: string
        TimeZoneCode:
          type: string
          description: ''
          format: string
        DaylightSavingIndicator:
          type: string
          description: ''
          format: string
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: Period of time during which the status is valid.
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: Party who plays a  specific role in the context of assigning a status.
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ' Status |Status  (https://www.iso20022.org/standardsrepository/type/Status)|Standard|ISO20022 BM ()'
    entrydatetypevalues:
      enum:
        - EntryDate
        - ValueDate
      type: string
      description: ">\r\n* `EntryDate` - \r\n* `ValueDate` - \r\n"
    entrytypevalues:
      type: object
      properties:
        Entrytypevalues:
          type: string
          description: ''
          format: enumeration
      description: ''
    accountentry:
      type: object
      properties:
        AccountEntryAmount:
          $ref: '#/components/schemas/amount'
        AccountEntryCurrency:
          $ref: '#/components/schemas/accountcurrency'
        AccountEntryPurpose:
          $ref: '#/components/schemas/text'
        AccountEntryDate:
          $ref: '#/components/schemas/datetime'
        AccountEntryStatus:
          $ref: '#/components/schemas/status'
        AccountEntryDateType:
          $ref: '#/components/schemas/entrydatetypevalues'
        AccountEntryType:
          $ref: '#/components/schemas/entrytypevalues'
      description: Reference to the entry in Position Keeping of the booking to be authorised
    accountstatustypevalues:
      enum:
        - Enabled
        - Disabled
        - Deleted
        - Proforma
        - Pending
      type: string
      description: ">\r\n* `Enabled` - Account can be used for its intended purpose.\r\n* `Disabled` - Account cannot be used for its intended purpose, either temporarily or permanently.\r\n* `Deleted` - Account cannot be used any longer.\r\n* `Proforma` - Account is temporary and can be partially used for its intended purpose. The account will be fully available for use when the account servicer has received all relevant documents.\r\n* `Pending` - Account change is pending approval.\r\n"
    accountstatus:
      type: object
      properties:
        AccountStatus:
          $ref: '#/components/schemas/status'
        AccountStatusType:
          $ref: '#/components/schemas/accountstatustypevalues'
      description: "A characteristic of account which refers to the LifecycleStatus of account like opened, closed, blocked, etc.\n\nSpecifies the current state of an account. (ISO20022)"
    accountidentificationtypevalues:
      enum:
        - BBAN
        - IBAN
        - UPIC
        - AccountNumber
        - PAN
        - Paym
        - Wallet
      type: string
      description: ">\r\n* `BBAN` - Basic Bank Account Number (BBAN) - identifier used nationally by financial institutions, ie, in individual countries, generally as part of a National Account Numbering Scheme(s), to uniquely identify the account of a customer. (ISO20022)\n\n.\r\n* `IBAN` - International Bank Account Number (IBAN) - identifier used internationally by financial institutions to uniquely identify the account of a customer. Further specifications of the format and content of the IBAN can be found in the standard ISO 13616 \"Banking and related financial services - International Bank Account Number (IBAN)\" version 1997-10-01, or later revisions. (ISO20022)\n\nAn identifier used internationally by financial institutions to uniquely identify the account of a customer at a financial institution, as described in the latest edition of the international standard ISO 13616. \"Banking and related financial services - International Bank Account Number (IBAN)\". (OBExternalAccountIdentification4Code)\r\n* `UPIC` - Universal Payment Identification Code (UPIC) - identifier used by the New York Clearing House to mask confidential data, such as bank accounts and bank routing numbers. UPIC numbers remain with business customers, regardless of banking relationship changes. (ISO20022)\r\n* `AccountNumber` - String of characters (mainly numbers) used to identify an account.(ISO20022)\n\nSort Code and Account Number - identifier scheme used in the UK by financial institutions to identify the account of a customer. The identifier is the concatenation of the 6 digit UK sort code and 8 digit account number. (OBExternalAccountIdentification4Code)\nThe regular expression for this identifier is: ^[0-9]{6}[0-9]{8}$\r\n* `PAN` - Primary Account Number - identifier scheme used to identify a card account. (OBExternalAccountIdentification4Code)\r\n* `Paym` - Paym Scheme to make payments via mobile (OBExternalAccountIdentification4Code)\r\n* `Wallet` - A primary and unique account identifier used to identify a wallet.\nAn ASPSP must document on their developer portal, the payment methods that supports this account identifier.(OBExternalAccountIdentification4Code)\r\n"
    accountidentification:
      type: object
      properties:
        AccountIdentificationType:
          $ref: '#/components/schemas/accountidentificationtypevalues'
        AccountIdentification:
          $ref: '#/components/schemas/identifier'
      description: The identifier of account like Account Number.
    accountdatetypevalues:
      enum:
        - OpeningDate
        - ClosingDate
        - BlockingDate
        - MaturityDate
        - LiveDate
      type: string
      description: ">\r\n* `OpeningDate` - Date on which the account and related basic services are effectively operational for the account owner. (ISO20022)\r\n* `ClosingDate` - Date on which the account and related services cease effectively to be operational for the account owner. (ISO20022)\r\n* `BlockingDate` - \r\n* `MaturityDate` - Maturity date for the account.\r\n* `LiveDate` - \r\n"
    accountdate:
      type: object
      properties:
        AccountDateType:
          $ref: '#/components/schemas/accountdatetypevalues'
        AccountDate:
          $ref: '#/components/schemas/datetime'
      description: 'A characteristic of account which refers to LifecycleDate of account (e.g., ClosingDate, OpeningDate, LiveDate, etc.) '
    accounttypevalues:
      enum:
        - DebitAccount
        - CreditAccount
        - VostroAcount
        - NostroAccount
        - PaymentAccount
        - SettlementAccount
        - SavingAccount
        - CurrentAccount
        - CashAccount
        - LoanAccount
      type: string
      description: ' OBExternalAccountSubType1Code| ()|Standard|UK Open Banking ()'
    accounttype:
      type: object
      properties:
        AccountType:
          $ref: '#/components/schemas/accounttypevalues'
        AccountTypeName:
          $ref: '#/components/schemas/name'
      description: 'Specifies the category of account like payment account, loan account, cash account, securities account, etc. '
    balancetypevalues:
      enum:
        - Openingbalance
        - Closingbalance
        - Currentbalance
        - Availablebalance
        - Ledgerbalance
        - Reservebalance
        - Freebalance
        - Principalbalance
      type: string
      description: ">\r\n* `Openingbalance` - Book balance of the account at the beginning of the account servicer's business day. It always equals the closing book balance from the previous business day. Note: the available balance at the beginning of the account servicer's business day may be different from the closing book balance from the previous business day. (ISO20022)\r\n* `Closingbalance` - Balance of the account at the end of the account servicer's business day. It is the sum of the opening balance at the beginning of the day and all entries booked to the account during the account servicer's business day. (ISO20022)\r\n* `Currentbalance` - Balance of the account at a precise moment in time. (ISO20022)\r\n* `Availablebalance` - Balance of money or securities that is at the disposal of the account owner on the date specified. (ISO20022)\r\n* `Ledgerbalance` - Ledger balance refers to posted transactions (e.g. limit authorisation amount - posted transactions). (ISO20022)\r\n* `Reservebalance` - \r\n* `Freebalance` - \r\n* `Principalbalance` - \r\n"
    debitcreditindicatortvalues:
      enum:
        - Debit
        - Credit
      type: string
      description: ">\r\n* `Debit` - Transaction is a debt entry\r\n* `Credit` - Transaction is a credit entry\r\n"
    accountbalance:
      type: object
      properties:
        BalanceAmount:
          $ref: '#/components/schemas/amount'
        BalanceType:
          $ref: '#/components/schemas/balancetypevalues'
        BalanceDate:
          $ref: '#/components/schemas/datetime'
        BalanceIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
      description: "The state of the obligations managed on the account, the result of all entries on the account.\n\nNumerical representation of the net increases and decreases in an account at a specific point in time. (ISO20022)\n\nBanking: Amount available in an account for withdrawal or use.\nRead more: http://www.businessdictionary.com/definition/balance.html\n\nBookkeeping: Difference between the debit and credit sides of an account.\nRead more: http://www.businessdictionary.com/definition/balance.html"
    account:
      type: object
      properties:
        AccountStatus:
          $ref: '#/components/schemas/accountstatus'
        AccountIdentification:
          $ref: '#/components/schemas/accountidentification'
        AccountDate:
          $ref: '#/components/schemas/accountdate'
        AccountType:
          $ref: '#/components/schemas/accounttype'
        AccountPurpose:
          $ref: '#/components/schemas/text'
        AccountBalance:
          $ref: '#/components/schemas/accountbalance'
        AccountCurrency:
          $ref: '#/components/schemas/accountcurrency'
        AccountDescription:
          $ref: '#/components/schemas/text'
        AccountName:
          $ref: '#/components/schemas/name'
      description: Reference to the account on which the amount is booked
    BookingAuthorization:
      type: object
      properties:
        PositionKeepingReference:
          $ref: '#/components/schemas/accountentry'
        AccountReference:
          $ref: '#/components/schemas/account'
        BookingDate:
          $ref: '#/components/schemas/datetime'
        AuthorizationResult:
          $ref: '#/components/schemas/text'
        ValueDate:
          $ref: '#/components/schemas/datetime'
        TransactionPriorityNumber:
          type: string
          description: Priority number of the payment transaction for use in determining the available balance
          format: number
        AuthorizationRejectionReason:
          $ref: '#/components/schemas/text'
        BookingAmount:
          $ref: '#/components/schemas/amount'
      description: ''
    condition:
      type: object
      properties:
        Condition:
          type: string
          description: "Condition is a premise upon which the fulfillment of an agreement depends \n\nGeneral and special arrangements, provisions, requirements, rules, specifications, and standards that form an integral part of an agreement or contract.\n\nRead more: http://www.businessdictionary.com/definition/terms-and-conditions.html\n\n"
          format: class
      description: The required status/situation prior to the implementation of the feature
    schedule:
      type: object
      properties:
        ScheduleType:
          type: string
          description: ''
          format: string
      description: " ||\r\n|"
    businessservicetypevalues:
      type: object
      properties:
        Businessservicetypevalues:
          type: string
          description: ''
          format: enumeration
      description: ''
    businessservice:
      type: object
      properties:
        BusinessServiceType:
          $ref: '#/components/schemas/businessservicetypevalues'
      description: The Virtual Account Configuration Fulfillment specific Business Service
    virtualaccountagreement:
      type: object
      properties:
        VirtualAccountAgreement:
          type: string
          description: An agreement between bank and customer to open Virtual Account
          format: class
      description: " ||\r\n|"
    virtualaccountarrangement:
      type: object
      properties:
        VirtualAccountArrangementType:
          type: string
          description: ''
          format: ''
      description: Reference to Virtual Account Configuration Fulfillment
    VirtualAccountConfiguration:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        VirtualAccountFacilityReference:
          $ref: '#/components/schemas/virtualaccountagreement'
        VirtualAccountConfigurationFulfillmentReference:
          $ref: '#/components/schemas/virtualaccountarrangement'
        VirtualAccountConfigurationFulfillmentType:
          $ref: '#/components/schemas/text'
      description: ''
    VirtualAccountMaintenance:
      type: object
      properties:
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        Postconditions:
          $ref: '#/components/schemas/condition'
        VirtualAccountFacilityReference:
          $ref: '#/components/schemas/virtualaccountagreement'
        VirtualAccountMaintenanceFulfillmentReference:
          $ref: '#/components/schemas/virtualaccountarrangement'
        VirtualAccountMaintenanceFulfillmentType:
          $ref: '#/components/schemas/text'
      description: ''
    AmountBlock:
      type: object
      properties:
        VirtualAccountIdentifier:
          $ref: '#/components/schemas/identifier'
        VirtualAccountExternalAccountNumber:
          $ref: '#/components/schemas/identifier'
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        AmountBlockIdentifier:
          $ref: '#/components/schemas/identifier'
        AmountBlockType:
          $ref: '#/components/schemas/text'
        AmountBlockPriorityNumber:
          type: string
          description: The number that indicates the priority of the amount block whne used fo authorisattion of transactions
          format: number
        AmountBlockReason:
          $ref: '#/components/schemas/text'
        AmountBlockOriginatorReference:
          $ref: '#/components/schemas/involvedparty'
        AmountBlockAmount:
          $ref: '#/components/schemas/amount'
        AmountBlockStartDate:
          $ref: '#/components/schemas/datetime'
        AmountBlockExpiryDate:
          $ref: '#/components/schemas/datetime'
        AmountBlockEndDate:
          $ref: '#/components/schemas/datetime'
        AmountBlockStatus:
          $ref: '#/components/schemas/status'
      description: ''
    workproducttypevalues:
      enum:
        - Document
        - WorkingPaper
        - ActivityLog
        - Form
        - File
        - MeetingSchedule
        - MeetingMinute
      type: string
      description: ">\r\n* `Document` - \r\n* `WorkingPaper` - \r\n* `ActivityLog` - \r\n* `Form` - \r\n* `File` - File of consolidated notes, evaluations and recommendations for the work task\r\n* `MeetingSchedule` - \r\n* `MeetingMinute` - \r\n"
    workproduct:
      type: object
      properties:
        WorkProductType:
          $ref: '#/components/schemas/workproducttypevalues'
        WorkProductIdentifoication:
          type: string
          description: ''
          format: string
      description: 'Documentation, meeting schedules, notes, reasearch. calculations and any other work products produced by the [BS] business service'
    Statement:
      type: object
      properties:
        StatementPreconditions:
          $ref: '#/components/schemas/condition'
        StatementFeatureSchedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        StatementPostconditions:
          $ref: '#/components/schemas/condition'
        StatementServiceType:
          $ref: '#/components/schemas/text'
        StatementServiceDescription:
          $ref: '#/components/schemas/text'
        StatementServiceInputsandOuputs:
          $ref: '#/components/schemas/text'
        StatementServiceWorkProduct:
          $ref: '#/components/schemas/workproduct'
        StatementServiceName:
          $ref: '#/components/schemas/name'
      description: ''
    DirectDebit:
      type: object
      properties:
        DirectDebitPreconditions:
          $ref: '#/components/schemas/condition'
        DirectDebitFeatureSchedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        DirectDebitPostconditions:
          $ref: '#/components/schemas/condition'
        DirectDebitServiceType:
          $ref: '#/components/schemas/text'
        DirectDebitServiceDescription:
          $ref: '#/components/schemas/text'
        DirectDebitServiceInputsandOuputs:
          $ref: '#/components/schemas/text'
        DirectDebitServiceWorkProduct:
          $ref: '#/components/schemas/workproduct'
        DirectDebitServiceName:
          $ref: '#/components/schemas/name'
      description: ''
    StandingOrder:
      type: object
      properties:
        StandingOrderPreconditions:
          $ref: '#/components/schemas/condition'
        StandingOrderFeatureSchedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        StandingOrderPostconditions:
          $ref: '#/components/schemas/condition'
        StandingOrderServiceType:
          $ref: '#/components/schemas/text'
        StandingOrderServiceDescription:
          $ref: '#/components/schemas/text'
        StandingOrderServiceInputsandOuputs:
          $ref: '#/components/schemas/text'
        StandingOrderServiceWorkProduct:
          $ref: '#/components/schemas/workproduct'
        StandingOrderServiceName:
          $ref: '#/components/schemas/name'
      description: ''
    modalitytypevalues:
      enum:
        - AllocationModality
        - CalculationModality
        - DerivationModality
        - PaymentModality
        - ProcessingModality
        - ApplicationModality
        - DeliveryModality
      type: string
      description: ">\r\n* `AllocationModality` - \r\n* `CalculationModality` - \r\n* `DerivationModality` - \r\n* `PaymentModality` - \r\n* `ProcessingModality` - \r\n* `ApplicationModality` - \r\n* `DeliveryModality` - \r\n"
    servicemodality:
      type: object
      properties:
        ServiceModalityType:
          $ref: '#/components/schemas/modalitytypevalues'
      description: Description of the fee calculation method for this fee type
    rate:
      type: object
      properties:
        RateValue:
          $ref: '#/components/schemas/value'
        RateUnit:
          $ref: '#/components/schemas/text'
        RatePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        RateCapitalUnit:
          $ref: '#/components/schemas/text'
      description: 'Rate of fee (percentage) to be applied '
    feetypevalues:
      enum:
        - Accountingfee
        - Adrfee
        - Advisoryfee
        - Airwaybillfee
        - Backendload
        - Brokeragefee
        - Clearanceandhandlingatdestination
        - Clearanceandhandlingatorigin
        - Collectfreight
        - Commission
        - Contingencydeferredsalescharge
        - Correspondentbankcharge
        - Custodyfee
        - Dangerousgoodsfee
        - Dilutionlevy
        - Discount
        - Equalisation
        - Frontendload
        - Initial
        - Insurancepremium
        - Issuancecancellationfee
        - Issuancefee
        - Managementfee
        - Matchingfees
        - Miscellaneousfee
        - Other
        - Packaging
        - Partacquis
        - Penalty
        - Pickup
        - Postagecharge
        - Premium
        - Publicationfee
        - Regulatoryfee
        - Securitycharge
        - Serviceprovisionfee
        - Shippingcharge
        - Signatureservice
        - Specialconcessions
        - Speciallyagreedfrontendload
        - Storageatdestination
        - Storageatorigin
        - Switch
        - Transferfee
        - Transportcharges
        - Ucitscommission
      type: string
      description: ">\r\n* `Accountingfee` - Fee paid for accounting services rendered.\r\n* `Adrfee` - Charge linked to an ADR (American Depositary Receipt).\r\n* `Advisoryfee` - Fee paid for advisory services rendered.\r\n* `Airwaybillfee` - Charge is an airway bill fee.\r\n* `Backendload` - Sales charge paid by the investor when redeeming an investment such as an investment fund.\r\n* `Brokeragefee` - Fee paid to a broker for services provided.\r\n* `Clearanceandhandlingatdestination` - Charge is for clearance and handling of goods at destination.\r\n* `Clearanceandhandlingatorigin` - Charge is for clearance and handling of goods at origin.\r\n* `Collectfreight` - Charge is for the collection of the freight.\r\n* `Commission` - Fee paid for services provided.\r\n* `Contingencydeferredsalescharge` - Deferred sales charge.\r\n* `Correspondentbankcharge` - In investment funds, the charge of the correspondent bank for transferring money.\r\n* `Custodyfee` - Fee paid to a custodian in respect of custodial services.\r\n* `Dangerousgoodsfee` - Charge is for dangerous goods.\r\n* `Dilutionlevy` - In investment funds, a charge payable by the investor covering bid-offer spreads and dealing charges for the underlying investments. The dilution levy is paid to the fund for the benefit of other unit holders.\r\n* `Discount` - Charge that has been reduced from the standard initial charge levied by a fund, eg, during a launch period or as negotiated by a funds supermarket / discount broker.\r\n* `Equalisation` - The part of an investor's subscription amount that is held by the fund in order to pay incentive or performance fees at the end of the fiscal year.\r\n* `Frontendload` - Sales charge paid immediately by the investor when subscribing to an investment such as an investment fund.\r\n* `Initial` - Charge paid at the time of the first subscription.\r\n* `Insurancepremium` - Charge is a premium for insurance.\r\n* `Issuancecancellationfee` - Fee linked to the cancellation of an issuance.\r\n* `Issuancefee` - Charge linked to the issuance of security.\r\n* `Managementfee` - Fee paid to an investment manager for services. The fee usually includes fund administration costs and investor relationship management. Typically, the amount paid is a percentage of the assets under management.\r\n* `Matchingfees` - Fee charged for matching and/or confirmation.\r\n* `Miscellaneousfee` - Miscellaneous fee.\r\n* `Other` - Another type of charge.\r\n* `Packaging` - Charge is for packaging of goods.\r\n* `Partacquis` - Portion of charge that the fund is entitled to receive, that cannot be reduced by an intermediary.\r\n* `Penalty` - Fee charged to the investor for early redemption of the fund.\r\n* `Pickup` - Charge is for pick-up of goods.\r\n* `Postagecharge` - Charge paid for the postage.\r\n* `Premium` - In investment funds, pre-arranged addition to the trade amount based on the published net asset value.\r\n* `Publicationfee` - Fee paid in respect of publications made.\r\n* `Regulatoryfee` - Fee charged by a regulatory authority, eg, Securities and Exchange fees.\r\n* `Securitycharge` - Charge is for security.\r\n* `Serviceprovisionfee` - Fee paid for the provision of financial services.\r\n* `Shippingcharge` - Charge for shipping, including the insurance of securities.\r\n* `Signatureservice` - Charge is for signature services.\r\n* `Specialconcessions` - Charges, drawdown, or other reduction from or in addition to the deal price.\r\n* `Speciallyagreedfrontendload` - Specially agreed front-end load.\r\n* `Storageatdestination` - Charge is for storage of goods at destination.\r\n* `Storageatorigin` - Charge is for storage of goods at origin.\r\n* `Switch` - In investment funds, charge related to a switch transaction.\r\n* `Transferfee` - In investment funds, a fee charged for the transfer of ownership of an investment fund.\r\n* `Transportcharges` - Charge is for transport.\r\n* `Ucitscommission` - Charges paid by the investor to the Fund Company for subscription and redemption orders.\r\n"
    chargebearertypevalues:
      enum:
        - Bornebydebtor
        - Bornebycreditor
        - Shared
        - Followingservicelevel
      type: string
      description: ">\r\n* `Bornebydebtor` - All transaction charges are to be borne by the debtor.\r\n* `Bornebycreditor` - All transaction charges are to be borne by the creditor.\r\n* `Shared` - In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor. In a direct debit context, means that transaction charges on the sender side are to be borne by the creditor, transaction charges on the receiver side are to be borne by the debtor.\r\n* `Followingservicelevel` - Charges are to be applied following the rules agreed in the service level and/or scheme.\r\n"
    feeapplicationfrequencyvalues:
      enum:
        - Onclosing
        - Onopening
        - Chargingperiod
        - Daily
        - Peritem
        - Monthly
        - Onanniversary
        - Other
        - Perhundredpounds
        - Perhour
        - Peroccurrence
        - Persheet
        - Pertransaction
        - Pertransactionamount
        - Pertransactionpercentage
        - Quarterly
        - Sixmonthly
        - Statementmonthly
        - Weekly
        - Yearly
      type: string
      description: ">\r\n* `Onclosing` - This fee is triggered on closing of a product\r\n* `Onopening` - This fee is triggered on opening of a product\r\n* `Chargingperiod` - This fee is triggered at the end of each charging period\r\n* `Daily` - This fee is triggered every day\r\n* `Peritem` - This fee is triggered by the processing of an item on the product\r\n* `Monthly` - This fee is triggered monthly\r\n* `Onanniversary` - This fee is triggered on the anniversary of opening the product\r\n* `Other` - Other Fee Frequency\r\n* `Perhundredpounds` - This fee is triggered for every hundred pounds withdrawn\r\n* `Perhour` - This fee is triggered every hour\r\n* `Peroccurrence` - This fee is triggered per occurrence of the transaction or service. This differs from PerItem, in that if a batch of items is processed at the same time, a PerOccurrence fee would incur a single charge, whereas a PerItem fee would be charged for each item within the batch.\r\n* `Persheet` - This fee is levied on every statement sheet\r\n* `Pertransaction` - The fee is charged for each transaction\r\n* `Pertransactionamount` - The amount stated is levied for each transaction processed\r\n* `Pertransactionpercentage` - The fee amount is the given percentage of the transaction processed and is levied for each transaction\r\n* `Quarterly` - This fee is triggered at the end of every quarter\r\n* `Sixmonthly` - This fee is triggered at the end of every 6 month period\r\n* `Statementmonthly` - This fee is triggered based on a monthly statement period\r\n* `Weekly` - The fee is triggered weekly\r\n* `Yearly` - This fee is triggered yearly\r\n"
    feecalculationmethodtypevalues:
      enum:
        - Flat
        - Perunit
        - Percentage
        - Rateperbrackets
        - Ratewithminimumamount
        - Ratewithmaximumamount
        - Other
        - Grossamount
        - Netamount
        - Netassetvalueprice
      type: string
      description: ">\r\n* `Flat` - Charge/tax basis is a lump sum.\r\n* `Perunit` - Charges/tax basis is per unit of financial instrument.\r\n* `Percentage` - Charge/tax basis is a percentage.\r\n* `Rateperbrackets` - Charge/tax basis is a percentage which depends on the tax brackets.\r\n* `Ratewithminimumamount` - Rate with a minimum amount.\r\n* `Ratewithmaximumamount` - Rate with a maximum amount.\r\n* `Other` - Another type of taxation basis.\r\n* `Grossamount` - Charge/Commission/tax basis is based on the gross amount.\r\n* `Netamount` - Charge/commission/tax basis is based on the net amount.\r\n* `Netassetvalueprice` - Charge/tax basis is the price.\r\n"
    feecalculationfrequencyvalues:
      enum:
        - Onclosing
        - Onopening
        - Chargingperiod
        - Daily
        - Peritem
        - Monthly
        - Onanniversary
        - Other
        - Perhundredpounds
        - Perhour
        - Peroccurrence
        - Persheet
        - Pertransaction
        - Pertransactionamount
        - Pertransactionpercentage
        - Quarterly
        - Sixmonthly
        - Statementmonthly
        - Weekly
        - Yearly
      type: string
      description: ">\r\n* `Onclosing` - This fee is triggered on closing of a product\r\n* `Onopening` - This fee is triggered on opening of a product\r\n* `Chargingperiod` - This fee is triggered at the end of each charging period\r\n* `Daily` - This fee is triggered every day\r\n* `Peritem` - This fee is triggered by the processing of an item on the product\r\n* `Monthly` - This fee is triggered monthly\r\n* `Onanniversary` - This fee is triggered on the anniversary of opening the product\r\n* `Other` - Other Fee Frequency\r\n* `Perhundredpounds` - This fee is triggered for every hundred pounds withdrawn\r\n* `Perhour` - This fee is triggered every hour\r\n* `Peroccurrence` - This fee is triggered per occurrence of the transaction or service. This differs from PerItem, in that if a batch of items is processed at the same time, a PerOccurrence fee would incur a single charge, whereas a PerItem fee would be charged for each item within the batch.\r\n* `Persheet` - This fee is levied on every statement sheet\r\n* `Pertransaction` - The fee is charged for each transaction\r\n* `Pertransactionamount` - The amount stated is levied for each transaction processed\r\n* `Pertransactionpercentage` - The fee amount is the given percentage of the transaction processed and is levied for each transaction\r\n* `Quarterly` - This fee is triggered at the end of every quarter\r\n* `Sixmonthly` - This fee is triggered at the end of every 6 month period\r\n* `Statementmonthly` - This fee is triggered based on a monthly statement period\r\n* `Weekly` - The fee is triggered weekly\r\n* `Yearly` - This fee is triggered yearly\r\n"
    feepaymentmethodtypevalues:
      enum:
        - Cash
        - Unit
      type: string
      description: ">\r\n* `Cash` - Payment is with cash.\r\n* `Unit` - Units are redeemed to cover payment.\r\n"
    ServiceFees:
      type: object
      properties:
        FeeCreditAccount:
          $ref: '#/components/schemas/account'
        FeeCalculationMethod:
          $ref: '#/components/schemas/servicemodality'
        FeeRate:
          $ref: '#/components/schemas/rate'
        FeeType:
          $ref: '#/components/schemas/feetypevalues'
        ChargeBearerType:
          $ref: '#/components/schemas/chargebearertypevalues'
        ChargeBearerReference:
          $ref: '#/components/schemas/involvedparty'
        FeeApplicationFrequency:
          $ref: '#/components/schemas/feeapplicationfrequencyvalues'
        FeeAmount:
          $ref: '#/components/schemas/amount'
        AccrualFeeAmount:
          $ref: '#/components/schemas/amount'
        FeeDebitAccount:
          $ref: '#/components/schemas/account'
        FeePaymentMethod:
          $ref: '#/components/schemas/servicemodality'
        AccruedCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        FeeCalculationMethodType:
          $ref: '#/components/schemas/feecalculationmethodtypevalues'
        FeeCalculationFrequency:
          $ref: '#/components/schemas/feecalculationfrequencyvalues'
        FeePaymentMethodType:
          $ref: '#/components/schemas/feepaymentmethodtypevalues'
        FeeApplicationAmount:
          $ref: '#/components/schemas/amount'
        FeeApplicationDate:
          $ref: '#/components/schemas/datetime'
        FeeApplicationCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
      description: ''
    CreditTransfer:
      type: object
      properties:
        CreditTransferPreconditions:
          $ref: '#/components/schemas/condition'
        CreditTransferFeatureSchedule:
          $ref: '#/components/schemas/schedule'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        CreditTransferPostconditions:
          $ref: '#/components/schemas/condition'
        CreditTransferServiceType:
          $ref: '#/components/schemas/text'
        CreditTransferServiceDescription:
          $ref: '#/components/schemas/text'
        CreditTransferServiceInputsandOuputs:
          $ref: '#/components/schemas/text'
        CreditTransferServiceWorkProduct:
          $ref: '#/components/schemas/workproduct'
        CreditTransferServiceName:
          $ref: '#/components/schemas/name'
      description: ''
    frequencytypevalues:
      enum:
        - Annual
        - Monthly
        - Quarterly
        - Semiannual
        - Weekly
        - Daily
        - Adhoc
        - Intraday
        - Overnight
        - Tendays
        - Fortnightly
        - Triggeredbymovement
        - Never
        - Rate
        - Oncreditevent
        - Upfront
        - Onexpiry
        - Hourly
      type: string
      description: ">\r\n* `Annual` - Event takes place every year or once a year.\r\n* `Monthly` - Event takes place every month or once a month.\r\n* `Quarterly` - Event takes place every three months or four times a year.\r\n* `Semiannual` - Event takes place every six months or two times a year.\r\n* `Weekly` - Event takes place once a week.\r\n* `Daily` - Event takes place every day.\r\n* `Adhoc` - Event takes place on request or as necessary.\r\n* `Intraday` - Event takes place several times a day.\r\n* `Overnight` - Event takes place overnight.\r\n* `Tendays` - Event takes place every ten business days.\r\n* `Fortnightly` - Event takes place every two weeks.\r\n* `Triggeredbymovement` - Event takes place at the end of the day if there was a movement on the account, otherwise nothing is sent that day.\r\n* `Never` - Event does never take place.\r\n* `Rate` - Event takes place based on a change of a rate.\r\n* `Oncreditevent` - Event occurs due to a credit event occurring for an issuer.\r\n* `Upfront` - Event that takes place at the initiation of a trade or agreement.\r\n* `Onexpiry` - Event occurs on expiry of a financial contract.\r\n* `Hourly` - Event takes place every hours.\r\n"
    frequency:
      type: object
      properties:
        FrequencyCode:
          $ref: '#/components/schemas/frequencytypevalues'
        FrequencyName:
          $ref: '#/components/schemas/name'
        FrequencyDefinition:
          $ref: '#/components/schemas/text'
      description: Specifies the periodicity of the calculation of the interest.
    interestratetypevalues:
      enum:
        - Fixed
        - Forfeit
        - Variable
        - Scheduled
        - Unscheduled
        - Discount
        - Fixedrateunderlyingexposureforlife
        - Fixedrateunderlyingexposurewithcompulsoryfutureswitchtofloating
        - Fixedwithfutureperiodicresets
        - Floatinglinkedtoindex
        - Floatingrateunderlyingexposureforlife
        - Floatingrateunderlyingexposurewithcap
        - Floatingrateunderlyingexposurewithfloor
        - Floatingrateunderlyingexposurewithfloorandcap
        - Modular
        - Obligorswapped
        - Other
        - Swicthoptionality
      type: string
      description: ">\r\n* `Fixed` - Rate is fixed.\r\n* `Forfeit` - No specific repurchase rate applies to the transaction Repo, only a forfeit.\r\n* `Variable` - Rate is variable.\r\n* `Scheduled` - Rate of the scheduled payment.\r\n* `Unscheduled` - Rate of the unscheduled payment.\r\n* `Discount` - Interest rate type is Discount.\r\n* `Fixedrateunderlyingexposureforlife` - Interest rate type is Fixed rate underlying exposure (for life).\r\n* `Fixedrateunderlyingexposurewithcompulsoryfutureswitchtofloating` - Interest rate type is Fixed rate underlying exposure with compulsory future switch to floating.\r\n* `Fixedwithfutureperiodicresets` - Interest rate type is Fixed with future periodic resets.\r\n* `Floatinglinkedtoindex` - Interest rate type is Floating rate underlying exposure linked to one index that will revert to another index in the future.\r\n* `Floatingrateunderlyingexposureforlife` - Interest rate type is Floating rate underlying exposure (for life).\r\n* `Floatingrateunderlyingexposurewithcap` - Interest rate type is Floating rate underlying exposure with cap.\r\n* `Floatingrateunderlyingexposurewithfloor` - Interest rate type is Floating rate underlying exposure with floor.\r\n* `Floatingrateunderlyingexposurewithfloorandcap` - Interest rate type is Floating rate underlying exposure with both floor and cap.\r\n* `Modular` - Interest rate type is Modular.\r\n* `Obligorswapped` - Interest rate type is Obligor Swapped.\r\n* `Other` - Any other type of interest rate that can be applied.\r\n* `Swicthoptionality` - Interest rate type is Switch Optionality.\r\n"
    interestcalculationmethodtypevalues:
      enum:
        - Simple
        - Compounding
      type: string
      description: ">\r\n* `Simple` - Calculation method by which interest is calculated on the original principal only. Accumulated interest from prior periods is not used in calculations for the following periods. (ISO20022)\n\r\n* `Compounding` - Calculation method by which interest is calculated each period on the original principal and all interest accumulated during past periods. (ISO20022)\r\n"
    interesttypevalues:
      enum:
        - Fixed
        - Floatingratenote
        - Dualbasis
        - Index
        - Discounted
        - Zerocoupon
        - Exinterest
        - Cuminterest
      type: string
      description: ">\r\n* `Fixed` - Indicates that the type of interest is fixed.\r\n* `Floatingratenote` - Indicates that the type of interest is a floating rate note.\r\n* `Dualbasis` - Indicates that the type of interest is a dual basis.\r\n* `Index` - Indicates that the type of interest is index.\r\n* `Discounted` - Indicates that the type of interest is discounted.\r\n* `Zerocoupon` - Indicates that the type of interest is a zero coupon.\r\n* `Exinterest` - Indicates deal price excluding accrued interest.\r\n* `Cuminterest` - Indicates deal price including accrued interest.\r\n"
    taxtypevalues:
      enum:
        - Valueaddedtaxofzerorate
        - Provincial
        - Nationaltax
        - Statetax
        - Withholdingtax
        - Capitalgaintax
        - Interimprofittax
        - Stampduty
        - Wealthtax
        - Inheritancetax
        - Solidaritysurcharge
        - Taxcredit
        - Equalisation
        - Gifttax
        - Consumptiontax
        - Alternativeminimumtax
        - Localtax
        - Nationalfederaltax
        - Paymentlevytax
        - Stockexchangetax
        - Transactiontax
        - Transfertax
        - Valueaddedtax
        - Localbrokercommission
        - Executingbrokercommission
        - Eutaxretention
        - Aktiengewinn1
        - Aktiengewinn2
        - Zwischengewinn
        - Customstax
        - Other
        - Mietgewinn
        - Germanlocaltax3
        - Germanlocaltax4
        - Germanlocaltax2
        - Withholdingofforeigntax
        - Withholdingoflocaltax
        - Capitallosscredit
      type: string
      description: ">\r\n* `Valueaddedtaxofzerorate` - Tax for which a zero rate applies.\r\n* `Provincial` - Tax is a provincial tax.\r\n* `Nationaltax` - Tax is a national tax.\r\n* `Statetax` - Tax is a state tax.\r\n* `Withholdingtax` - Tax is on income deducted at source, which the paying agent is legally obliged to deduct from its payments of interest on deposits and other proceeds of a financial instrument.\r\n* `Capitalgaintax` - Tax is on a capital gain (realised and unrealised), that is, the profit that is gained from the sale of a financial instrument.\r\n* `Interimprofittax` - Tax is on the sum of all earnings/revenues accrued since the last dividend distribution.\r\n* `Stampduty` - Tax is on certain documents and transactions.\r\n* `Wealthtax` - Tax is a special tax imposed, applicable only when the value of assets or categories of assets owned by an entity are above a given ceiling defined by the tax authority. Wealth tax is not linked to income.\r\n* `Inheritancetax` - Tax that is payable at the time of death on any items (money or otherwise), where ownership changes either upon death or within a legally specified number of years before death.\r\n* `Solidaritysurcharge` - Tax that is levied by legal authorities for solidarity purposes.\r\n* `Taxcredit` - Direct reduction of an individual's tax liability.\r\n* `Equalisation` - The part of an investor's subscription amount that is held by the fund in order to pay incentive / performance fees at the end of the fiscal year.\r\n* `Gifttax` - Tax that is levied on assets given to individuals prior to the death of the donor. Gift tax is designed to ensure the integrity of the inheritance tax, preventing the pre-death transfer of wealth.\r\n* `Consumptiontax` - Tax that is levied on goods and services purchased by customers, and is added to the retail price.\r\n* `Alternativeminimumtax` - Tax is an alternative minimum tax.\r\n* `Localtax` - Tax that is charged by a local settlement system or local jurisdiction.\r\n* `Nationalfederaltax` - Tax is a country, national, or federal tax that is usually charged by the custodian.\r\n* `Paymentlevytax` - Tax levied on a payment.\r\n* `Stockexchangetax` - Tax collected by a stock exchange.\r\n* `Transactiontax` - Tax levied on a transaction.\r\n* `Transfertax` - Tax levied on a transfer.\r\n* `Valueaddedtax` - Tax is a value added tax.\r\n* `Localbrokercommission` - Local broker's commission amount.\r\n* `Executingbrokercommission` - Executing broker's commission amount.\r\n* `Eutaxretention` - Tax withheld at source in the framework of the European Directive on taxation of savings in the form of interest payments.\r\n* `Aktiengewinn1` - Share-related profit. This is a tax specific to the German market. The share-related-profit gives the fund the opportunity to pass on to the institutional investor redeeming fund units certain tax-free income from equity. The calculation method is based on the old Investment Tax Act (Investmentsteuergesetz).\r\n* `Aktiengewinn2` - Share-related profit. This is a tax specific to the German market. The share-related-profit gives the fund the opportunity to pass on to the institutional investor redeeming fund units certain tax-free income from equity. The calculation method is based on the new Investment Tax Act (Investmentsteuergesetz).\r\n* `Zwischengewinn` - Zwischengewinn.\r\n* `Customstax` - Tax is customs and excise.\r\n* `Other` - Another type of tax.\r\n* `Mietgewinn` - Earnings from renting.\r\n* `Germanlocaltax3` - Local tax (Zinstopf) offset interest per unit against tax exempt amount (variation to offset interest per unit in relation to tax exempt amount).\r\n* `Germanlocaltax4` - Local tax (Ertrag Besitzanteilig) yield liable for interest down payment tax.\r\n* `Germanlocaltax2` - Local tax (ZAS pflichtige Zinsen) - interest liable for interest down payment tax (proportion of gross interest per unit/interim profits that is not covered by the credit in the interest pool).\r\n* `Withholdingofforeigntax` - Rate at which the income will be withheld by the jurisdiction in which the income was originally paid, for which relief at source and/or reclaim may be possible.\r\n* `Withholdingoflocaltax` - Rate at which the income will be withheld by the jurisdiction in which the account owner is located, for which relief at source and/or reclaim may be possible.\r\n* `Capitallosscredit` - Tax recovery is due to capital loss.\r\n"
    ratetypevalues:
      enum:
        - Fixed
        - Forfeit
        - Variable
        - Open
        - Unknown
        - Nilpayment
        - Additionaltax
        - Charges
        - Cashinlieuofsecurities
        - Gross
        - Cashincentive
        - Net
        - Sollication
        - Stampduty
        - Stockexchangetax
        - Withholdingtax
        - Transfertax
        - Transactiontax
        - Taxdeferred
        - Taxfeeamount
        - Withholdingofforeigntax
        - Withholdingoflocaltax
        - Imputed
        - Precompte
        - Onetiertax
        - Localtax
        - Scheduled
        - Unscheduled
        - Anyandall
      type: string
      description: ">\r\n* `Fixed` - Rate is fixed.\r\n* `Forfeit` - No specific repurchase rate applies to the transaction Repo, only a forfeit.\r\n* `Variable` - Rate is variable.\r\n* `Open` - Rate has not been established.\r\n* `Unknown` - Rate is unknown by the sender or has not been established.\r\n* `Nilpayment` - Rate will not be paid.\r\n* `Additionaltax` - Rate used for additional tax that cannot be categorised.\r\n* `Charges` - Rate used to calculate the amount of the charges/fees that cannot be categorised.\r\n* `Cashinlieuofsecurities` - Rate used to calculate the cash disbursement in lieu of a fractional quantity of, for example, equity.\r\n* `Gross` - Cash dividend per equity before deductions or allowances have been made.\r\n* `Cashincentive` - Rate of the cash premium made available if the securities holder consents or participates to an event, for example, consent fees.\r\n* `Net` - Relates to the netting of settlement instructions.\r\n* `Sollication` - Cash rate made available in an offer in order to encourage participation in the offer.\r\n* `Stampduty` - Financial instrument has not been stamped and/or duly signed.\r\n* `Stockexchangetax` - Rate of stock exchange tax.\r\n* `Withholdingtax` - Relates to a tax refund from the authorities on the associated corporate action event.\r\n* `Transfertax` - Transaction has been generated due to transformation following a corporate action.\r\n* `Transactiontax` - Rate used to calculate the amount of transaction tax.\r\n* `Taxdeferred` - Rate relating to the underlying security for which tax is deferred.\r\n* `Taxfeeamount` - Rate relating to the underlying security which is not taxable.\r\n* `Withholdingofforeigntax` - Rate at which the income will be withheld by the jurisdiction in which the income was originally paid, for which relief at source and/or reclaim may be possible.\r\n* `Withholdingoflocaltax` - Rate at which the income will be withheld by the jurisdiction in which the account owner is located, for which relief at source and/or reclaim may be possible.\r\n* `Imputed` - Imputed tax.\r\n* `Precompte` - Rate is a precompte.\r\n* `Onetiertax` - Rate is a one tier tax.\r\n* `Localtax` - Interest liable for interest down payment tax (proportion of gross interest per unit/interim profits that is not covered by the credit in the interest pool).\r\n* `Scheduled` - Rate of the scheduled payment.\r\n* `Unscheduled` - Rate of the unscheduled payment.\r\n* `Anyandall` - Any and all rate is sought.\r\n"
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: ' Location|Location (https://www.iso20022.org/standardsrepository/type/Location)|Standard|ISO20022 BM  ()'
    taxarrangement:
      type: object
      properties:
        TaxType:
          $ref: '#/components/schemas/taxtypevalues'
        TaxAmount:
          $ref: '#/components/schemas/amount'
        TaxRate:
          $ref: '#/components/schemas/rate'
        TaxRateType:
          $ref: '#/components/schemas/ratetypevalues'
        PlaceOfTaxation:
          $ref: '#/components/schemas/location'
        TaxableParty:
          $ref: '#/components/schemas/involvedparty'
        TaxAccount:
          $ref: '#/components/schemas/account'
        TaxationCondition:
          $ref: '#/components/schemas/condition'
        TaxCurrency:
          $ref: '#/components/schemas/currencycode'
        TaxDueDate:
          $ref: '#/components/schemas/datetime'
        TaxCalculationDate:
          $ref: '#/components/schemas/datetime'
        TaxPayer:
          $ref: '#/components/schemas/involvedparty'
        TaxRecipient:
          $ref: '#/components/schemas/involvedparty'
      description: Specifies the tax on interest
    feeplantypevalues:
      enum:
        - StandardFeePlan
        - FinalFeePlan
      type: string
      description: ">\r\n* `StandardFeePlan` - \r\n* `FinalFeePlan` - \r\n"
    goal:
      type: object
      properties:
        GoalType:
          type: string
          description: The type of goal
          format: string
        GoalDefinition:
          type: string
          description: 'A definition of the goal, including the intended actions required to achieve the goal'
          format: string
        GoalOrganisation:
          type: string
          description: Identifies the interested parties and their roles and responsibilities for the specific actions supporting the achievement of the goal
          format: ''
        GoalResult:
          type: string
          description: 'Assessment of how the work is progressing towards achieving the goal, including projections of likely outcomes'
          format: string
      description: ''
    budgettypevalues:
      enum:
        - OperatingBudget
        - FinancialBudget
        - ResourceBudget
      type: string
      description: ">\r\n* `OperatingBudget` - \r\n* `FinancialBudget` - \r\n* `ResourceBudget` - \r\n"
    budgettype:
      type: object
      properties:
        BudgetTypeName:
          $ref: '#/components/schemas/name'
        BudgetType:
          $ref: '#/components/schemas/budgettypevalues'
      description: A Classification value that specifies the type of Budget
    budgetarrangement:
      type: object
      properties:
        BudgetType:
          $ref: '#/components/schemas/budgettype'
        BudgetAmount:
          $ref: '#/components/schemas/amount'
      description: 'An arrangement which is specifying an estimate of costs, revenues, and resources over a specified period, reflecting a reading of future financial conditions and goals. (adapted from Business Dictionary)'
    plannedaction:
      type: object
      properties:
        PlannedAction:
          type: string
          description: 'An action that is arranged in a plan for doing or achieving something '
          format: class
      description: 'An action that is arranged in a plan for doing or achieving something '
    plantypevalues:
      enum:
        - AdministrativePlan
        - ManagementPlan
        - StratgyPlan
        - FinancialPlan
      type: string
      description: ">\r\n* `AdministrativePlan` - \r\n* `ManagementPlan` - \r\n* `StratgyPlan` - \r\n* `FinancialPlan` - \r\n"
    plantype:
      type: object
      properties:
        PlanTypeName:
          $ref: '#/components/schemas/name'
        PlanType:
          $ref: '#/components/schemas/plantypevalues'
      description: A Classification value that specifies the type of Plan
    plan:
      type: object
      properties:
        PlanGoal:
          $ref: '#/components/schemas/goal'
        PlanBudget:
          $ref: '#/components/schemas/budgetarrangement'
        PlannedAction:
          $ref: '#/components/schemas/plannedaction'
        PlanType:
          $ref: '#/components/schemas/plantype'
        PlanOrganisation:
          type: string
          description: ''
          format: string
        PlanValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PlanDescription:
          $ref: '#/components/schemas/text'
      description: ''
    feeplan:
      type: object
      properties:
        FeePlanName:
          $ref: '#/components/schemas/name'
        FeePlanType:
          $ref: '#/components/schemas/feeplantypevalues'
        FeePlan:
          $ref: '#/components/schemas/plan'
      description: "An arranged FeeRatePlan\n"
    adjustmentdirectiontypevalues:
      enum:
        - Added
        - Substracted
      type: string
      description: ">\r\n* `Added` - Adjustment amount must be added to the total amount.\r\n* `Substracted` - Adjustment amount must be substracted from the total amount.\r\n"
    feearrangement:
      type: object
      properties:
        FeeType:
          $ref: '#/components/schemas/feetypevalues'
        FeeAmount:
          $ref: '#/components/schemas/amount'
        FeeRate:
          $ref: '#/components/schemas/rate'
        FeeEffectivePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        FeeDueDate:
          $ref: '#/components/schemas/datetime'
        FeePlan:
          $ref: '#/components/schemas/feeplan'
        FeeCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        FeeReason:
          $ref: '#/components/schemas/text'
        FeeDirection:
          $ref: '#/components/schemas/adjustmentdirectiontypevalues'
        FeeBearerType:
          $ref: '#/components/schemas/chargebearertypevalues'
      description: Specifies the charges on interest.
    interesttransactiontypevalues:
      enum:
        - InterestAllocationTransaction
        - InterestPaymentTransaction
        - InterestAdjustmentTransaction
      type: string
      description: ">\r\n* `InterestAllocationTransaction` - \r\n* `InterestPaymentTransaction` - \r\n* `InterestAdjustmentTransaction` - \r\n"
    interesttransaction:
      type: object
      properties:
        InterestTransactionAmount:
          $ref: '#/components/schemas/amount'
        InterestTransactionDescription:
          $ref: '#/components/schemas/text'
        InterestTransactionType:
          $ref: '#/components/schemas/interesttransactiontypevalues'
        AppliedInterestRate:
          $ref: '#/components/schemas/rate'
        AppliedInteretType:
          $ref: '#/components/schemas/interesttypevalues'
        InterestCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
      description: A record of applied interest
    Interest:
      type: object
      properties:
        InterestPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        InterestCalculationFrequency:
          $ref: '#/components/schemas/frequency'
        InterestAmount:
          $ref: '#/components/schemas/amount'
        InterestRate:
          $ref: '#/components/schemas/rate'
        InterestCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        InterestAccrualAmount:
          $ref: '#/components/schemas/amount'
        InterestRateType:
          $ref: '#/components/schemas/interestratetypevalues'
        InterestRateApplicationSchedule:
          $ref: '#/components/schemas/schedule'
        InterestCalculationMethod:
          $ref: '#/components/schemas/interestcalculationmethodtypevalues'
        InterestType:
          $ref: '#/components/schemas/interesttypevalues'
        InterestPaymentFrequency:
          $ref: '#/components/schemas/frequency'
        InterestTax:
          $ref: '#/components/schemas/taxarrangement'
        InterestAccrualType:
          $ref: '#/components/schemas/interesttypevalues'
        InterestDate:
          $ref: '#/components/schemas/datetime'
        InterestCalculationDate:
          $ref: '#/components/schemas/datetime'
        InterestAccrualDate:
          $ref: '#/components/schemas/datetime'
        InterestFee:
          $ref: '#/components/schemas/feearrangement'
        InterestTransaction:
          $ref: '#/components/schemas/interesttransaction'
      description: ''
    virtualaccount:
      type: object
      properties:
        VirtualAccount:
          type: string
          description: "A Virtual Account is a bank account that is defined on an underlying real account .\n\nComment: \n- Virtual accounts are temporary accounts that are used to transact on behalf of a real physical account. \n"
          format: class
      description: " ||\r\n|"
    VirtualAccountOutcome:
      type: object
      properties:
        VirtualAccountFinancialFacility:
          $ref: '#/components/schemas/virtualaccount'
        VirtualAccountWorkProduct:
          $ref: '#/components/schemas/workproduct'
      description: ''
    feature:
      type: object
      properties:
        FeatureType:
          $ref: '#/components/schemas/text'
        FeatureIdentification:
          $ref: '#/components/schemas/identifier'
        FeatureName:
          $ref: '#/components/schemas/name'
        FeatureLifecycleStatus:
          $ref: '#/components/schemas/status'
        FeatureDescription:
          $ref: '#/components/schemas/text'
      description: " ||\r\n|"
    devicetypevalues:
      enum:
        - Securecardreader
        - Nonsecurecardreader
        - Mobile
        - Tablet
        - Personalcomputer
        - Othernational
        - Otherprivate
        - Wearable
        - Vehicle
        - Embedded
        - Keyfob
        - Jewellery
        - Sticker
        - Gamingdevice
        - Watch
        - Unknown
        - BiometricDevice
      type: string
      description: ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` - Tablet\r\n* `Personalcomputer` - Personal computer\r\n* `Othernational` - Other device defined at national level\r\n* `Otherprivate` - Other device defined in a private way.\r\n* `Wearable` - Wearable device.\r\n* `Vehicle` - Vehicle.\r\n* `Embedded` - Embedded in a device.\r\n* `Keyfob` - Key Fob\r\n* `Jewellery` - Jewellery\r\n* `Sticker` - Sticker\r\n* `Gamingdevice` - Gaming Device\r\n* `Watch` - Watch\r\n* `Unknown` - Device type unknown\r\n* `BiometricDevice` - A biometric device is a security identification and authentication device. Such devices use automated methods of verifying or recognising the identity of a living person based on a physiological or behavioral characteristic.\nhttps://en.wikipedia.org/wiki/Biometric_device\n\r\n"
    country:
      type: object
      properties:
        NationalRegulatoryAuthority:
          $ref: '#/components/schemas/involvedparty'
      description: Country of the location.
    deviceoperatingsystemtypevalues:
      enum:
        - Android
        - Ios
        - Windows
        - Blackberry
        - Tizen
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system.\r\n* `Othernational` - Other nationally defined code.\r\n* `Otherprivate` - Other privately defined code.\r\n"
    deviceidentificationtypevalues:
      enum:
        - IMEI
        - Serialnumber
        - Secureelementidentification
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned code.\r\n* `Otherprivate` - Other privately assigned code.\r\n"
    device:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/identifier'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceProperty:
          $ref: '#/components/schemas/text'
        DeviceElement:
          $ref: '#/components/schemas/text'
        DeviceStatus:
          $ref: '#/components/schemas/status'
        DeviceVersion:
          type: string
          description: ''
          format: number
        DeviceDateTime:
          $ref: '#/components/schemas/datetime'
        DeviceDescription:
          $ref: '#/components/schemas/text'
        DeviceName:
          $ref: '#/components/schemas/name'
        DeviceLanguage:
          $ref: '#/components/schemas/text'
        DevicePhoneNumber:
          $ref: '#/components/schemas/text'
        DeviceLocation:
          $ref: '#/components/schemas/location'
        DeviceManufacturer:
          $ref: '#/components/schemas/text'
        DeviceCountry:
          $ref: '#/components/schemas/country'
        DeviceAddress:
          $ref: '#/components/schemas/address'
        DeviceAddressType:
          $ref: '#/components/schemas/addresstypevalues'
        DeviceOperatingSystem:
          $ref: '#/components/schemas/deviceoperatingsystemtypevalues'
        DeviceIdentificationType:
          $ref: '#/components/schemas/deviceidentificationtypevalues'
      description: Reference to the device instance in Issued Device Administration
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    arrangementlifecyclestatustypevalues:
      enum:
        - Requested
        - Proposed
        - Offered
        - Accepted
        - Cancelled
        - Fulfilled
        - Terminated
      type: string
      description: ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
    arrangementlifecyclestatus:
      type: object
      properties:
        ArrangementLifecycleStatus:
          $ref: '#/components/schemas/status'
        ArrangementLifecycleStatusType:
          $ref: '#/components/schemas/arrangementlifecyclestatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementlifecyclestatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: The processing option setting
    rulesettypevalues:
      enum:
        - Policy
        - Regulation
        - Law
        - Guideline
        - Criterion
        - Standard
      type: string
      description: " ||\r\n|"
    rulesettype:
      type: object
      properties:
        RuleSetTypeName:
          $ref: '#/components/schemas/name'
        RuleSetType:
          $ref: '#/components/schemas/rulesettypevalues'
      description: ''
    ruleset:
      type: object
      properties:
        RuleSetDefinition:
          $ref: '#/components/schemas/text'
        RuleSetInterpretation:
          $ref: '#/components/schemas/text'
        RuleSetType:
          $ref: '#/components/schemas/rulesettype'
        RuleSetName:
          $ref: '#/components/schemas/name'
        RuleSetIdentification:
          $ref: '#/components/schemas/identifier'
        RuleSetLifecycleStatus:
          $ref: '#/components/schemas/status'
      description: The processing and handling guidelines and rules
    issueddevicestatustypevalues:
      enum:
        - Issued
        - IssuedButNotActivated
        - Activated
        - Suspended
        - Retrieved
      type: string
      description: ">\r\n* `Issued` - \r\n* `IssuedButNotActivated` - \r\n* `Activated` - \r\n* `Suspended` - \r\n* `Retrieved` - \r\n"
    branch:
      type: object
      properties:
        BranchIdentification:
          $ref: '#/components/schemas/identifier'
        BranchLegalEntityIdentification:
          $ref: '#/components/schemas/identifier'
        BranchAddress:
          $ref: '#/components/schemas/address'
        BranchName:
          $ref: '#/components/schemas/name'
      description: The name of the branch where the customer will collect the device
    devicecustomizationtypevalues:
      enum:
        - CardDesign
      type: string
      description: ">\r\n* `CardDesign` - \r\n"
    IssuedDevice:
      type: object
      properties:
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        DevicePropertyType:
          $ref: '#/components/schemas/feature'
        IssuedDeviceAdministrationReference:
          $ref: '#/components/schemas/device'
        DeviceValidfromDate:
          $ref: '#/components/schemas/datetime'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceOptionSetting:
          $ref: '#/components/schemas/arrangement'
        DeviceProcessingGuidelinesandRules:
          $ref: '#/components/schemas/ruleset'
        DevicePartyReference:
          $ref: '#/components/schemas/involvedparty'
        DeviceIssueDate:
          $ref: '#/components/schemas/datetime'
        DeviceStatus:
          $ref: '#/components/schemas/issueddevicestatustypevalues'
        AccountExternalAccountNumber:
          $ref: '#/components/schemas/identifier'
        DevicePropertySeting:
          $ref: '#/components/schemas/arrangement'
        AccountIdentifier:
          $ref: '#/components/schemas/accountidentification'
        DeviceDeliveryMethod:
          $ref: '#/components/schemas/text'
        DeviceCollectLocation:
          $ref: '#/components/schemas/branch'
        DeviceOptionDefinition:
          $ref: '#/components/schemas/feature'
        DeviceValidtoDate:
          $ref: '#/components/schemas/datetime'
        DeviceAssociatedPermissions:
          $ref: '#/components/schemas/arrangement'
        DeviceCustomerCustomizationReference:
          $ref: '#/components/schemas/devicecustomizationtypevalues'
      description: ''
    featuretypevalues:
      enum:
        - Fee
        - Interest
        - Withdrawal
        - Deposit
        - Sweep
        - Lien
        - Payment
        - Repayment
        - Limit
        - Overdraft
        - Statement
        - CurrencyExchange
      type: string
      description: " ||\r\n|"
    virtualaccountarrangementtypevalues:
      enum:
        - InterestArrangement
        - StandingOrderArrangement
        - CreditTransferArrangement
        - DirectDebitArrangement
        - AccountStatementArrangement
        - AccountMaintenanceArrangement
        - AccountConfigurationArrangement
        - FeeArrangement
      type: string
      description: " ||\r\n|"
    regulation:
      type: object
      properties:
        RegulationDefinition:
          type: string
          description: ''
          format: string
      description: " ||\r\n|"
    jurisdiction:
      type: object
      properties:
        Jurisdiction:
          type: string
          description: Jurisdiction that will be assigned in case of legal dispute.
          format: class
      description: ' Jurisdiction|Jurisdiction (https://www.iso20022.org/standardsrepository/type/Jurisdiction)|Standard|ISO20022 BM ()'
    VirtualAccountFacility:
      type: object
      properties:
        VirtualAccountFacilityParameterType:
          $ref: '#/components/schemas/featuretypevalues'
        VirtualAccountFacilitySelectedOption:
          $ref: '#/components/schemas/feature'
        VirtualAccountFacilityType:
          $ref: '#/components/schemas/virtualaccountarrangementtypevalues'
        VirtualAccountFacilityReference:
          $ref: '#/components/schemas/virtualaccountagreement'
        VirtualAccountFacilitySchedule:
          $ref: '#/components/schemas/schedule'
        VirtualAccountFacilityStatus:
          $ref: '#/components/schemas/status'
        VirtualAccountFacilityCurrency:
          $ref: '#/components/schemas/currencycode'
        VirtualAccountFacilityRegulationReference:
          $ref: '#/components/schemas/regulation'
        VirtualAccountFacilityRegulationType:
          $ref: '#/components/schemas/rulesettypevalues'
        VirtualAccountFacilityJurisdiction:
          $ref: '#/components/schemas/jurisdiction'
        VirtualAccountFacilityBookingLocation:
          $ref: '#/components/schemas/location'
        VirtualAccountFacilityAccountType:
          $ref: '#/components/schemas/accounttypevalues'
        VirtualAccountFacilityAccountReference:
          $ref: '#/components/schemas/virtualaccount'
      description: 'Fulfill any scheduled and ad-hoc obligations under a service arrangement, most typically for a financial product or facility within Virtual Account. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    VirtualAccountFacility:
      description: VirtualAccountFacility
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VirtualAccountFacility'
    DirectDebit:
      description: DirectDebit
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DirectDebit'
    StandingOrder:
      description: StandingOrder
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandingOrder'
    ServiceFees:
      description: ServiceFees
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceFees'
    Interest:
      description: Interest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Interest'
    Statement:
      description: Statement
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Statement'
    AmountBlock:
      description: AmountBlock
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AmountBlock'
    IssuedDevice:
      description: IssuedDevice
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IssuedDevice'
    BookingAuthorization:
      description: BookingAuthorization
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookingAuthorization'
  parameters:
    virtualaccountid:
      name: virtualaccountid
      in: path
      required: true
      style: simple
      schema:
        type: string
    directdebitid:
      name: directdebitid
      in: path
      required: true
      style: simple
      schema:
        type: string
    standingorderid:
      name: standingorderid
      in: path
      required: true
      style: simple
      schema:
        type: string
    servicefeesid:
      name: servicefeesid
      in: path
      required: true
      style: simple
      schema:
        type: string
    interestid:
      name: interestid
      in: path
      required: true
      style: simple
      schema:
        type: string
    statementid:
      name: statementid
      in: path
      required: true
      style: simple
      schema:
        type: string
    amountblockid:
      name: amountblockid
      in: path
      required: true
      style: simple
      schema:
        type: string
    issueddeviceid:
      name: issueddeviceid
      in: path
      required: true
      style: simple
      schema:
        type: string
    bookingauthorizationid:
      name: bookingauthorizationid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    VirtualAccountFacility:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VirtualAccountFacility'
      required: true
    DirectDebit:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DirectDebit'
      required: true
    StandingOrder:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandingOrder'
      required: true
    ServiceFees:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceFees'
      required: true
    Interest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Interest'
      required: true
    Statement:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Statement'
      required: true
    AmountBlock:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AmountBlock'
      required: true
    IssuedDevice:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IssuedDevice'
      required: true
    BookingAuthorization:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookingAuthorization'
      required: true