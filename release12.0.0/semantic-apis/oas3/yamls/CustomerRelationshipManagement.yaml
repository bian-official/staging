openapi: 3.0.1
info:
  title: Customer Relationship Management
  description: 'This service domain develops and executes a customer plan to maintain and build a customer relationship. Activities include ongoing customer contact, tracking internal and external events and activity of interest and relevance, product and service matching and sales, processing ad-hoc queries, trouble shooting and issue resolution including the initial phases of troubled account recovery'
  contact:
    name: BIAN
    url: https://bian.org
  version: 12.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CustomerRelationshipManagement/12.0.0
paths:
  /CustomerRelationshipManagement/Create:
    post:
      tags:
        - CR - CustomerRelationshipManagementPlan
      summary: CrCR Create an initial relationship management plan
      description: CrCR Create an initial relationship management plan
      operationId: Create
      requestBody:
        $ref: '#/components/requestBodies/CustomerRelationshipManagementPlan'
      responses:
        '200':
          $ref: '#/components/responses/CustomerRelationshipManagementPlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Update':
    put:
      tags:
        - CR - CustomerRelationshipManagementPlan
      summary: UpCR Update details of an active relationship plan
      description: UpCR Update details of an active relationship plan
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerRelationshipManagementPlan'
      responses:
        '200':
          $ref: '#/components/responses/CustomerRelationshipManagementPlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Control':
    put:
      tags:
        - CR - CustomerRelationshipManagementPlan
      summary: CoCR Control the processing of a relationship plan (e.g. suspend)
      description: CoCR Control the processing of a relationship plan (e.g. suspend)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerRelationshipManagementPlan'
      responses:
        '200':
          $ref: '#/components/responses/CustomerRelationshipManagementPlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Exchange':
    put:
      tags:
        - CR - CustomerRelationshipManagementPlan
      summary: 'EcCR Accept, verify, reject aspects of the plan'
      description: 'EcCR Accept, verify, reject aspects of the plan'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerRelationshipManagementPlan'
      responses:
        '200':
          $ref: '#/components/responses/CustomerRelationshipManagementPlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Request':
    put:
      tags:
        - CR - CustomerRelationshipManagementPlan
      summary: RqCR Request intervention with a relationship plan (e.g. arrange a customer meeting)
      description: RqCR Request intervention with a relationship plan (e.g. arrange a customer meeting)
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerRelationshipManagementPlan'
      responses:
        '200':
          $ref: '#/components/responses/CustomerRelationshipManagementPlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Grant':
    put:
      tags:
        - CR - CustomerRelationshipManagementPlan
      summary: GrCR Grant authorization for actions that impact the plan (e.g. qualify eligibility for a campaign)
      description: GrCR Grant authorization for actions that impact the plan (e.g. qualify eligibility for a campaign)
      operationId: Grant
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerRelationshipManagementPlan'
      responses:
        '200':
          $ref: '#/components/responses/CustomerRelationshipManagementPlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Retrieve':
    get:
      tags:
        - CR - CustomerRelationshipManagementPlan
      summary: ReCR Retrieve details about a relationship plan
      description: ReCR Retrieve details about a relationship plan
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerRelationshipManagementPlan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Development/Create':
    post:
      tags:
        - BQ - Development
      summary: CrBQ Create customer development capability  (initialize the capability)
      description: CrBQ Create customer development capability  (initialize the capability)
      operationId: CreateDevelopment
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/Development'
      responses:
        '200':
          $ref: '#/components/responses/Development'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Development/{developmentid}/Update':
    put:
      tags:
        - BQ - Development
      summary: UpBQ Update details about a relationship development task
      description: UpBQ Update details about a relationship development task
      operationId: UpdateDevelopment
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
        - $ref: '#/components/parameters/developmentid'
      requestBody:
        $ref: '#/components/requestBodies/Development'
      responses:
        '200':
          $ref: '#/components/responses/Development'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Development/{developmentid}/Exchange':
    put:
      tags:
        - BQ - Development
      summary: 'EcBQ Accept, reject, verify a development activity'
      description: 'EcBQ Accept, reject, verify a development activity'
      operationId: ExchangeDevelopment
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
        - $ref: '#/components/parameters/developmentid'
      requestBody:
        $ref: '#/components/requestBodies/Development'
      responses:
        '200':
          $ref: '#/components/responses/Development'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Development/{developmentid}/Request':
    put:
      tags:
        - BQ - Development
      summary: RqBQ Request a relationship development task
      description: RqBQ Request a relationship development task
      operationId: RequestDevelopment
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
        - $ref: '#/components/parameters/developmentid'
      requestBody:
        $ref: '#/components/requestBodies/Development'
      responses:
        '200':
          $ref: '#/components/responses/Development'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Development/{developmentid}/Retrieve':
    get:
      tags:
        - BQ - Development
      summary: ReBQ Retrieve details about relationship development activity
      description: ReBQ Retrieve details about relationship development activity
      operationId: RetrieveDevelopment
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
        - $ref: '#/components/parameters/developmentid'
      responses:
        '200':
          $ref: '#/components/responses/Development'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Incident/Create':
    post:
      tags:
        - BQ - Incident
      summary: CrBQ Create customer incident reporting capability (initialize the capability)
      description: CrBQ Create customer incident reporting capability (initialize the capability)
      operationId: CreateIncident
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/Incident'
      responses:
        '200':
          $ref: '#/components/responses/Incident'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Incident/{incidentid}/Update':
    put:
      tags:
        - BQ - Incident
      summary: UpBQ Update details about a customer incident
      description: UpBQ Update details about a customer incident
      operationId: UpdateIncident
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
        - $ref: '#/components/parameters/incidentid'
      requestBody:
        $ref: '#/components/requestBodies/Incident'
      responses:
        '200':
          $ref: '#/components/responses/Incident'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Incident/{incidentid}/Control':
    put:
      tags:
        - BQ - Incident
      summary: CoBQ Control the processing of a customer incident (e.g. raise priority)
      description: CoBQ Control the processing of a customer incident (e.g. raise priority)
      operationId: ControlIncident
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
        - $ref: '#/components/parameters/incidentid'
      requestBody:
        $ref: '#/components/requestBodies/Incident'
      responses:
        '200':
          $ref: '#/components/responses/Incident'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Incident/{incidentid}/Exchange':
    put:
      tags:
        - BQ - Incident
      summary: 'EcBQ Accept, reject, confirm details about a customer incident'
      description: 'EcBQ Accept, reject, confirm details about a customer incident'
      operationId: ExchangeIncident
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
        - $ref: '#/components/parameters/incidentid'
      requestBody:
        $ref: '#/components/requestBodies/Incident'
      responses:
        '200':
          $ref: '#/components/responses/Incident'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Incident/{incidentid}/Capture':
    put:
      tags:
        - BQ - Incident
      summary: CaBQ Capture details of a new customer incident
      description: CaBQ Capture details of a new customer incident
      operationId: CaptureIncident
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
        - $ref: '#/components/parameters/incidentid'
      requestBody:
        $ref: '#/components/requestBodies/Incident'
      responses:
        '200':
          $ref: '#/components/responses/Incident'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Incident/{incidentid}/Retrieve':
    get:
      tags:
        - BQ - Incident
      summary: ReBQ Retrieve details about a customer incident
      description: ReBQ Retrieve details about a customer incident
      operationId: RetrieveIncident
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
        - $ref: '#/components/parameters/incidentid'
      responses:
        '200':
          $ref: '#/components/responses/Incident'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Contact/Create':
    post:
      tags:
        - BQ - Contact
      summary: CrBQ Create contact handling capability (initialize and track)
      description: CrBQ Create contact handling capability (initialize and track)
      operationId: CreateContact
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
      requestBody:
        $ref: '#/components/requestBodies/Contact'
      responses:
        '200':
          $ref: '#/components/responses/Contact'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Contact/{contactid}/Update':
    put:
      tags:
        - BQ - Contact
      summary: UpCR Update details of a customer contact
      description: UpCR Update details of a customer contact
      operationId: UpdateContact
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
        - $ref: '#/components/parameters/contactid'
      requestBody:
        $ref: '#/components/requestBodies/Contact'
      responses:
        '200':
          $ref: '#/components/responses/Contact'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Contact/{contactid}/Request':
    put:
      tags:
        - BQ - Contact
      summary: RqBQ Request a customer contact
      description: RqBQ Request a customer contact
      operationId: RequestContact
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
        - $ref: '#/components/parameters/contactid'
      requestBody:
        $ref: '#/components/requestBodies/Contact'
      responses:
        '200':
          $ref: '#/components/responses/Contact'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerRelationshipManagement/{customerrelationshipmanagementid}/Contact/{contactid}/Retrieve':
    get:
      tags:
        - BQ - Contact
      summary: ReBQ Retrieve details about customer contacts
      description: ReBQ Retrieve details about customer contacts
      operationId: RetrieveContact
      parameters:
        - $ref: '#/components/parameters/customerrelationshipmanagementid'
        - $ref: '#/components/parameters/contactid'
      responses:
        '200':
          $ref: '#/components/responses/Contact'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "Description of the insight ||\r\n|"
    datetime:
      type: object
      properties:
        DateTimeContent:
          type: string
          description: ''
          format: string
        TimeZoneCode:
          type: string
          description: ''
          format: string
        DaylightSavingIndicator:
          type: string
          description: ''
          format: string
      description: The start and end date times for the contact
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: Period of time during which the status is valid.
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "The assigned individual or business unit for the relationship ||\r\n|"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: 'The tracked status (e.g. under construction or repair, inhabited, vacant).'
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: ''
    schedule:
      type: object
      properties:
        ScheduleType:
          type: string
          description: ''
          format: string
      description: The schedule of past and planned customer contacts
    devicetypevalues:
      enum:
        - Securecardreader
        - Nonsecurecardreader
        - Mobile
        - Tablet
        - Personalcomputer
        - Othernational
        - Otherprivate
        - Wearable
        - Vehicle
        - Embedded
        - Keyfob
        - Jewellery
        - Sticker
        - Gamingdevice
        - Watch
        - Unknown
        - BiometricDevice
      type: string
      description: ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` - Tablet\r\n* `Personalcomputer` - Personal computer\r\n* `Othernational` - Other device defined at national level\r\n* `Otherprivate` - Other device defined in a private way.\r\n* `Wearable` - Wearable device.\r\n* `Vehicle` - Vehicle.\r\n* `Embedded` - Embedded in a device.\r\n* `Keyfob` - Key Fob\r\n* `Jewellery` - Jewellery\r\n* `Sticker` - Sticker\r\n* `Gamingdevice` - Gaming Device\r\n* `Watch` - Watch\r\n* `Unknown` - Device type unknown\r\n* `BiometricDevice` - A biometric device is a security identification and authentication device. Such devices use automated methods of verifying or recognising the identity of a living person based on a physiological or behavioral characteristic.\nhttps://en.wikipedia.org/wiki/Biometric_device\n\r\n"
    country:
      type: object
      properties:
        NationalRegulatoryAuthority:
          $ref: '#/components/schemas/involvedparty'
      description: Country of the location.
    deviceoperatingsystemtypevalues:
      enum:
        - Android
        - Ios
        - Windows
        - Blackberry
        - Tizen
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system.\r\n* `Othernational` - Other nationally defined code.\r\n* `Otherprivate` - Other privately defined code.\r\n"
    deviceidentificationtypevalues:
      enum:
        - IMEI
        - Serialnumber
        - Secureelementidentification
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned code.\r\n* `Otherprivate` - Other privately assigned code.\r\n"
    device:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/identifier'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceProperty:
          $ref: '#/components/schemas/text'
        DeviceElement:
          $ref: '#/components/schemas/text'
        DeviceStatus:
          $ref: '#/components/schemas/status'
        DeviceVersion:
          type: string
          description: ''
          format: number
        DeviceDateTime:
          $ref: '#/components/schemas/datetime'
        DeviceDescription:
          $ref: '#/components/schemas/text'
        DeviceName:
          $ref: '#/components/schemas/name'
        DeviceLanguage:
          $ref: '#/components/schemas/text'
        DevicePhoneNumber:
          $ref: '#/components/schemas/text'
        DeviceLocation:
          $ref: '#/components/schemas/location'
        DeviceManufacturer:
          $ref: '#/components/schemas/text'
        DeviceCountry:
          $ref: '#/components/schemas/country'
        DeviceAddress:
          $ref: '#/components/schemas/address'
        DeviceAddressType:
          $ref: '#/components/schemas/addresstypevalues'
        DeviceOperatingSystem:
          $ref: '#/components/schemas/deviceoperatingsystemtypevalues'
        DeviceIdentificationType:
          $ref: '#/components/schemas/deviceidentificationtypevalues'
      description: ''
    customercontact:
      type: object
      properties:
        ContactType:
          $ref: '#/components/schemas/text'
        ContactDateTime:
          $ref: '#/components/schemas/datetime'
        ContactLocation:
          $ref: '#/components/schemas/location'
        ContactSchedule:
          $ref: '#/components/schemas/schedule'
        ContactResult:
          $ref: '#/components/schemas/text'
        ContactPurpose:
          $ref: '#/components/schemas/text'
        ContactDevice:
          $ref: '#/components/schemas/device'
        ContactIndicator:
          $ref: '#/components/schemas/text'
        ContactContent:
          $ref: '#/components/schemas/text'
      description: 'Records the timing, purpose, details and impact of customer contacts'
    date:
      type: object
      properties:
        DateContent:
          type: string
          description: ''
          format: string
      description: The date time and location of the contact
    Contact:
      type: object
      properties:
        CustomerRelationshipContactHistory:
          $ref: '#/components/schemas/customercontact'
        CustomerRelationshipContactSchedule:
          $ref: '#/components/schemas/schedule'
        CustomerRelationshipContactRecord:
          $ref: '#/components/schemas/customercontact'
        CustomerRelationshipContactDate:
          $ref: '#/components/schemas/date'
        EmployeeReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerRelationshipContactType:
          $ref: '#/components/schemas/text'
        CustomerRelationshipContactResult:
          $ref: '#/components/schemas/text'
      description: "A collection of one or more responsibilities or tasks under management\n\nExamples: Relationship development, Troubleshooting"
    customerrelationshipdevelopment:
      type: object
      properties:
        CustomerRelationshipDevelopmentTaskType:
          $ref: '#/components/schemas/text'
        CustomerRelationshipDevelopmentTaskDescription:
          $ref: '#/components/schemas/text'
        CustomerRelationshipDevelopmentTaskResult:
          $ref: '#/components/schemas/text'
      description: A specific task undertaken to develop the relationship
    workproducttypevalues:
      enum:
        - Document
        - WorkingPaper
        - ActivityLog
        - Form
        - File
        - MeetingSchedule
        - MeetingMinute
      type: string
      description: ">\r\n* `Document` - \r\n* `WorkingPaper` - \r\n* `ActivityLog` - \r\n* `Form` - \r\n* `File` - File of consolidated notes, evaluations and recommendations for the work task\r\n* `MeetingSchedule` - \r\n* `MeetingMinute` - \r\n"
    workproduct:
      type: object
      properties:
        WorkProductType:
          $ref: '#/components/schemas/workproducttypevalues'
        WorkProductIdentifoication:
          type: string
          description: ''
          format: string
      description: 'Work documentation, forms and schedules produced and referenced during the task'
    task:
      type: object
      properties:
        Task:
          type: string
          description: ''
          format: datatype
      description: The outcomes of customer development activity
    Development:
      type: object
      properties:
        RelationshipDevelopmentTask:
          $ref: '#/components/schemas/customerrelationshipdevelopment'
        CustomerDevelopmentTaskType:
          $ref: '#/components/schemas/text'
        CustomerDevelopmentTaskDescription:
          $ref: '#/components/schemas/text'
        CustomerRelationshipDevelopmentPlan:
          $ref: '#/components/schemas/customerrelationshipdevelopment'
        EmployeeBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerDevelopmentWorkProduct:
          $ref: '#/components/schemas/workproduct'
        CustomerDevelopmentTaskResult:
          $ref: '#/components/schemas/task'
      description: "A collection of one or more responsibilities or tasks under management\n\nExamples: Relationship development, Troubleshooting"
    customerincident:
      type: object
      properties:
        CustomerIncidentType:
          $ref: '#/components/schemas/text'
        CustomerIncidentSource:
          type: string
          description: ''
          format: string
        CustomerIncidentDescription:
          type: string
          description: ''
          format: string
        CustomerIncidentResolution:
          type: string
          description: ''
          format: string
      description: Record of an incident
    transactiondatetypevalues:
      enum:
        - TransactionExecutedDate
        - TransactionFulfillmentDate
        - TransactionInitiatedDate
        - TransactionCancelledDate
        - TransactionApprovedDate
      type: string
      description: ">\r\n* `TransactionExecutedDate` - \r\n* `TransactionFulfillmentDate` - \r\n* `TransactionInitiatedDate` - \r\n* `TransactionCancelledDate` - \r\n* `TransactionApprovedDate` - \r\n"
    transactiondate:
      type: object
      properties:
        TransactionDate:
          $ref: '#/components/schemas/datetime'
        TransactionDateType:
          $ref: '#/components/schemas/transactiondatetypevalues'
      description: "The Date that the transaction has occurred or is planned to occur.\nA characteristic of transaction which refers to the LifecycleDate of transaction (e.g., initiated date, executed date, fulfillment date). "
    transactiontypevalues:
      enum:
        - FinancialTransaction
        - BusinessTransaction
        - BankingTransaction
        - AccountingTransaction
        - BookingTransaction
        - AllocationTransaction
        - DeliveryTransaction
        - ProductionTransaction
      type: string
      description: ">\r\n* `FinancialTransaction` - \r\n* `BusinessTransaction` - \r\n* `BankingTransaction` - \r\n* `AccountingTransaction` - \r\n* `BookingTransaction` - \r\n* `AllocationTransaction` - \r\n* `DeliveryTransaction` - \r\n* `ProductionTransaction` - \r\n"
    transactionstatustypevalues:
      enum:
        - Initiated
        - Executed
        - Cancelled
        - Confirmed
        - Suspended
        - Pending
        - Completed
        - Notified
        - Booked
        - Rejected
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Executed` - \r\n* `Cancelled` - \r\n* `Confirmed` - \r\n* `Suspended` - \r\n* `Pending` - \r\n* `Completed` - \r\n* `Notified` - \r\n* `Booked` - \r\n* `Rejected` - \r\n"
    transactionlifecyclestatus:
      type: object
      properties:
        TransactionLifecycleStatus:
          $ref: '#/components/schemas/status'
        TransactionLifecycleStatusType:
          $ref: '#/components/schemas/transactionstatustypevalues'
      description: 'A characteristic of transaction which refers to the LifecycleStatus of transaction (e.g., initiated, executed, confirmed, cancelled, etc.) '
    transaction:
      type: object
      properties:
        TransactionIdentification:
          $ref: '#/components/schemas/identifier'
        TransactionDate:
          $ref: '#/components/schemas/transactiondate'
        TransactionType:
          $ref: '#/components/schemas/transactiontypevalues'
        TransactionDescription:
          $ref: '#/components/schemas/text'
        TransactionStatus:
          $ref: '#/components/schemas/transactionlifecyclestatus'
        TransactionName:
          $ref: '#/components/schemas/name'
      description: Production activity and transaction records relating to the incident
    customercaseresolution:
      type: object
      properties:
        CustomerCaseResolution:
          type: string
          description: ''
          format: class
      description: Narrative of the resolution actions made or committed
    Incident:
      type: object
      properties:
        RelationshipIncidentRecord:
          $ref: '#/components/schemas/customerincident'
        EmployeeBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
        ProductandServiceActivityReference:
          $ref: '#/components/schemas/transaction'
        CustomerIncidentType:
          $ref: '#/components/schemas/text'
        CustomerIncidentDescription:
          $ref: '#/components/schemas/text'
        CustomerIncidentResolution:
          $ref: '#/components/schemas/customercaseresolution'
      description: "A collection of one or more responsibilities or tasks under management\n\nExamples: Relationship development, Troubleshooting"
    customerratingtypevalues:
      enum:
        - Customerprofitability
        - Customercreditrating
      type: string
      description: "A type of rating referenced and perhaps maintained by the relationship manager  (e.g. credit, financial, collateral) ||\r\n|"
    customerrating:
      type: object
      properties:
        CustomerRatingType:
          $ref: '#/components/schemas/customerratingtypevalues'
        CustomerRatingValue:
          $ref: '#/components/schemas/value'
        CustomerRatingDescription:
          $ref: '#/components/schemas/text'
        CustomerRatingValueDate:
          $ref: '#/components/schemas/datetime'
        CustomerRatingValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: "The rating value (and explanation) ||\r\n|"
    customerrelationshipbudget:
      type: object
      properties:
        CustomerRelationshipBudget:
          type: string
          description: 'The budget which is planned to spend for a specific customer relationship. '
          format: class
      description: "The target and actual budget covering income and allowed expenses/discounts ||\r\n|"
    customerproductcoverage:
      type: object
      properties:
        CustomerProductCoverage:
          type: string
          description: ''
          format: class
      description: "Covers current and near term target product/service coverage as per the judgment of the Relationship Manager ||\r\n|"
    yesnoindicator:
      type: object
      properties:
        Yesnoindicator:
          type: string
          description: "Indicates a \"Yes\" or \"No\" type of answer for an element. (ISO20022)\ntrue: Yes\nfalse: No"
          format: datatype
      description: 'An indicator specifying if the whether the customer has bought  the banking product or not. '
    productusage:
      type: object
      properties:
        ProductUsageDateTime:
          $ref: '#/components/schemas/datetime'
        ProductUsageVolume:
          $ref: '#/components/schemas/text'
        ProductUsageIndicator:
          $ref: '#/components/schemas/yesnoindicator'
      description: "Extracted analysis from production activity used to detect trends and key events (product activity/turnover summaries) ||\r\n|"
    customerproducteligibilityprofileclass:
      type: object
      properties:
        CustomerProductEligibilityProfileClass:
          type: string
          description: A value of Customer Product Profile Type whereby customer product eligibility will be defined.
          format: class
      description: "Obtained from the appropriate Service Domain, this provides an automated/rules based analysis of unsold/eligible products and associated terms that can be refined by the manager ||\r\n|"
    goal:
      type: object
      properties:
        GoalType:
          type: string
          description: The type of goal
          format: string
        GoalDefinition:
          type: string
          description: 'A definition of the goal, including the intended actions required to achieve the goal'
          format: string
        GoalOrganisation:
          type: string
          description: Identifies the interested parties and their roles and responsibilities for the specific actions supporting the achievement of the goal
          format: ''
        GoalResult:
          type: string
          description: 'Assessment of how the work is progressing towards achieving the goal, including projections of likely outcomes'
          format: string
      description: ''
    budgettypevalues:
      enum:
        - OperatingBudget
        - FinancialBudget
        - ResourceBudget
      type: string
      description: ">\r\n* `OperatingBudget` - \r\n* `FinancialBudget` - \r\n* `ResourceBudget` - \r\n"
    budgettype:
      type: object
      properties:
        BudgetTypeName:
          $ref: '#/components/schemas/name'
        BudgetType:
          $ref: '#/components/schemas/budgettypevalues'
      description: A Classification value that specifies the type of Budget
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ''
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          type: string
          description: "Decimal point position starts calulating from the right\n"
          format: string
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: ''
    budgetarrangement:
      type: object
      properties:
        BudgetType:
          $ref: '#/components/schemas/budgettype'
        BudgetAmount:
          $ref: '#/components/schemas/amount'
      description: 'An arrangement which is specifying an estimate of costs, revenues, and resources over a specified period, reflecting a reading of future financial conditions and goals. (adapted from Business Dictionary)'
    plannedaction:
      type: object
      properties:
        PlannedAction:
          type: string
          description: 'An action that is arranged in a plan for doing or achieving something '
          format: class
      description: 'An action that is arranged in a plan for doing or achieving something '
    plantypevalues:
      enum:
        - AdministrativePlan
        - ManagementPlan
        - StratgyPlan
        - FinancialPlan
      type: string
      description: ">\r\n* `AdministrativePlan` - \r\n* `ManagementPlan` - \r\n* `StratgyPlan` - \r\n* `FinancialPlan` - \r\n"
    plantype:
      type: object
      properties:
        PlanTypeName:
          $ref: '#/components/schemas/name'
        PlanType:
          $ref: '#/components/schemas/plantypevalues'
      description: A Classification value that specifies the type of Plan
    plan:
      type: object
      properties:
        PlanGoal:
          $ref: '#/components/schemas/goal'
        PlanBudget:
          $ref: '#/components/schemas/budgetarrangement'
        PlannedAction:
          $ref: '#/components/schemas/plannedaction'
        PlanType:
          $ref: '#/components/schemas/plantype'
        PlanOrganisation:
          type: string
          description: ''
          format: string
        PlanValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PlanDescription:
          $ref: '#/components/schemas/text'
      description: "The sales plan details specific actions taken and planned to address sales opportunities (i.e. target product sales and associated contact schedule) ||\r\n|"
    customerprofitability:
      type: object
      properties:
        CustomerProfitability:
          type: string
          description: "The profitability for a specific customer relationship. \n\nProfitability: The state or condition of yielding a financial profit or gain. (Business Dictionary)"
          format: class
      description: "A maintained perspective of the profitability of the relationship to date and projected ||\r\n|"
    CustomerRelationshipManagementPlan:
      type: object
      properties:
        CustomerReference:
          $ref: '#/components/schemas/involvedparty'
        EmployeeBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerRelationshipRatingType:
          $ref: '#/components/schemas/customerratingtypevalues'
        CustomerRelationshipRating:
          $ref: '#/components/schemas/customerrating'
        CustomerInsightType:
          $ref: '#/components/schemas/text'
        CustomerInsightDescription:
          $ref: '#/components/schemas/text'
        CustomerBudget:
          $ref: '#/components/schemas/customerrelationshipbudget'
        CustomerProductCoverage:
          $ref: '#/components/schemas/customerproductcoverage'
        CustomerProductUsage:
          $ref: '#/components/schemas/productusage'
        CustomerProductEligibilityProfile:
          $ref: '#/components/schemas/customerproducteligibilityprofileclass'
        CustomerSalesPlan:
          $ref: '#/components/schemas/plan'
        CustomerProfitability:
          $ref: '#/components/schemas/customerprofitability'
      description: 'Oversee the working of a business unit, assign work, manage against a plan and troubleshoot issues within Customer Relationship Management.'
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CustomerRelationshipManagementPlan:
      description: CustomerRelationshipManagementPlan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerRelationshipManagementPlan'
    Development:
      description: Development
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Development'
    Incident:
      description: Incident
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Incident'
    Contact:
      description: Contact
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Contact'
  parameters:
    customerrelationshipmanagementid:
      name: customerrelationshipmanagementid
      in: path
      required: true
      style: simple
      schema:
        type: string
    developmentid:
      name: developmentid
      in: path
      required: true
      style: simple
      schema:
        type: string
    incidentid:
      name: incidentid
      in: path
      required: true
      style: simple
      schema:
        type: string
    contactid:
      name: contactid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CustomerRelationshipManagementPlan:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerRelationshipManagementPlan'
      required: true
    Development:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Development'
      required: true
    Incident:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Incident'
      required: true
    Contact:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Contact'
      required: true