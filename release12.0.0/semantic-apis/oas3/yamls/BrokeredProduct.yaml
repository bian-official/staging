openapi: 3.0.1
info:
  title: Brokered Product
  description: This Service Domain oversees all activities associated with the coordinated delivery of 3rd party products and services
  contact:
    name: BIAN
    url: https://bian.org
  version: 12.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/BrokeredProduct/12.0.0
paths:
  '/BrokeredProduct/{brokeredproductid}/Control':
    put:
      tags:
        - CR - BrokeredProductFacility
      summary: Control Brokered Product Facility
      description: Control Brokered Product Facility
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/brokeredproductid'
      requestBody:
        $ref: '#/components/requestBodies/BrokeredProductFacility'
      responses:
        '200':
          $ref: '#/components/responses/BrokeredProductFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /BrokeredProduct/Initiate:
    post:
      tags:
        - CR - BrokeredProductFacility
      summary: Initiate Brokered Product Facility
      description: Initiate Brokered Product Facility
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/BrokeredProductFacility'
      responses:
        '200':
          $ref: '#/components/responses/BrokeredProductFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/BrokeredProduct/{brokeredproductid}/Exchange':
    put:
      tags:
        - CR - BrokeredProductFacility
      summary: Exchange Brokered Product Facility
      description: Exchange Brokered Product Facility
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/brokeredproductid'
      requestBody:
        $ref: '#/components/requestBodies/BrokeredProductFacility'
      responses:
        '200':
          $ref: '#/components/responses/BrokeredProductFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/BrokeredProduct/{brokeredproductid}/Grant':
    put:
      tags:
        - CR - BrokeredProductFacility
      summary: Grant Brokered Product Facility
      description: Grant Brokered Product Facility
      operationId: Grant
      parameters:
        - $ref: '#/components/parameters/brokeredproductid'
      requestBody:
        $ref: '#/components/requestBodies/BrokeredProductFacility'
      responses:
        '200':
          $ref: '#/components/responses/BrokeredProductFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/BrokeredProduct/{brokeredproductid}/Notify':
    get:
      tags:
        - CR - BrokeredProductFacility
      summary: Notify Brokered Product Facility
      description: Notify Brokered Product Facility
      operationId: Notify
      parameters:
        - $ref: '#/components/parameters/brokeredproductid'
      responses:
        '200':
          $ref: '#/components/responses/BrokeredProductFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/BrokeredProduct/{brokeredproductid}/Request':
    put:
      tags:
        - CR - BrokeredProductFacility
      summary: Request Brokered Product Facility
      description: Request Brokered Product Facility
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/brokeredproductid'
      requestBody:
        $ref: '#/components/requestBodies/BrokeredProductFacility'
      responses:
        '200':
          $ref: '#/components/responses/BrokeredProductFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/BrokeredProduct/{brokeredproductid}/Retrieve':
    get:
      tags:
        - CR - BrokeredProductFacility
      summary: Retrieve Brokered Product Facility
      description: Retrieve Brokered Product Facility
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/brokeredproductid'
      responses:
        '200':
          $ref: '#/components/responses/BrokeredProductFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/BrokeredProduct/{brokeredproductid}/Update':
    put:
      tags:
        - CR - BrokeredProductFacility
      summary: Update Brokered Product Facility
      description: Update Brokered Product Facility
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/brokeredproductid'
      requestBody:
        $ref: '#/components/requestBodies/BrokeredProductFacility'
      responses:
        '200':
          $ref: '#/components/responses/BrokeredProductFacility'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/BrokeredProduct/{brokeredproductid}/ServiceAccess/{serviceaccessid}/Execute':
    put:
      tags:
        - BQ - ServiceAccess
      summary: Execute Service Access
      description: Execute Service Access
      operationId: ExecuteServiceAccess
      parameters:
        - $ref: '#/components/parameters/brokeredproductid'
        - $ref: '#/components/parameters/serviceaccessid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceAccess'
      responses:
        '200':
          $ref: '#/components/responses/ServiceAccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/BrokeredProduct/{brokeredproductid}/ServiceAccess/{serviceaccessid}/Capture':
    put:
      tags:
        - BQ - ServiceAccess
      summary: Capture Service Access
      description: Capture Service Access
      operationId: CaptureServiceAccess
      parameters:
        - $ref: '#/components/parameters/brokeredproductid'
        - $ref: '#/components/parameters/serviceaccessid'
      requestBody:
        $ref: '#/components/requestBodies/ServiceAccess'
      responses:
        '200':
          $ref: '#/components/responses/ServiceAccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          type: string
          description: ''
          format: string
        TimeZoneCode:
          type: string
          description: ''
          format: string
        DaylightSavingIndicator:
          type: string
          description: ''
          format: string
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: ''
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: " ||\r\n|"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: "An unique reference to an item or an occurrence of <CR>\n GenericIdentification|GenericIdentification (https://www.iso20022.org/standardsrepository/type/GenericIdentification)|Standard|ISO20022 BM ()"
    ServiceAccess:
      type: object
      properties:
        ServiceAccessIdentifier:
          $ref: '#/components/schemas/identifier'
        ServiceAccessType:
          $ref: '#/components/schemas/text'
      description: ''
    consentstatustypevalues:
      enum:
        - Authorised
        - AwaitingAuthorization
        - Rejected
        - Revoked
      type: string
      description: ">\r\n* `Authorised` - \r\n* `AwaitingAuthorization` - \r\n* `Rejected` - \r\n* `Revoked` - \r\n"
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
      type: string
      description: ">\r\n* `CurrentAccountAgreement` - \r\n* `SavingsAccountAgreement` - \r\n* `BrokeredProductAgreement` - \r\n* `ConsumerLoanAgreement` - \r\n* `MortgageLoanAgreement` - \r\n* `DirectDebitServiceAgreement` - \r\n"
    productidentificationtypevalues:
      enum:
        - ISINCode
        - PackageCode
        - Buyersitemnumber
        - Commercialdescriptioncodename
        - EAN
        - Harmonizedtariffcodename
        - Manufacturersitemnumber
        - Modelnumber
        - Partnumber
        - Quotacategory
        - Stylenumber
        - Suppliersitemnumber
        - Universalproductcode
      type: string
      description: ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercial conditions.\r\n* `EAN` - The unique EAN (European Article Number) code.\r\n* `Harmonizedtariffcodename` - Classification of goods as developed by the Customs Cooperation council.\r\n* `Manufacturersitemnumber` - Product identifier as assigned by the manufacturer.\r\n* `Modelnumber` - Reference number assigned by the manufacturer to differentiate variations in similar products in a class or group.\r\n* `Partnumber` - Reference assigned by the manufacturer to a product part.\r\n* `Quotacategory` - Product identifier used by the retail industry.\r\n* `Stylenumber` - Identification of the style of a product.\r\n* `Suppliersitemnumber` - Number assigned to an article by the supplier of that article.\r\n* `Universalproductcode` - Number assigned to a manufacturer's product by the Product Code Council.\r\n"
    productidentification:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/identifier'
        ProductIdentificationType:
          $ref: '#/components/schemas/productidentificationtypevalues'
      description: The identifier of product e.g. ISIN Code.
    bankingproducttypevalues:
      enum:
        - LoanProduct
        - CurrentAccountProduct
        - SavingAccountProduct
        - BrokeredProduct
        - TermDepositProduct
      type: string
      description: ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    productlifecyclestatustypevalues:
      enum:
        - Initiated
        - Announced
        - Sold
        - Obsolete
        - Active
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
    productlifecyclestatus:
      type: object
      properties:
        ProductLifecycleStatus:
          $ref: '#/components/schemas/status'
        ProductLifecycleStatusType:
          $ref: '#/components/schemas/productlifecyclestatustypevalues'
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    bankingproduct:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productlifecyclestatus'
        ProductPriority:
          $ref: '#/components/schemas/text'
        ProductDescription:
          $ref: '#/components/schemas/text'
        ProductVersion:
          $ref: '#/components/schemas/text'
        ProductName:
          $ref: '#/components/schemas/name'
      description: ''
    date:
      type: object
      properties:
        DateContent:
          type: string
          description: ''
          format: string
      description: Date on which the agreement was signed by all parties. (ISO20022)
    agreementtypevalues:
      enum:
        - CustomerAgreement
        - SupplierAgreement
        - BrokerAgreement
        - SalesAgreement
        - PurchaseAgreement
        - MaintenanceAgreement
        - ProductAgreement
        - ProductSalesAgreement
        - ResourceAgreement
      type: string
      description: ">\r\n* `CustomerAgreement` - \r\n* `SupplierAgreement` - \r\n* `BrokerAgreement` - \r\n* `SalesAgreement` - \r\n* `PurchaseAgreement` - \r\n* `MaintenanceAgreement` - \r\n* `ProductAgreement` - \r\n* `ProductSalesAgreement` - \r\n* `ResourceAgreement` - \r\n"
    agreementlifecyclestatustypevalues:
      enum:
        - Offered
        - Confirmed
        - Completed
        - Signed
        - Terminated
        - Rejected
      type: string
      description: ">\r\n* `Offered` - \r\n* `Confirmed` - \r\n* `Completed` - \r\n* `Signed` - \r\n* `Terminated` - \r\n* `Rejected` - \r\n"
    agreementlifecyclestatus:
      type: object
      properties:
        AgreementLifecycleStatus:
          $ref: '#/components/schemas/status'
        AgreementLifecycleStatusType:
          $ref: '#/components/schemas/agreementlifecyclestatustypevalues'
      description: 'A characteristic of agreement which refers to the LifecycleStatus of agreement (e.g., potential, offered, confirmed, completed, signed, terminated).'
    agreement:
      type: object
      properties:
        AgreementSignedDate:
          $ref: '#/components/schemas/date'
        AgreementType:
          $ref: '#/components/schemas/agreementtypevalues'
        AgreementValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        AgreementVersion:
          $ref: '#/components/schemas/text'
        AgreementStatus:
          $ref: '#/components/schemas/agreementlifecyclestatus'
        AgreementSubjectMatter:
          $ref: '#/components/schemas/text'
        AgreementIdentification:
          $ref: '#/components/schemas/identifier'
        AgreementDate:
          $ref: '#/components/schemas/datetime'
        AgreementDescription:
          $ref: '#/components/schemas/text'
      description: ''
    productagreement:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/productagreementtypevalues'
        ProductReference:
          $ref: '#/components/schemas/bankingproduct'
        AgreementReference:
          $ref: '#/components/schemas/agreement'
      description: ''
    accountaccessconsent:
      type: object
      properties:
        Identification:
          $ref: '#/components/schemas/identifier'
        Status:
          $ref: '#/components/schemas/consentstatustypevalues'
        ExpirationDateTime:
          $ref: '#/components/schemas/datetime'
        CreationDateTime:
          $ref: '#/components/schemas/datetime'
        ConsentAccount:
          $ref: '#/components/schemas/productagreement'
      description: "Reference to the Customer's account ||\r\n|"
    tokenstatustypevalues:
      enum:
        - Active
        - Expired
        - Cancelled
        - Generated
        - Stored
        - Mapped
        - Routed
        - Suspension
        - Updated
      type: string
      description: ">\r\n* `Active` - \r\n* `Expired` - \r\n* `Cancelled` - \r\n* `Generated` - \r\n* `Stored` - \r\n* `Mapped` - \r\n* `Routed` - \r\n* `Suspension` - \r\n* `Updated` - \r\n"
    tokenidentificationandverificationmethodtypevalues:
      enum:
        - AssertedAuthentication
        - RiskBasedNoninteractiveAuthentication
        - InteractiveAuthentication
      type: string
      description: ">\r\n* `AssertedAuthentication` - \r\n* `RiskBasedNoninteractiveAuthentication` - \r\n* `InteractiveAuthentication` - \r\n"
    devicetypevalues:
      enum:
        - Securecardreader
        - Nonsecurecardreader
        - Mobile
        - Tablet
        - Personalcomputer
        - Othernational
        - Otherprivate
        - Wearable
        - Vehicle
        - Embedded
        - Keyfob
        - Jewellery
        - Sticker
        - Gamingdevice
        - Watch
        - Unknown
        - BiometricDevice
      type: string
      description: ">\r\n* `Securecardreader` - Secure card reader attached to the customer device\r\n* `Nonsecurecardreader` - Non-secure card reader attached to the customer device.\r\n* `Mobile` - Mobile phone\r\n* `Tablet` - Tablet\r\n* `Personalcomputer` - Personal computer\r\n* `Othernational` - Other device defined at national level\r\n* `Otherprivate` - Other device defined in a private way.\r\n* `Wearable` - Wearable device.\r\n* `Vehicle` - Vehicle.\r\n* `Embedded` - Embedded in a device.\r\n* `Keyfob` - Key Fob\r\n* `Jewellery` - Jewellery\r\n* `Sticker` - Sticker\r\n* `Gamingdevice` - Gaming Device\r\n* `Watch` - Watch\r\n* `Unknown` - Device type unknown\r\n* `BiometricDevice` - A biometric device is a security identification and authentication device. Such devices use automated methods of verifying or recognising the identity of a living person based on a physiological or behavioral characteristic.\nhttps://en.wikipedia.org/wiki/Biometric_device\n\r\n"
    geographicalareatypevalues:
      enum:
        - Continent
        - Country
        - State
        - District
        - Province
        - Town
        - City
        - Region
      type: string
      description: ">\r\n* `Continent` - \r\n* `Country` - \r\n* `State` - \r\n* `District` - \r\n* `Province` - \r\n* `Town` - \r\n* `City` - \r\n* `Region` - \r\n"
    addresstypevalues:
      enum:
        - PostalAddress
        - GeolocationAddress
        - LatitudeAddress
        - LongitudeAddress
        - ElectronicAddress
      type: string
      description: ">\r\n* `PostalAddress` - \r\n* `GeolocationAddress` - \r\n* `LatitudeAddress` - \r\n* `LongitudeAddress` - \r\n* `ElectronicAddress` - \r\n"
    address:
      type: object
      properties:
        AddressType:
          $ref: '#/components/schemas/addresstypevalues'
        LocationReference:
          $ref: '#/components/schemas/location'
      description: ''
    location:
      type: object
      properties:
        LocationDescription:
          $ref: '#/components/schemas/text'
        LocationDateTime:
          $ref: '#/components/schemas/datetime'
        LocationStatus:
          $ref: '#/components/schemas/status'
        LocationType:
          $ref: '#/components/schemas/geographicalareatypevalues'
        LocationZoningType:
          $ref: '#/components/schemas/text'
        LocationNeighborhoodType:
          $ref: '#/components/schemas/text'
        LocationConstructionType:
          $ref: '#/components/schemas/text'
        LocationOccupancyType:
          $ref: '#/components/schemas/text'
        LocationValue:
          $ref: '#/components/schemas/value'
        LocationCapacity:
          $ref: '#/components/schemas/text'
        LocationIdentification:
          $ref: '#/components/schemas/identifier'
        LocationAddress:
          $ref: '#/components/schemas/address'
        LocationName:
          $ref: '#/components/schemas/name'
        LocationTimeZone:
          $ref: '#/components/schemas/text'
      description: Geographical location of the device.
    country:
      type: object
      properties:
        NationalRegulatoryAuthority:
          $ref: '#/components/schemas/involvedparty'
      description: Country of the location.
    deviceoperatingsystemtypevalues:
      enum:
        - Android
        - Ios
        - Windows
        - Blackberry
        - Tizen
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `Android` - Android operating system.\r\n* `Ios` - iOS operating system.\r\n* `Windows` - Windows operating system.\r\n* `Blackberry` - Blackberry operating system.\r\n* `Tizen` - Tizen operating system.\r\n* `Othernational` - Other nationally defined code.\r\n* `Otherprivate` - Other privately defined code.\r\n"
    deviceidentificationtypevalues:
      enum:
        - IMEI
        - Serialnumber
        - Secureelementidentification
        - Othernational
        - Otherprivate
      type: string
      description: ">\r\n* `IMEI` - International Mobile Equipment Identity.\r\n* `Serialnumber` - Device serial number.\r\n* `Secureelementidentification` - Secure element ID.\r\n* `Othernational` - Other nationally assigned code.\r\n* `Otherprivate` - Other privately assigned code.\r\n"
    device:
      type: object
      properties:
        DeviceIdentification:
          $ref: '#/components/schemas/identifier'
        DeviceType:
          $ref: '#/components/schemas/devicetypevalues'
        DeviceProperty:
          $ref: '#/components/schemas/text'
        DeviceElement:
          $ref: '#/components/schemas/text'
        DeviceStatus:
          $ref: '#/components/schemas/status'
        DeviceVersion:
          type: string
          description: ''
          format: number
        DeviceDateTime:
          $ref: '#/components/schemas/datetime'
        DeviceDescription:
          $ref: '#/components/schemas/text'
        DeviceName:
          $ref: '#/components/schemas/name'
        DeviceLanguage:
          $ref: '#/components/schemas/text'
        DevicePhoneNumber:
          $ref: '#/components/schemas/text'
        DeviceLocation:
          $ref: '#/components/schemas/location'
        DeviceManufacturer:
          $ref: '#/components/schemas/text'
        DeviceCountry:
          $ref: '#/components/schemas/country'
        DeviceAddress:
          $ref: '#/components/schemas/address'
        DeviceAddressType:
          $ref: '#/components/schemas/addresstypevalues'
        DeviceOperatingSystem:
          $ref: '#/components/schemas/deviceoperatingsystemtypevalues'
        DeviceIdentificationType:
          $ref: '#/components/schemas/deviceidentificationtypevalues'
      description: ''
    tokenrequest:
      type: object
      properties:
        TokenRequestIdentification:
          $ref: '#/components/schemas/identifier'
        TokenRequestReason:
          $ref: '#/components/schemas/text'
      description: ''
    tokenprotectionmethodtypevalues:
      enum:
        - Software
        - Trustedexectutionenvironment
        - Secureelement
        - Secureenclave
        - Otherprivate
        - Othernational
        - Trustedplatformmodule
        - Virtualtrustedexecutionenvironment
      type: string
      description: ">\r\n* `Software` - Software protection method.\r\n* `Trustedexectutionenvironment` - Trusted execution environment method.\r\n* `Secureelement` - Secure element method.\r\n* `Secureenclave` - Secure enclave method.\r\n* `Otherprivate` - Other privately assigned code.\r\n* `Othernational` - Other code assigned by national organisation.\r\n* `Trustedplatformmodule` - Trusted Platform Module (TPM).\r\n* `Virtualtrustedexecutionenvironment` - Virtual trusted execution environment\r\n"
    tokenstoragelocationtypevalues:
      enum:
        - Device
        - Onfile
        - Cardacceptorwallet
        - Issuerwallet
        - Thirdpartywallet
        - Otherprivate
        - Othernational
      type: string
      description: ">\r\n* `Device` - Stored in device.\r\n* `Onfile` - Storage is on file.\r\n* `Cardacceptorwallet` - Storage is in wallet managed by card acceptor.\r\n* `Issuerwallet` - Storage is in wallet managed by Issuer.\r\n* `Thirdpartywallet` - Storage location is in wallet managed by a third party.\r\n* `Otherprivate` - Code defined by private agreement.\r\n* `Othernational` - Code defined by national standards organisation.\r\n"
    tokentypevalues:
      enum:
        - RefreshToken
        - AccessToken
        - SecurityToken
        - AuthenticationToken
      type: string
      description: ">\r\n* `RefreshToken` - \r\n* `AccessToken` - \r\n* `SecurityToken` - \r\n* `AuthenticationToken` - \r\n"
    token:
      type: object
      properties:
        TokenIdentification:
          $ref: '#/components/schemas/identifier'
        TokenStatus:
          $ref: '#/components/schemas/tokenstatustypevalues'
        TokenIdentificationAndVerificationMethod:
          $ref: '#/components/schemas/tokenidentificationandverificationmethodtypevalues'
        TokenStatusDate:
          $ref: '#/components/schemas/datetime'
        TokenDeviceReference:
          $ref: '#/components/schemas/device'
        TokenRequestReference:
          $ref: '#/components/schemas/tokenrequest'
        TokenProtectionMethod:
          $ref: '#/components/schemas/tokenprotectionmethodtypevalues'
        TokenStorageLocation:
          $ref: '#/components/schemas/tokenstoragelocationtypevalues'
        TokenType:
          $ref: '#/components/schemas/tokentypevalues'
      description: " ||\r\n|"
    BrokeredProductFacility:
      type: object
      properties:
        ConsentReference:
          $ref: '#/components/schemas/accountaccessconsent'
        ActiveAccessTokenReference:
          $ref: '#/components/schemas/token'
        BrokeredProductFacilityReference:
          $ref: '#/components/schemas/identifier'
        ServiceProviderReference:
          $ref: '#/components/schemas/involvedparty'
        ServiceUserReference:
          $ref: '#/components/schemas/involvedparty'
        ThirdPartyProviderReference:
          $ref: '#/components/schemas/involvedparty'
      description: 'Oversee the working of a business unit, assign work, manage against a plan and troubleshoot issues within Brokered Product.'
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    BrokeredProductFacility:
      description: BrokeredProductFacility
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BrokeredProductFacility'
    ServiceAccess:
      description: ServiceAccess
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceAccess'
  parameters:
    brokeredproductid:
      name: brokeredproductid
      in: path
      required: true
      style: simple
      schema:
        type: string
    serviceaccessid:
      name: serviceaccessid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    BrokeredProductFacility:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BrokeredProductFacility'
      required: true
    ServiceAccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceAccess'
      required: true