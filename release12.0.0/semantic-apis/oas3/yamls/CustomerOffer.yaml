openapi: 3.0.1
info:
  title: Customer Offer
  description: 'This service domain orchestrates the processing of a product offer for a new or established  customer. The offer process is defined specifically for the product or service being considered and can include actions such as document checks, collateral allocation, credit assessments, underwriting decisions, regulatory and procedural checks, eligibility checks, the use of internal and external specialist services (such as evaluations and legal advice).'
  contact:
    name: BIAN
    url: https://bian.org
  version: 12.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/CustomerOffer/12.0.0
paths:
  /CustomerOffer/Initiate:
    post:
      tags:
        - CR - CustomerOfferProcedure
      summary: InCR Initiate the offer procedure
      description: InCR Initiate the offer procedure
      operationId: Initiate
      requestBody:
        $ref: '#/components/requestBodies/CustomerOfferProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerOfferProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Update':
    put:
      tags:
        - CR - CustomerOfferProcedure
      summary: UpCR Update details of an offer procedure
      description: UpCR Update details of an offer procedure
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/customerofferid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerOfferProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerOfferProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Control':
    put:
      tags:
        - CR - CustomerOfferProcedure
      summary: CoCR Control the processing of an offer (e.g. terminate)
      description: CoCR Control the processing of an offer (e.g. terminate)
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/customerofferid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerOfferProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerOfferProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Exchange':
    put:
      tags:
        - CR - CustomerOfferProcedure
      summary: 'EcCR Accept, reject, verify, etc an offer procedure'
      description: 'EcCR Accept, reject, verify, etc an offer procedure'
      operationId: Exchange
      parameters:
        - $ref: '#/components/parameters/customerofferid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerOfferProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerOfferProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Execute':
    put:
      tags:
        - CR - CustomerOfferProcedure
      summary: ExCR Execute an automated task against an offer (e.g. submit data)
      description: ExCR Execute an automated task against an offer (e.g. submit data)
      operationId: Execute
      parameters:
        - $ref: '#/components/parameters/customerofferid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerOfferProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerOfferProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Request':
    put:
      tags:
        - CR - CustomerOfferProcedure
      summary: RqCR Request manual intervention in an offer (e.g. request specialist support)
      description: RqCR Request manual intervention in an offer (e.g. request specialist support)
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/customerofferid'
      requestBody:
        $ref: '#/components/requestBodies/CustomerOfferProcedure'
      responses:
        '200':
          $ref: '#/components/responses/CustomerOfferProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Retrieve':
    get:
      tags:
        - CR - CustomerOfferProcedure
      summary: ReCR Retrieve details about a customer offer
      description: ReCR Retrieve details about a customer offer
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/customerofferid'
      responses:
        '200':
          $ref: '#/components/responses/CustomerOfferProcedure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/FacilityApplication/{facilityapplicationid}/Update':
    put:
      tags:
        - BQ - FacilityApplication
      summary: UpBQ Update product options and pricing terms
      description: UpBQ Update product options and pricing terms
      operationId: UpdateFacilityApplication
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/facilityapplicationid'
      requestBody:
        $ref: '#/components/requestBodies/FacilityApplication'
      responses:
        '200':
          $ref: '#/components/responses/FacilityApplication'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/FacilityApplication/{facilityapplicationid}/Exchange':
    put:
      tags:
        - BQ - FacilityApplication
      summary: 'EcBQ Accept, reject etc product options and pricing terms'
      description: 'EcBQ Accept, reject etc product options and pricing terms'
      operationId: ExchangeFacilityApplication
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/facilityapplicationid'
      requestBody:
        $ref: '#/components/requestBodies/FacilityApplication'
      responses:
        '200':
          $ref: '#/components/responses/FacilityApplication'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/FacilityApplication/{facilityapplicationid}/Retrieve':
    get:
      tags:
        - BQ - FacilityApplication
      summary: ReBQ Retrieve details about product options and pricing terms
      description: ReBQ Retrieve details about product options and pricing terms
      operationId: RetrieveFacilityApplication
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/facilityapplicationid'
      responses:
        '200':
          $ref: '#/components/responses/FacilityApplication'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Disclosures/{disclosuresid}/Update':
    put:
      tags:
        - BQ - Disclosures
      summary: UpBQ Update disclosure submission
      description: UpBQ Update disclosure submission
      operationId: UpdateDisclosures
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/disclosuresid'
      requestBody:
        $ref: '#/components/requestBodies/Disclosures'
      responses:
        '200':
          $ref: '#/components/responses/Disclosures'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Disclosures/{disclosuresid}/Exchange':
    put:
      tags:
        - BQ - Disclosures
      summary: 'EcBQ Accept, reject etc. disclosures'
      description: 'EcBQ Accept, reject etc. disclosures'
      operationId: ExchangeDisclosures
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/disclosuresid'
      requestBody:
        $ref: '#/components/requestBodies/Disclosures'
      responses:
        '200':
          $ref: '#/components/responses/Disclosures'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Disclosures/{disclosuresid}/Retrieve':
    get:
      tags:
        - BQ - Disclosures
      summary: ReBQ Retrieve details about disclosure submissions
      description: ReBQ Retrieve details about disclosure submissions
      operationId: RetrieveDisclosures
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/disclosuresid'
      responses:
        '200':
          $ref: '#/components/responses/Disclosures'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Credit/{creditid}/Update':
    put:
      tags:
        - BQ - Credit
      summary: UpBQ Update credit submission details
      description: UpBQ Update credit submission details
      operationId: UpdateCredit
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/creditid'
      requestBody:
        $ref: '#/components/requestBodies/Credit'
      responses:
        '200':
          $ref: '#/components/responses/Credit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Credit/{creditid}/Retrieve':
    get:
      tags:
        - BQ - Credit
      summary: ReBQ Retrieve details about the credit submission
      description: ReBQ Retrieve details about the credit submission
      operationId: RetrieveCredit
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/creditid'
      responses:
        '200':
          $ref: '#/components/responses/Credit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Underwriting/{underwritingid}/Update':
    put:
      tags:
        - BQ - Underwriting
      summary: UpBQ Update submitted materials for the underwriting decision
      description: UpBQ Update submitted materials for the underwriting decision
      operationId: UpdateUnderwriting
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/underwritingid'
      requestBody:
        $ref: '#/components/requestBodies/Underwriting'
      responses:
        '200':
          $ref: '#/components/responses/Underwriting'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Underwriting/{underwritingid}/Retrieve':
    get:
      tags:
        - BQ - Underwriting
      summary: ReBQ Retrieve details about the underwriting decision
      description: ReBQ Retrieve details about the underwriting decision
      operationId: RetrieveUnderwriting
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/underwritingid'
      responses:
        '200':
          $ref: '#/components/responses/Underwriting'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Compliance/{complianceid}/Update':
    put:
      tags:
        - BQ - Compliance
      summary: UpBQ Update details submitted for compliance checks
      description: UpBQ Update details submitted for compliance checks
      operationId: UpdateCompliance
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/complianceid'
      requestBody:
        $ref: '#/components/requestBodies/Compliance'
      responses:
        '200':
          $ref: '#/components/responses/Compliance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Compliance/{complianceid}/Retrieve':
    get:
      tags:
        - BQ - Compliance
      summary: ReBQ Retrieve details of the regulatory compliance assessment
      description: ReBQ Retrieve details of the regulatory compliance assessment
      operationId: RetrieveCompliance
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/complianceid'
      responses:
        '200':
          $ref: '#/components/responses/Compliance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Audit/{auditid}/Update':
    put:
      tags:
        - BQ - Audit
      summary: UpBQ Update details of submitted materials for audit checks
      description: UpBQ Update details of submitted materials for audit checks
      operationId: UpdateAudit
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/auditid'
      requestBody:
        $ref: '#/components/requestBodies/Audit'
      responses:
        '200':
          $ref: '#/components/responses/Audit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Audit/{auditid}/Retrieve':
    get:
      tags:
        - BQ - Audit
      summary: ReBQ Retrieve details of the compliance assessment
      description: ReBQ Retrieve details of the compliance assessment
      operationId: RetrieveAudit
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/auditid'
      responses:
        '200':
          $ref: '#/components/responses/Audit'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Collateral/{collateralid}/Update':
    put:
      tags:
        - BQ - Collateral
      summary: UpBQ Update details of the collateral allocation
      description: UpBQ Update details of the collateral allocation
      operationId: UpdateCollateral
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/collateralid'
      requestBody:
        $ref: '#/components/requestBodies/Collateral'
      responses:
        '200':
          $ref: '#/components/responses/Collateral'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Collateral/{collateralid}/Exchange':
    put:
      tags:
        - BQ - Collateral
      summary: 'EcBQ Accept, reject etc. the collateral allocation'
      description: 'EcBQ Accept, reject etc. the collateral allocation'
      operationId: ExchangeCollateral
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/collateralid'
      requestBody:
        $ref: '#/components/requestBodies/Collateral'
      responses:
        '200':
          $ref: '#/components/responses/Collateral'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Collateral/{collateralid}/Retrieve':
    get:
      tags:
        - BQ - Collateral
      summary: ReBQ Retrieve details about the collateral allocation
      description: ReBQ Retrieve details about the collateral allocation
      operationId: RetrieveCollateral
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/collateralid'
      responses:
        '200':
          $ref: '#/components/responses/Collateral'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Booking/{bookingid}/Update':
    put:
      tags:
        - BQ - Booking
      summary: UpBQ Update details of the offer asset and liability booking
      description: UpBQ Update details of the offer asset and liability booking
      operationId: UpdateBooking
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/bookingid'
      requestBody:
        $ref: '#/components/requestBodies/Booking'
      responses:
        '200':
          $ref: '#/components/responses/Booking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Booking/{bookingid}/Retrieve':
    get:
      tags:
        - BQ - Booking
      summary: ReBQ Retrieve details about the booking
      description: ReBQ Retrieve details about the booking
      operationId: RetrieveBooking
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/bookingid'
      responses:
        '200':
          $ref: '#/components/responses/Booking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/CorrespondenceandDocuments/{correspondenceanddocumentsid}/Update':
    put:
      tags:
        - BQ - CorrespondenceandDocuments
      summary: UpBQ Update details about the correspondence and documents accessed and created by the offer
      description: UpBQ Update details about the correspondence and documents accessed and created by the offer
      operationId: UpdateCorrespondenceandDocuments
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/correspondenceanddocumentsid'
      requestBody:
        $ref: '#/components/requestBodies/CorrespondenceandDocuments'
      responses:
        '200':
          $ref: '#/components/responses/CorrespondenceandDocuments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/CorrespondenceandDocuments/{correspondenceanddocumentsid}/Exchange':
    put:
      tags:
        - BQ - CorrespondenceandDocuments
      summary: 'EcBQ Accept, verify, etc. correspondence and documents'
      description: 'EcBQ Accept, verify, etc. correspondence and documents'
      operationId: ExchangeCorrespondenceandDocuments
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/correspondenceanddocumentsid'
      requestBody:
        $ref: '#/components/requestBodies/CorrespondenceandDocuments'
      responses:
        '200':
          $ref: '#/components/responses/CorrespondenceandDocuments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/CorrespondenceandDocuments/{correspondenceanddocumentsid}/Retrieve':
    get:
      tags:
        - BQ - CorrespondenceandDocuments
      summary: ReBQ Retrieve details about correspondence and documents from the customer offer procedure
      description: ReBQ Retrieve details about correspondence and documents from the customer offer procedure
      operationId: RetrieveCorrespondenceandDocuments
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/correspondenceanddocumentsid'
      responses:
        '200':
          $ref: '#/components/responses/CorrespondenceandDocuments'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Agreement/{agreementid}/Update':
    put:
      tags:
        - BQ - Agreement
      summary: UpBQ Update details of the customer agreement
      description: UpBQ Update details of the customer agreement
      operationId: UpdateAgreement
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/agreementid'
      requestBody:
        $ref: '#/components/requestBodies/Agreement'
      responses:
        '200':
          $ref: '#/components/responses/Agreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Agreement/{agreementid}/Exchange':
    put:
      tags:
        - BQ - Agreement
      summary: 'EcBQ Accept, verify, etc. actions against the customer and product agreements'
      description: 'EcBQ Accept, verify, etc. actions against the customer and product agreements'
      operationId: ExchangeAgreement
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/agreementid'
      requestBody:
        $ref: '#/components/requestBodies/Agreement'
      responses:
        '200':
          $ref: '#/components/responses/Agreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/Agreement/{agreementid}/Retrieve':
    get:
      tags:
        - BQ - Agreement
      summary: ReBQ Retrieve details about the agreements impacted and created as part of the offer
      description: ReBQ Retrieve details about the agreements impacted and created as part of the offer
      operationId: RetrieveAgreement
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/agreementid'
      responses:
        '200':
          $ref: '#/components/responses/Agreement'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/ProductInitialization/{productinitializationid}/Update':
    put:
      tags:
        - BQ - ProductInitialization
      summary: UpBQ Update details of the product initiation request
      description: UpBQ Update details of the product initiation request
      operationId: UpdateProductInitialization
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/productinitializationid'
      requestBody:
        $ref: '#/components/requestBodies/ProductInitialization'
      responses:
        '200':
          $ref: '#/components/responses/ProductInitialization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/CustomerOffer/{customerofferid}/ProductInitialization/{productinitializationid}/Retrieve':
    get:
      tags:
        - BQ - ProductInitialization
      summary: ReBQ Retrieve details about the product initiation request
      description: ReBQ Retrieve details about the product initiation request
      operationId: RetrieveProductInitialization
      parameters:
        - $ref: '#/components/parameters/customerofferid'
        - $ref: '#/components/parameters/productinitializationid'
      responses:
        '200':
          $ref: '#/components/responses/ProductInitialization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    businessunit:
      type: object
      properties:
        BusinessFunction:
          type: string
          description: ''
          format: string
        Goal:
          type: string
          description: ''
          format: string
      description: Defines the booking entity
    financialinstrumenttypevalues:
      enum:
        - Loan
        - Bond
        - Deposit
        - Stock
        - Option
        - Share
        - Debt
        - Letterofcredit
        - Security
        - Derivative
      type: string
      description: ">\r\n* `Loan` - \r\n* `Bond` - \r\n* `Deposit` - \r\n* `Stock` - \r\n* `Option` - \r\n* `Share` - \r\n* `Debt` - Financial instruments evidencing moneys owed by the issuer to the holder on terms as specified. (ISO20022)\n\nAny type of instrument primarily classified as debt can be considered a debt instrument. Debt instruments are tools an individual, government entity, or business entity can utilize for the purpose of obtaining capital. Debt instruments provide capital to an entity that promises to repay the capital over time. Credit cards, credit lines, loans, and bonds can all be types of debt instruments. (Investopedia)\r\n* `Letterofcredit` - Instrument issued by a bank substituting its name and credit standing for that of its customer. A letter of credit is a written undertaking of the bank, issued for the account of a customer (the applicant), to honour a demand for payment, upon the beneficiary's compliance with the terms and conditions set forth in the undertaking. (ISO20022)\r\n* `Security` - Financial instruments representing a sum of rights of the investor vis-a-vis the issuer. (ISO20022)\r\n* `Derivative` - \r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: "Data or set of data \n\n- A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)"
          format: datatype
      description: ''
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ''
    amounttypevalues:
      enum:
        - Principal
        - Actual
        - Estimated
        - Maximum
        - Default
        - Replacement
        - Incremental
        - Decremental
        - Reserved
        - Available
        - Used
      type: string
      description: ">\r\n* `Principal` - \r\n* `Actual` - Actual amount.\r\n* `Estimated` - Estimated amount (the final amount could be above or below).\r\n* `Maximum` - Maximum amount (the final amount must be less or equal).\r\n* `Default` - Default amount.\r\n* `Replacement` - Replacement amount.\r\n* `Incremental` - Incremental amount for reservation.\r\n* `Decremental` - Decremental amount for reservation.\r\n* `Reserved` - Reserved or updated reserved amount for reservation.\r\n* `Available` - \r\n* `Used` - \r\n"
    amount:
      type: object
      properties:
        AmountValue:
          $ref: '#/components/schemas/value'
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          type: string
          description: "Decimal point position starts calulating from the right\n"
          format: string
        AmountType:
          $ref: '#/components/schemas/amounttypevalues'
      description: The principle amount for booking
    Booking:
      type: object
      properties:
        BusinessUnitReference:
          $ref: '#/components/schemas/businessunit'
        AssetLiabilityType:
          $ref: '#/components/schemas/financialinstrumenttypevalues'
        Amount:
          $ref: '#/components/schemas/amount'
      description: Handles the booking of the asset or liability to the appropriate unit
    financialstatementtypevalues:
      enum:
        - IncomeStatement
        - BalanceSheet
        - CashFlowsStatement
        - DebtStatement
        - AssetStatement
        - AssetAndLiabilityStatement
      type: string
      description: ">\r\n* `IncomeStatement` - \r\n* `BalanceSheet` - \r\n* `CashFlowsStatement` - A cash flow statement is a financial statement that shows how cash entered and exited a company during an accounting period.\r\n* `DebtStatement` - \r\n* `AssetStatement` - \r\n* `AssetAndLiabilityStatement` - \r\n"
    statement:
      type: object
      properties:
        StatementType:
          $ref: '#/components/schemas/financialstatementtypevalues'
      description: A statement of income over a required duration in a suitable format
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: "Name by which a party is known and which is usually used to identify that party. (ISO20022)\n"
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          type: string
          description: ''
          format: string
        TimeZoneCode:
          type: string
          description: ''
          format: string
        DaylightSavingIndicator:
          type: string
          description: ''
          format: string
      description: ''
    partyidentificationtypevalues:
      enum:
        - Taxidentificationnumber
        - Nationalregistrationnumber
        - Registrationauthorityidentification
        - LEI(LegalEntityIdentifier)
        - Alienregistrationnumber
        - Passportnumber
        - Taxexemptidentificationnumber
        - Corporateidentification
        - Driverlicensenumber
        - Foreigninvestmentidentitynumber
        - Socialsecuritynumber
        - Identitycardnumber
        - Concat
        - Nationalregistrationidentificationnumber
      type: string
      description: ">\r\n* `Taxidentificationnumber` - Number assigned by a tax authority to an entity.\r\n* `Nationalregistrationnumber` - Number assigned by a national registration authority to an entity. In Singapore this is known as the NRIC. (ISO20022)\r\n* `Registrationauthorityidentification` - An identifier for the Legal Entity in a business registry in the jurisdiction of legal registration, or in the appropriate registration authority. (ISO20022)\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `Alienregistrationnumber` - Number assigned by a government agency to identify foreign nationals.\r\n* `Passportnumber` - Number assigned by a passport authority.\r\n* `Taxexemptidentificationnumber` - Number assigned to a tax exempt entity.\r\n* `Corporateidentification` - Number assigned to a corporate entity.\r\n* `Driverlicensenumber` - Number assigned to a driver's license.\r\n* `Foreigninvestmentidentitynumber` - Number assigned to a foreign investor (other than the alien number).\r\n* `Socialsecuritynumber` - Number assigned by a social security agency.\r\n* `Identitycardnumber` - Number assigned by a national authority to an identity card.\r\n* `Concat` - Number assigned by an issuer to identify a customer via the concatenation of the birthdate and characters of the first name and surname.\r\n* `Nationalregistrationidentificationnumber` - National registration identification number. In Singapore this is known as the NRIC.\r\n"
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    partylegalstructuretypevalues:
      enum:
        - Individual
        - CommunityInterestCompany
        - CharitableIncorporatedOrganisation
        - Co-Operative
        - Charity
        - GeneralPartnership
        - LimitedLiabilityPartnership
        - ScottishLimitedPartnership
        - LimitedPartnership
        - PrivateLimitedCompany
        - PublicLimitedCompany
        - Sole(SoleTrader)
      type: string
      description: ">\r\n* `Individual` - \r\n* `CommunityInterestCompany` - \r\n* `CharitableIncorporatedOrganisation` - \r\n* `Co-Operative` - \r\n* `Charity` - \r\n* `GeneralPartnership` - \r\n* `LimitedLiabilityPartnership` - \r\n* `ScottishLimitedPartnership` - \r\n* `LimitedPartnership` - \r\n* `PrivateLimitedCompany` - \r\n* `PublicLimitedCompany` - \r\n* `Sole(SoleTrader)` - \r\n"
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
        PartyLegalStructureType:
          $ref: '#/components/schemas/partylegalstructuretypevalues'
      description: Reference to the legal entity (typically the customer) Party|Party (https://www.iso20022.org/standardsrepository/type/Party)|Standard|ISO20022BM ()
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "The outcome of the task  (will be used to update the Customer Offer Procedure Instance Record) ||\r\n|"
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: "Employees involved in completing the offer task ||\r\n|"
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: Identifier of the underwriting process.
    underwritingassessment:
      type: object
      properties:
        UnderwritingAssessmentIdentifier:
          $ref: '#/components/schemas/identifier'
      description: The outcome of the underwriting assessment
    Underwriting:
      type: object
      properties:
        CustomerIncomeStatement:
          $ref: '#/components/schemas/statement'
        CustomerDebtStatement:
          $ref: '#/components/schemas/statement'
        CustomerAssetStatement:
          $ref: '#/components/schemas/statement'
        UnderwritingAssessmentReference:
          $ref: '#/components/schemas/underwritingassessment'
      description: Handles the booking of the asset or liability to the appropriate unit
    compliancechecktypevalues:
      enum:
        - RegulatoryComplianceCheck
        - LegalComplianceCheck
        - GuidelineComplianceCheck
      type: string
      description: ">\r\n* `RegulatoryComplianceCheck` - \r\n* `LegalComplianceCheck` - \r\n* `GuidelineComplianceCheck` - \r\n"
    requirement:
      type: object
      properties:
        RequirementType:
          type: string
          description: ''
          format: string
      description: Description of the compliance requirements
    compliancecheck:
      type: object
      properties:
        ComplianceCheckType:
          type: string
          description: ''
          format: string
      description: The result of the compliance assessment
    Audit:
      type: object
      properties:
        GuidelineComplianceCheckType:
          $ref: '#/components/schemas/compliancechecktypevalues'
        GuidelineComplianceCheckRequirement:
          $ref: '#/components/schemas/requirement'
        GuidelineComplianceCheckSubmission:
          $ref: '#/components/schemas/text'
        GuidelineComplianceAdjustmentRequirement:
          $ref: '#/components/schemas/requirement'
        GuidelineComplianceCheckAssessment:
          $ref: '#/components/schemas/compliancecheck'
      description: Handles the booking of the asset or liability to the appropriate unit
    date:
      type: object
      properties:
        DateContent:
          type: string
          description: ''
          format: string
      description: Date when the asset was provided as collateral
    collateraltypevalues:
      enum:
        - Letterofcredit
        - Cash
        - Securities
        - Physicalentities
        - Insurance
        - Stockcertificate
        - Bond
        - Bankguarantee
        - Other
        - Commodity
        - Automobile
        - Industrialvehicle
        - Commercialtruck
        - Railvehicle
        - Nauticalcommercialvehicle
        - Nauticalleisurevehicle
        - Aeroplane
        - Machinetool
        - Industrialequipment
        - Officeequipment
        - Itequipment
        - Medicalequipment
        - Energyrelatedequipment
        - Commercialbuilding
      type: string
      description: ">\r\n* `Letterofcredit` - Instrument issued by a bank substituting its name and credit standing for that of its customer. A letter of credit is a written undertaking of the bank, issued for the account of a customer (the applicant), to honour a demand for payment, upon the beneficiary's compliance with the terms and conditions set forth in the undertaking.\r\n* `Cash` - Collateral type is cash.\r\n* `Securities` - Collateral type is securities.\r\n* `Physicalentities` - Collateral type are physical entities, for example, airplanes for debt issued by the airline industry.\r\n* `Insurance` - Collateral type is an insurance contract.\r\n* `Stockcertificate` - Collateral type is stock certificates.\r\n* `Bond` - Collateral type is bonds.\r\n* `Bankguarantee` - Collateral type is a bank guarantee.\r\n* `Other` - Other assets that could be used as collateral.\r\n* `Commodity` - Collateral type is commodities.\r\n* `Automobile` - Collateral type is automobile.\r\n* `Industrialvehicle` - Collateral type is industrial vehicle.\r\n* `Commercialtruck` - Collateral type is commercial track.\r\n* `Railvehicle` - Collateral type is rail vehicle.\r\n* `Nauticalcommercialvehicle` - Collateral type is nautical commercial vehicle.\r\n* `Nauticalleisurevehicle` - Collateral type is nautical leisure vehicle.\r\n* `Aeroplane` - Collateral type is aeroplane.\r\n* `Machinetool` - Collateral type is machine.\r\n* `Industrialequipment` - Collateral type is industrial equipment.\r\n* `Officeequipment` - Collateral type is office equipment.\r\n* `Itequipment` - Collateral type is IT equipment.\r\n* `Medicalequipment` - Collateral type is medical equipment.\r\n* `Energyrelatedequipment` - Collateral type is energy related equipment.\r\n* `Commercialbuilding` - Collateral type is commercial building.\r\n"
    collateralassetarrangement:
      type: object
      properties:
        CollateralPledgedDate:
          $ref: '#/components/schemas/date'
        CollateralType:
          $ref: '#/components/schemas/collateraltypevalues'
        CollateralValuePledged:
          $ref: '#/components/schemas/amount'
        CollateralAmount:
          $ref: '#/components/schemas/amount'
      description: The required collateral amount for the offer
    collateralagreement:
      type: object
      properties:
        CollateralAgreementIdentifier:
          type: string
          description: "An identifier that allows to uniquely refer to an instance of a Collateral Agreement.\n"
          format: string
        CollateralAgreementRegistrationReference:
          type: string
          description: External identifier assigned by a collateral registration authority to refer to the registration of the collateral agreement.
          format: string
      description: ''
    duration:
      type: object
      properties:
        Duration:
          type: string
          description: 'A duration is the specification of a length of time without a fixed start or end time, expressed in Gregorian calendar time units (Year, Month, Week, Day) and Hours, Minutes or Seconds. (UN/CEFACT)'
          format: datatype
      description: duration for which the earmarking is enforced
    schedule:
      type: object
      properties:
        ScheduleType:
          type: string
          description: ''
          format: string
      description: "Defines scheduled update/review tasks covering all tracked properties ||\r\n|"
    paymentwarrantyarrangement:
      type: object
      properties:
        CollateralAgreementReference:
          $ref: '#/components/schemas/collateralagreement'
        WarrantyAmount:
          $ref: '#/components/schemas/amount'
        WarrantyDuration:
          $ref: '#/components/schemas/duration'
        RecallPlan:
          $ref: '#/components/schemas/schedule'
      description: Reference to earmarked collateral during the offer procedure
    servicetypevalues:
      enum:
        - ITService
        - AdministrativeService
        - SystemService
        - FinancialService
        - InformationService
        - BusinessService
      type: string
      description: ">\r\n* `ITService` - \r\n* `AdministrativeService` - \r\n* `SystemService` - \r\n* `FinancialService` - \r\n* `InformationService` - \r\n* `BusinessService` - \r\n"
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: 'A characteristic of service which refers to the lifecycle of service (e.g., initiated, active, de-active, etc.) '
    feature:
      type: object
      properties:
        FeatureType:
          $ref: '#/components/schemas/text'
        FeatureIdentification:
          $ref: '#/components/schemas/identifier'
        FeatureName:
          $ref: '#/components/schemas/name'
        FeatureLifecycleStatus:
          $ref: '#/components/schemas/status'
        FeatureDescription:
          $ref: '#/components/schemas/text'
      description: A characteristic of service which refers 1) mainly to the function or condition of service. 2) to non-functional features like quality and security
    service:
      type: object
      properties:
        ServiceName:
          $ref: '#/components/schemas/name'
        ServiceDescription:
          $ref: '#/components/schemas/text'
        ServiceType:
          $ref: '#/components/schemas/servicetypevalues'
        ServiceIdentification:
          $ref: '#/components/schemas/identifier'
        ServiceLifecycleStatus:
          $ref: '#/components/schemas/status'
        ServiceFeature:
          $ref: '#/components/schemas/feature'
      description: 'External identifier assigned by an asset valuation service provider to refer to an instance of Asset Valuation '
    rate:
      type: object
      properties:
        RateValue:
          $ref: '#/components/schemas/value'
        RateUnit:
          $ref: '#/components/schemas/text'
        RatePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        RateCapitalUnit:
          $ref: '#/components/schemas/text'
      description: ''
    assetvaluation:
      type: object
      properties:
        AssetValue:
          $ref: '#/components/schemas/value'
        AssetValueType:
          $ref: '#/components/schemas/text'
        AssetValuationType:
          $ref: '#/components/schemas/text'
        AssetValuationDate:
          $ref: '#/components/schemas/datetime'
        AssetValuationServiceReference:
          $ref: '#/components/schemas/service'
        AssetValuationRate:
          $ref: '#/components/schemas/rate'
        AssetValuationStatus:
          $ref: '#/components/schemas/status'
        AssetValuationValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: ''
    collateralassetstatusvalues:
      enum:
        - Offered
        - UnderAssessment
        - Transferred
        - Allocated
        - FreeForAllocation
        - AllocatedToAnotherLoan
        - IssuedForExecution
      type: string
      description: ">\r\n* `Offered` - \r\n* `UnderAssessment` - \r\n* `Transferred` - \r\n* `Allocated` - \r\n* `FreeForAllocation` - \r\n* `AllocatedToAnotherLoan` - \r\n* `IssuedForExecution` - \r\n"
    collateralasset:
      type: object
      properties:
        CollateralAssetIdentification:
          $ref: '#/components/schemas/identifier'
        CollateralAssetType:
          $ref: '#/components/schemas/collateraltypevalues'
        CollateralAssetValuation:
          $ref: '#/components/schemas/assetvaluation'
        CollateralAssetStatus:
          $ref: '#/components/schemas/collateralassetstatusvalues'
      description: Reference to the related collateral asset (e.g. property)
    allocationstatusvalues:
      enum:
        - Fullyallocated
        - Partiallyallocated
        - Earmarked
      type: string
      description: ">\r\n* `Fullyallocated` - \r\n* `Partiallyallocated` - \r\n* `Earmarked` - Not allocated, merely earmarked\r\n"
    collateralassetallocation:
      type: object
      properties:
        CollateralAssetAllocationStatus:
          $ref: '#/components/schemas/allocationstatusvalues'
      description: Reference to the allocated collateral
    Collateral:
      type: object
      properties:
        CollateralRequirement:
          $ref: '#/components/schemas/collateralassetarrangement'
        CollateralEarmarkReference:
          $ref: '#/components/schemas/paymentwarrantyarrangement'
        CollateralAssetReference:
          $ref: '#/components/schemas/collateralasset'
        CollateralAssetAllocationReference:
          $ref: '#/components/schemas/collateralassetallocation'
      description: Handles the booking of the asset or liability to the appropriate unit
    customerratingtypevalues:
      enum:
        - Customerprofitability
        - Customercreditrating
      type: string
      description: ">\r\n* `Customerprofitability` - A value of Customer Rating Type whereby customer profitability is measured.\r\n* `Customercreditrating` - A value of Customer Rating Type whereby customer creditability is measured.\r\n"
    customerrating:
      type: object
      properties:
        CustomerRatingType:
          $ref: '#/components/schemas/customerratingtypevalues'
        CustomerRatingValue:
          $ref: '#/components/schemas/value'
        CustomerRatingDescription:
          $ref: '#/components/schemas/text'
        CustomerRatingValueDate:
          $ref: '#/components/schemas/datetime'
        CustomerRatingValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: The customer's current credit rating
    customercreditratingassessment:
      type: object
      properties:
        CreditRatingAssessmentType:
          type: string
          description: ''
          format: ''
      description: Reference to the authorization if an aspect of the offer procedure
    Credit:
      type: object
      properties:
        CustomerCreditRating:
          $ref: '#/components/schemas/customerrating'
        CreditAuthorizationDecisionReference:
          $ref: '#/components/schemas/customercreditratingassessment'
        CreditAuthorizationDecision:
          $ref: '#/components/schemas/text'
      description: Handles the booking of the asset or liability to the appropriate unit
    customeragreement:
      type: object
      properties:
        CustomerAgreement:
          type: string
          description: 'An agreement between a bank and its customer. '
          format: class
      description: Reference to the associated master agreement that is accessed during the offer procedure
    productagreementtypevalues:
      enum:
        - CurrentAccountAgreement
        - SavingsAccountAgreement
        - BrokeredProductAgreement
        - ConsumerLoanAgreement
        - MortgageLoanAgreement
        - DirectDebitServiceAgreement
      type: string
      description: "The type of product or service that is being offered ||\r\n|"
    productidentificationtypevalues:
      enum:
        - ISINCode
        - PackageCode
        - Buyersitemnumber
        - Commercialdescriptioncodename
        - EAN
        - Harmonizedtariffcodename
        - Manufacturersitemnumber
        - Modelnumber
        - Partnumber
        - Quotacategory
        - Stylenumber
        - Suppliersitemnumber
        - Universalproductcode
      type: string
      description: ">\r\n* `ISINCode` - \r\n* `PackageCode` - \r\n* `Buyersitemnumber` - Product identifier assigned by the buyer.\r\n* `Commercialdescriptioncodename` - A code to identify a product based on applicable commercial conditions.\r\n* `EAN` - The unique EAN (European Article Number) code.\r\n* `Harmonizedtariffcodename` - Classification of goods as developed by the Customs Cooperation council.\r\n* `Manufacturersitemnumber` - Product identifier as assigned by the manufacturer.\r\n* `Modelnumber` - Reference number assigned by the manufacturer to differentiate variations in similar products in a class or group.\r\n* `Partnumber` - Reference assigned by the manufacturer to a product part.\r\n* `Quotacategory` - Product identifier used by the retail industry.\r\n* `Stylenumber` - Identification of the style of a product.\r\n* `Suppliersitemnumber` - Number assigned to an article by the supplier of that article.\r\n* `Universalproductcode` - Number assigned to a manufacturer's product by the Product Code Council.\r\n"
    productidentification:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/identifier'
        ProductIdentificationType:
          $ref: '#/components/schemas/productidentificationtypevalues'
      description: The identifier of product e.g. ISIN Code.
    bankingproducttypevalues:
      enum:
        - LoanProduct
        - CurrentAccountProduct
        - SavingAccountProduct
        - BrokeredProduct
        - TermDepositProduct
      type: string
      description: ">\r\n* `LoanProduct` - \r\n* `CurrentAccountProduct` - \r\n* `SavingAccountProduct` - \r\n* `BrokeredProduct` - \r\n* `TermDepositProduct` - \r\n"
    productlifecyclestatustypevalues:
      enum:
        - Initiated
        - Announced
        - Sold
        - Obsolete
        - Active
      type: string
      description: ">\r\n* `Initiated` - \r\n* `Announced` - \r\n* `Sold` - \r\n* `Obsolete` - \r\n* `Active` - \r\n"
    productlifecyclestatus:
      type: object
      properties:
        ProductLifecycleStatus:
          $ref: '#/components/schemas/status'
        ProductLifecycleStatusType:
          $ref: '#/components/schemas/productlifecyclestatustypevalues'
      description: 'Refers to the lifecycle of a product (e.g., initiated, announced, active, obsolete, withdrawn).'
    bankingproduct:
      type: object
      properties:
        ProductIdentification:
          $ref: '#/components/schemas/productidentification'
        ProductType:
          $ref: '#/components/schemas/bankingproducttypevalues'
        ProductLifecycleStatus:
          $ref: '#/components/schemas/productlifecyclestatus'
        ProductPriority:
          $ref: '#/components/schemas/text'
        ProductDescription:
          $ref: '#/components/schemas/text'
        ProductVersion:
          $ref: '#/components/schemas/text'
        ProductName:
          $ref: '#/components/schemas/name'
      description: ''
    agreementtypevalues:
      enum:
        - CustomerAgreement
        - SupplierAgreement
        - BrokerAgreement
        - SalesAgreement
        - PurchaseAgreement
        - MaintenanceAgreement
        - ProductAgreement
        - ProductSalesAgreement
        - ResourceAgreement
      type: string
      description: ">\r\n* `CustomerAgreement` - \r\n* `SupplierAgreement` - \r\n* `BrokerAgreement` - \r\n* `SalesAgreement` - \r\n* `PurchaseAgreement` - \r\n* `MaintenanceAgreement` - \r\n* `ProductAgreement` - \r\n* `ProductSalesAgreement` - \r\n* `ResourceAgreement` - \r\n"
    agreementlifecyclestatustypevalues:
      enum:
        - Offered
        - Confirmed
        - Completed
        - Signed
        - Terminated
        - Rejected
      type: string
      description: ">\r\n* `Offered` - \r\n* `Confirmed` - \r\n* `Completed` - \r\n* `Signed` - \r\n* `Terminated` - \r\n* `Rejected` - \r\n"
    agreementlifecyclestatus:
      type: object
      properties:
        AgreementLifecycleStatus:
          $ref: '#/components/schemas/status'
        AgreementLifecycleStatusType:
          $ref: '#/components/schemas/agreementlifecyclestatustypevalues'
      description: 'A characteristic of agreement which refers to the LifecycleStatus of agreement (e.g., potential, offered, confirmed, completed, signed, terminated).'
    agreement:
      type: object
      properties:
        AgreementSignedDate:
          $ref: '#/components/schemas/date'
        AgreementType:
          $ref: '#/components/schemas/agreementtypevalues'
        AgreementValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        AgreementVersion:
          $ref: '#/components/schemas/text'
        AgreementStatus:
          $ref: '#/components/schemas/agreementlifecyclestatus'
        AgreementSubjectMatter:
          $ref: '#/components/schemas/text'
        AgreementIdentification:
          $ref: '#/components/schemas/identifier'
        AgreementDate:
          $ref: '#/components/schemas/datetime'
        AgreementDescription:
          $ref: '#/components/schemas/text'
      description: ''
    productagreement:
      type: object
      properties:
        Type:
          $ref: '#/components/schemas/productagreementtypevalues'
        ProductReference:
          $ref: '#/components/schemas/bankingproduct'
        AgreementReference:
          $ref: '#/components/schemas/agreement'
      description: Reference to the product specific agreement that is set-up as a result of the offer procedure (when successful)
    Agreement:
      type: object
      properties:
        CustomerAgreementInstanceReference:
          $ref: '#/components/schemas/customeragreement'
        SalesProductAgreementInstanceReference:
          $ref: '#/components/schemas/productagreement'
      description: Handles the booking of the asset or liability to the appropriate unit
    regulatorycompliancecheck:
      type: object
      properties:
        RegulatoryComplianceCheckResult:
          type: string
          description: ''
          format: string
      description: The result of the compliance assessment
    Compliance:
      type: object
      properties:
        RegulatoryComplianceCheckType:
          $ref: '#/components/schemas/compliancechecktypevalues'
        RegulatoryComplianceCheckRequirement:
          $ref: '#/components/schemas/requirement'
        RegulatoryComplianceCheckSubmission:
          $ref: '#/components/schemas/text'
        RegulatoryComplianceAdjustmentRequirement:
          $ref: '#/components/schemas/requirement'
        RegulatoryComplianceCheckAssessment:
          $ref: '#/components/schemas/regulatorycompliancecheck'
      description: Handles the booking of the asset or liability to the appropriate unit
    ProductInitialization:
      type: object
      properties:
        ProductInstanceReference:
          $ref: '#/components/schemas/productagreement'
      description: Handles the booking of the asset or liability to the appropriate unit
    financialdocumenttypevalues:
      enum:
        - Meteredserviceinvoice
        - Creditnoterelatedtofinancialadjustment
        - Debitnoterelatedtofinancialadjustment
        - Commercialinvoice
        - Creditnote
        - Debitnote
        - Hireinvoice
        - Selfbilledinvoice
        - Remittanceadvicemessage
        - Relatedpaymentinstruction
        - Commercialcontract
        - Foreignexchangedealreference
        - Statementofaccount
        - Dispatchadvice
        - Purchaseorder
        - Structuredcommunicationreference
        - Billoflading
        - Voucher
        - Accountreceivableopenitem
        - Tradeservicesutilitytransaction
        - Cashierreceipt
        - Customerreceipt
        - Journal
        - Salereceipt
      type: string
      description: ">\r\n* `Meteredserviceinvoice` - Document is an invoice claiming payment for the supply of metered services, for example gas or electricity supplied to a fixed meter.\r\n* `Creditnoterelatedtofinancialadjustment` - Document is a credit note for the final amount settled for a commercial transaction.\r\n* `Debitnoterelatedtofinancialadjustment` - Document is a debit note for the final amount settled for a commercial transaction.\r\n* `Commercialinvoice` - Document is an invoice.\r\n* `Creditnote` - Document is a credit note.\r\n* `Debitnote` - Document is a debit note.\r\n* `Hireinvoice` - Document is an invoice for the hiring of human resources or renting goods or equipment.\r\n* `Selfbilledinvoice` - Document is an invoice issued by the debtor.\r\n* `Remittanceadvicemessage` - Document is a remittance advice sent separately from the current transaction.\r\n* `Relatedpaymentinstruction` - Document is a linked payment instruction to which the current payment instruction is related, for example, in a cover scenario.\r\n* `Commercialcontract` - Document is an agreement between the parties, stipulating the terms and conditions of the delivery of goods or services.\r\n* `Foreignexchangedealreference` - Document is a pre-agreed or pre-arranged foreign exchange transaction to which the payment transaction refers.\r\n* `Statementofaccount` - Document is a statement of the transactions posted to the debtor's account at the supplier.\r\n* `Dispatchadvice` - Document is a dispatch advice.\r\n* `Purchaseorder` - Document is a purchase order.\r\n* `Structuredcommunicationreference` - Document is a structured communication reference provided by the creditor to identify the referred transaction.\r\n* `Billoflading` - Document is a shipping notice.\r\n* `Voucher` - Document is an electronic payment document.\r\n* `Accountreceivableopenitem` - Document is a payment that applies to a specific source document.\r\n* `Tradeservicesutilitytransaction` - Document is a transaction identifier as assigned by the Trade Services Utility.\r\n* `Cashierreceipt` - When the Sale system print the Cashier copy of the Payment receipt.\r\n* `Customerreceipt` - When the Sale System requires   the POI system to print the Customer receipt.\r\n* `Journal` - When the POI or the Sale System wants to store a message on the journal printer or electronic journal of the Sale Terminal (it is sometimes a Sale Logging/Journal Printer).\r\n* `Salereceipt` - When the Sale System requires the POI system to print the Sale receipt.\r\n"
    documentdatetimetypevalues:
      enum:
        - CreationDate
        - CapturingDate
        - VersionDate
        - ValueDate
        - IssueDate
      type: string
      description: ">\r\n* `CreationDate` - \r\n* `CapturingDate` - \r\n* `VersionDate` - \r\n* `ValueDate` - \r\n* `IssueDate` - \r\n"
    document:
      type: object
      properties:
        DocumentIdentification:
          $ref: '#/components/schemas/identifier'
        DocumentVersion:
          type: string
          description: ''
          format: number
        DocumentType:
          $ref: '#/components/schemas/financialdocumenttypevalues'
        DocumentStatus:
          $ref: '#/components/schemas/status'
        DocumentDateTime:
          $ref: '#/components/schemas/datetime'
        DocumentName:
          $ref: '#/components/schemas/name'
        DocumentDateTimeType:
          $ref: '#/components/schemas/documentdatetimetypevalues'
        DocumentPurpose:
          $ref: '#/components/schemas/text'
        DocumentFormat:
          $ref: '#/components/schemas/text'
        DocumentSubject:
          $ref: '#/components/schemas/text'
        DocumentDescription:
          $ref: '#/components/schemas/text'
        DocumentValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
      description: ''
    disclosure:
      type: object
      properties:
        DisclosureType:
          $ref: '#/components/schemas/text'
        ConfirmationIndicator:
          $ref: '#/components/schemas/text'
        SpecifiedDocument:
          $ref: '#/components/schemas/document'
      description: 'The type of disclosure (e.g. verbal, requiring signature)'
    Disclosures:
      type: object
      properties:
        DisclosureType:
          $ref: '#/components/schemas/disclosure'
        DisclosureTextDescription:
          $ref: '#/components/schemas/text'
        CustomerAcceptanceIndicator:
          type: string
          description: An indicator that the disclosure has been accepted (indicates signature obtained as necessary)
          format: boolean
        DocumentReference:
          $ref: '#/components/schemas/document'
      description: Handles the booking of the asset or liability to the appropriate unit
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    arrangementlifecyclestatustypevalues:
      enum:
        - Requested
        - Proposed
        - Offered
        - Accepted
        - Cancelled
        - Fulfilled
        - Terminated
      type: string
      description: ">\r\n* `Requested` - \r\n* `Proposed` - \r\n* `Offered` - \r\n* `Accepted` - \r\n* `Cancelled` - \r\n* `Fulfilled` - \r\n* `Terminated` - \r\n"
    arrangementlifecyclestatus:
      type: object
      properties:
        ArrangementLifecycleStatus:
          $ref: '#/components/schemas/status'
        ArrangementLifecycleStatusType:
          $ref: '#/components/schemas/arrangementlifecyclestatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
        - RestructuringArrangement
        - InsuranceArrangement
        - CollectionArrangement
        - UnderwritingArrangement
        - TerminationArrangement
        - MaturityArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n* `RestructuringArrangement` - \r\n* `InsuranceArrangement` - \r\n* `CollectionArrangement` - An arrangement into which is promised to collect past-due debts from borrowers\r\n* `UnderwritingArrangement` - A contractual agreement between parties that commits the underwriter to assuming risk.\r\n* `TerminationArrangement` - \r\n* `MaturityArrangement` - \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementlifecyclestatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: The option setting as agreed/defined with the customer
    feetypevalues:
      enum:
        - Accountingfee
        - Adrfee
        - Advisoryfee
        - Airwaybillfee
        - Backendload
        - Brokeragefee
        - Clearanceandhandlingatdestination
        - Clearanceandhandlingatorigin
        - Collectfreight
        - Commission
        - Contingencydeferredsalescharge
        - Correspondentbankcharge
        - Custodyfee
        - Dangerousgoodsfee
        - Dilutionlevy
        - Discount
        - Equalisation
        - Frontendload
        - Initial
        - Insurancepremium
        - Issuancecancellationfee
        - Issuancefee
        - Managementfee
        - Matchingfees
        - Miscellaneousfee
        - Other
        - Packaging
        - Partacquis
        - Penalty
        - Pickup
        - Postagecharge
        - Premium
        - Publicationfee
        - Regulatoryfee
        - Securitycharge
        - Serviceprovisionfee
        - Shippingcharge
        - Signatureservice
        - Specialconcessions
        - Speciallyagreedfrontendload
        - Storageatdestination
        - Storageatorigin
        - Switch
        - Transferfee
        - Transportcharges
        - Ucitscommission
      type: string
      description: ">\r\n* `Accountingfee` - Fee paid for accounting services rendered.\r\n* `Adrfee` - Charge linked to an ADR (American Depositary Receipt).\r\n* `Advisoryfee` - Fee paid for advisory services rendered.\r\n* `Airwaybillfee` - Charge is an airway bill fee.\r\n* `Backendload` - Sales charge paid by the investor when redeeming an investment such as an investment fund.\r\n* `Brokeragefee` - Fee paid to a broker for services provided.\r\n* `Clearanceandhandlingatdestination` - Charge is for clearance and handling of goods at destination.\r\n* `Clearanceandhandlingatorigin` - Charge is for clearance and handling of goods at origin.\r\n* `Collectfreight` - Charge is for the collection of the freight.\r\n* `Commission` - Fee paid for services provided.\r\n* `Contingencydeferredsalescharge` - Deferred sales charge.\r\n* `Correspondentbankcharge` - In investment funds, the charge of the correspondent bank for transferring money.\r\n* `Custodyfee` - Fee paid to a custodian in respect of custodial services.\r\n* `Dangerousgoodsfee` - Charge is for dangerous goods.\r\n* `Dilutionlevy` - In investment funds, a charge payable by the investor covering bid-offer spreads and dealing charges for the underlying investments. The dilution levy is paid to the fund for the benefit of other unit holders.\r\n* `Discount` - Charge that has been reduced from the standard initial charge levied by a fund, eg, during a launch period or as negotiated by a funds supermarket / discount broker.\r\n* `Equalisation` - The part of an investor's subscription amount that is held by the fund in order to pay incentive or performance fees at the end of the fiscal year.\r\n* `Frontendload` - Sales charge paid immediately by the investor when subscribing to an investment such as an investment fund.\r\n* `Initial` - Charge paid at the time of the first subscription.\r\n* `Insurancepremium` - Charge is a premium for insurance.\r\n* `Issuancecancellationfee` - Fee linked to the cancellation of an issuance.\r\n* `Issuancefee` - Charge linked to the issuance of security.\r\n* `Managementfee` - Fee paid to an investment manager for services. The fee usually includes fund administration costs and investor relationship management. Typically, the amount paid is a percentage of the assets under management.\r\n* `Matchingfees` - Fee charged for matching and/or confirmation.\r\n* `Miscellaneousfee` - Miscellaneous fee.\r\n* `Other` - Another type of charge.\r\n* `Packaging` - Charge is for packaging of goods.\r\n* `Partacquis` - Portion of charge that the fund is entitled to receive, that cannot be reduced by an intermediary.\r\n* `Penalty` - Fee charged to the investor for early redemption of the fund.\r\n* `Pickup` - Charge is for pick-up of goods.\r\n* `Postagecharge` - Charge paid for the postage.\r\n* `Premium` - In investment funds, pre-arranged addition to the trade amount based on the published net asset value.\r\n* `Publicationfee` - Fee paid in respect of publications made.\r\n* `Regulatoryfee` - Fee charged by a regulatory authority, eg, Securities and Exchange fees.\r\n* `Securitycharge` - Charge is for security.\r\n* `Serviceprovisionfee` - Fee paid for the provision of financial services.\r\n* `Shippingcharge` - Charge for shipping, including the insurance of securities.\r\n* `Signatureservice` - Charge is for signature services.\r\n* `Specialconcessions` - Charges, drawdown, or other reduction from or in addition to the deal price.\r\n* `Speciallyagreedfrontendload` - Specially agreed front-end load.\r\n* `Storageatdestination` - Charge is for storage of goods at destination.\r\n* `Storageatorigin` - Charge is for storage of goods at origin.\r\n* `Switch` - In investment funds, charge related to a switch transaction.\r\n* `Transferfee` - In investment funds, a fee charged for the transfer of ownership of an investment fund.\r\n* `Transportcharges` - Charge is for transport.\r\n* `Ucitscommission` - Charges paid by the investor to the Fund Company for subscription and redemption orders.\r\n"
    feeplantypevalues:
      enum:
        - StandardFeePlan
        - FinalFeePlan
      type: string
      description: ">\r\n* `StandardFeePlan` - \r\n* `FinalFeePlan` - \r\n"
    goal:
      type: object
      properties:
        GoalType:
          type: string
          description: The type of goal
          format: string
        GoalDefinition:
          type: string
          description: 'A definition of the goal, including the intended actions required to achieve the goal'
          format: string
        GoalOrganisation:
          type: string
          description: Identifies the interested parties and their roles and responsibilities for the specific actions supporting the achievement of the goal
          format: ''
        GoalResult:
          type: string
          description: 'Assessment of how the work is progressing towards achieving the goal, including projections of likely outcomes'
          format: string
      description: ''
    budgettypevalues:
      enum:
        - OperatingBudget
        - FinancialBudget
        - ResourceBudget
      type: string
      description: ">\r\n* `OperatingBudget` - \r\n* `FinancialBudget` - \r\n* `ResourceBudget` - \r\n"
    budgettype:
      type: object
      properties:
        BudgetTypeName:
          $ref: '#/components/schemas/name'
        BudgetType:
          $ref: '#/components/schemas/budgettypevalues'
      description: A Classification value that specifies the type of Budget
    budgetarrangement:
      type: object
      properties:
        BudgetType:
          $ref: '#/components/schemas/budgettype'
        BudgetAmount:
          $ref: '#/components/schemas/amount'
      description: 'An arrangement which is specifying an estimate of costs, revenues, and resources over a specified period, reflecting a reading of future financial conditions and goals. (adapted from Business Dictionary)'
    plannedaction:
      type: object
      properties:
        PlannedAction:
          type: string
          description: 'An action that is arranged in a plan for doing or achieving something '
          format: class
      description: 'An action that is arranged in a plan for doing or achieving something '
    plantypevalues:
      enum:
        - AdministrativePlan
        - ManagementPlan
        - StratgyPlan
        - FinancialPlan
      type: string
      description: ">\r\n* `AdministrativePlan` - \r\n* `ManagementPlan` - \r\n* `StratgyPlan` - \r\n* `FinancialPlan` - \r\n"
    plantype:
      type: object
      properties:
        PlanTypeName:
          $ref: '#/components/schemas/name'
        PlanType:
          $ref: '#/components/schemas/plantypevalues'
      description: A Classification value that specifies the type of Plan
    plan:
      type: object
      properties:
        PlanGoal:
          $ref: '#/components/schemas/goal'
        PlanBudget:
          $ref: '#/components/schemas/budgetarrangement'
        PlannedAction:
          $ref: '#/components/schemas/plannedaction'
        PlanType:
          $ref: '#/components/schemas/plantype'
        PlanOrganisation:
          type: string
          description: ''
          format: string
        PlanValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PlanDescription:
          $ref: '#/components/schemas/text'
      description: ''
    feeplan:
      type: object
      properties:
        FeePlanName:
          $ref: '#/components/schemas/name'
        FeePlanType:
          $ref: '#/components/schemas/feeplantypevalues'
        FeePlan:
          $ref: '#/components/schemas/plan'
      description: "An arranged FeeRatePlan\n"
    debitcreditindicatortvalues:
      enum:
        - Debit
        - Credit
      type: string
      description: ">\r\n* `Debit` - Transaction is a debt entry\r\n* `Credit` - Transaction is a credit entry\r\n"
    adjustmentdirectiontypevalues:
      enum:
        - Added
        - Substracted
      type: string
      description: ">\r\n* `Added` - Adjustment amount must be added to the total amount.\r\n* `Substracted` - Adjustment amount must be substracted from the total amount.\r\n"
    chargebearertypevalues:
      enum:
        - Bornebydebtor
        - Bornebycreditor
        - Shared
        - Followingservicelevel
      type: string
      description: ">\r\n* `Bornebydebtor` - All transaction charges are to be borne by the debtor.\r\n* `Bornebycreditor` - All transaction charges are to be borne by the creditor.\r\n* `Shared` - In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor. In a direct debit context, means that transaction charges on the sender side are to be borne by the creditor, transaction charges on the receiver side are to be borne by the debtor.\r\n* `Followingservicelevel` - Charges are to be applied following the rules agreed in the service level and/or scheme.\r\n"
    feearrangement:
      type: object
      properties:
        FeeType:
          $ref: '#/components/schemas/feetypevalues'
        FeeAmount:
          $ref: '#/components/schemas/amount'
        FeeRate:
          $ref: '#/components/schemas/rate'
        FeeEffectivePeriod:
          $ref: '#/components/schemas/datetimeperiod'
        FeeDueDate:
          $ref: '#/components/schemas/datetime'
        FeePlan:
          $ref: '#/components/schemas/feeplan'
        FeeCreditDebitIndicator:
          $ref: '#/components/schemas/debitcreditindicatortvalues'
        FeeReason:
          $ref: '#/components/schemas/text'
        FeeDirection:
          $ref: '#/components/schemas/adjustmentdirectiontypevalues'
        FeeBearerType:
          $ref: '#/components/schemas/chargebearertypevalues'
      description: The allowed pricing includes ranges by customer measures e.g. credit grade
    rulesettypevalues:
      enum:
        - Policy
        - Regulation
        - Law
        - Guideline
        - Criterion
        - Standard
      type: string
      description: ">\r\n* `Policy` - Rule that governs business execution.\n\nThe set of basic principles and associated guidelines, formulated and enforced by the governing body of an organization, to direct and limit its actions in pursuit of long-term goals. (Business Dictionary)\n\r\n* `Regulation` - A rule used to carry out a law (FIBO)\n\nBusiness Dictionary: a rule (with or without the coercive power of law) employed in controlling, directing, or managing an activity, organization, or system. \n\nThe set of rules and legislation governing certain actions. \nhttps://financial-dictionary.thefreedictionary.com/Regulatory\r\n* `Law` - A binding rule that the courts will enforce.\nA system of rules and guidelines which are enforced through social institutions to govern behavior. (FIBO)\n\r\n* `Guideline` - A recommended practice (adapted from Business Dictionary)\nA general rule, principle, or piece of advice.\r\n* `Criterion` - A principle or standard by which something may be judged or decided.\n\nRead more: http://www.businessdictionary.com/definition/criterion.html\r\n* `Standard` - A rule considered by an authority or by general consent as a basis of comparison\r\n"
    rulesettype:
      type: object
      properties:
        RuleSetTypeName:
          $ref: '#/components/schemas/name'
        RuleSetType:
          $ref: '#/components/schemas/rulesettypevalues'
      description: ''
    ruleset:
      type: object
      properties:
        RuleSetDefinition:
          $ref: '#/components/schemas/text'
        RuleSetInterpretation:
          $ref: '#/components/schemas/text'
        RuleSetType:
          $ref: '#/components/schemas/rulesettype'
        RuleSetName:
          $ref: '#/components/schemas/name'
        RuleSetIdentification:
          $ref: '#/components/schemas/identifier'
        RuleSetLifecycleStatus:
          $ref: '#/components/schemas/status'
      description: Guidelines for the allowed situation-based pricing adjustments (to maximize margins)
    FacilityApplication:
      type: object
      properties:
        FacilityOption:
          $ref: '#/components/schemas/feature'
        FacilityOptionDescription:
          $ref: '#/components/schemas/text'
        FacilityOptionSetting:
          $ref: '#/components/schemas/arrangement'
        FacilityPricing:
          $ref: '#/components/schemas/feearrangement'
        NegotiationGuidelinesRules:
          $ref: '#/components/schemas/ruleset'
        AgreedPricing:
          $ref: '#/components/schemas/feearrangement'
        PricingAdjustments:
          $ref: '#/components/schemas/feearrangement'
        FacilitySchedule:
          $ref: '#/components/schemas/schedule'
      description: Handles the booking of the asset or liability to the appropriate unit
    CorrespondenceandDocuments:
      type: object
      properties:
        CustomerOfferRequiredDocuments:
          type: string
          description: Description of the required documents and time limits on receipt where appropriate
          format: string
        CorrespondenceInstanceReference:
          type: string
          description: Reference to the correspondence generated and received
          format: object
        CorrespondenceContent:
          type: string
          description: Correspondence content - messages sent to and received from involved parties
          format: string
        DocumentDirectoryEntryInstanceReference:
          type: string
          description: The document reference for associated documents
          format: object
        DocumentContent:
          type: string
          description: Document copy/content - legal or significant documents created & referenced
          format: string
      description: Handles the booking of the asset or liability to the appropriate unit
    customerrelationship:
      type: object
      properties:
        CustomerRelationship:
          type: string
          description: A specific relationship between a specific Bank (= party acting as a supplier of banking services) and one or more other involved parties acting as (potential) consumers of banking services as agreed in one or more banking product or service offerings and/or agreements.
          format: class
      description: "Reference to the associated customer (can currently be a person or a company) ||\r\n|"
    worksteptypevalues:
      type: object
      properties:
        Worksteptypevalues:
          type: string
          description: A Classification value that distinguishes between the type of workstep undertaken within Procedure
          format: enumeration
      description: "The type of task performed (each BQ constitutes an optional task instance) ||\r\n|"
    workstep:
      type: object
      properties:
        WorkstepResult:
          $ref: '#/components/schemas/text'
        WorkstepType:
          $ref: '#/components/schemas/worksteptypevalues'
        WorkstepDescription:
          $ref: '#/components/schemas/text'
        WorkstepDateTime:
          $ref: '#/components/schemas/datetime'
        WorkstepStatus:
          $ref: '#/components/schemas/status'
      description: "Tasks performed to maintain/verify the life-cycle status ||\r\n|"
    workproducttypevalues:
      enum:
        - Document
        - WorkingPaper
        - ActivityLog
        - Form
        - File
        - MeetingSchedule
        - MeetingMinute
      type: string
      description: ">\r\n* `Document` - \r\n* `WorkingPaper` - \r\n* `ActivityLog` - \r\n* `Form` - \r\n* `File` - File of consolidated notes, evaluations and recommendations for the work task\r\n* `MeetingSchedule` - \r\n* `MeetingMinute` - \r\n"
    workproduct:
      type: object
      properties:
        WorkProductType:
          $ref: '#/components/schemas/workproducttypevalues'
        WorkProductIdentifoication:
          type: string
          description: ''
          format: string
      description: "Work documentation, forms and schedules produced and referenced during the analysis ||\r\n|"
    customerofferinvolvementtypevalues:
      enum:
        - Customer
        - ServiceProvider
        - SalesTeam
        - MarketingTeam
        - LegalAndComplianceTeam
        - AnalyticsAndReporting
      type: string
      description: ">\r\n* `Customer` - The customer is the target audience for the Customer Offer. \r\n* `ServiceProvider` - The entity offering the Customer Offer\r\n* `SalesTeam` - Party who plays a critical role in communicating the offer to potential customers, explaining its benefits, and assisting customers in accepting the offer.\r\n* `MarketingTeam` - Party who is responsible for creating and promoting the Customer Offer\r\n* `LegalAndComplianceTeam` - Party who is is responsible for ensuring that the Customer Offer complies with relevant laws and regulations.\r\n* `AnalyticsAndReporting` - A teams or individuals who is responsible for tracking the performance of Customer Offers. They collect data on how the offer is received by customers, how many customers accept it, and the impact on sales or customer acquisition.\r\n"
    customerofferinvolvement:
      type: object
      properties:
        InvolvementType:
          $ref: '#/components/schemas/customerofferinvolvementtypevalues'
        PartyReference:
          $ref: '#/components/schemas/party'
        CustomerOfferReference:
          type: string
          description: ''
          format: customeroffer
      description: "When doing customer offer, multiple parties can be involved. This can be in the context of customer ( 1 or more parties who are known as the customer ) but it can also be someone who is giving a personal warranty.\nSometimes the involved parties are not customers but for example beneficiaries. ||\r\n|"
    offertypevalues:
      enum:
        - BalanceTransfer
        - LimitIncrease
        - MoneyTransfer
        - PromotionalRate
        - Other
      type: string
      description: ">\r\n* `BalanceTransfer` - \r\n* `LimitIncrease` - \r\n* `MoneyTransfer` - \r\n* `PromotionalRate` - \r\n* `Other` - \r\n"
    condition:
      type: object
      properties:
        Condition:
          type: string
          description: "Condition is a premise upon which the fulfillment of an agreement depends \n\nGeneral and special arrangements, provisions, requirements, rules, specifications, and standards that form an integral part of an agreement or contract.\n\nRead more: http://www.businessdictionary.com/definition/terms-and-conditions.html\n\n"
          format: class
      description: Further details of the term of the offer.
    customeroffer:
      type: object
      properties:
        OfferIdentification:
          $ref: '#/components/schemas/identifier'
        OfferType:
          $ref: '#/components/schemas/offertypevalues'
        OfferDescription:
          $ref: '#/components/schemas/text'
        OfferStartDate:
          $ref: '#/components/schemas/datetime'
        OfferEndDate:
          $ref: '#/components/schemas/datetime'
        OfferRate:
          $ref: '#/components/schemas/rate'
        OfferValue:
          $ref: '#/components/schemas/value'
        OfferTermAndCondition:
          $ref: '#/components/schemas/condition'
        OfferAmount:
          $ref: '#/components/schemas/amount'
      description: " ||\r\n|"
    CustomerOfferProcedure:
      type: object
      properties:
        CustomerReference:
          $ref: '#/components/schemas/customerrelationship'
        PartyReference:
          $ref: '#/components/schemas/party'
        ProductandServiceType:
          $ref: '#/components/schemas/productagreementtypevalues'
        CustomerOfferProcessingSchedule:
          $ref: '#/components/schemas/schedule'
        CustomerOfferProcessingTask:
          $ref: '#/components/schemas/workstep'
        CustomerOfferProcessingTaskType:
          $ref: '#/components/schemas/worksteptypevalues'
        EmployeeBusinessUnitReference:
          $ref: '#/components/schemas/involvedparty'
        CustomerOfferProcessingTaskWorkProducts:
          $ref: '#/components/schemas/workproduct'
        CustomerOfferProcessingTaskResult:
          $ref: '#/components/schemas/text'
        CustomerOfferInvolvedParty:
          $ref: '#/components/schemas/customerofferinvolvement'
        CustomerOfferReference:
          $ref: '#/components/schemas/customeroffer'
      description: 'The customer offer procedure record, combines the result of all underlying work steps'
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    CustomerOfferProcedure:
      description: CustomerOfferProcedure
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerOfferProcedure'
    FacilityApplication:
      description: FacilityApplication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FacilityApplication'
    Disclosures:
      description: Disclosures
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Disclosures'
    Credit:
      description: Credit
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Credit'
    Underwriting:
      description: Underwriting
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Underwriting'
    Compliance:
      description: Compliance
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Compliance'
    Audit:
      description: Audit
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Audit'
    Collateral:
      description: Collateral
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collateral'
    Booking:
      description: Booking
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Booking'
    CorrespondenceandDocuments:
      description: CorrespondenceandDocuments
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CorrespondenceandDocuments'
    Agreement:
      description: Agreement
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Agreement'
    ProductInitialization:
      description: ProductInitialization
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductInitialization'
  parameters:
    customerofferid:
      name: customerofferid
      in: path
      required: true
      style: simple
      schema:
        type: string
    facilityapplicationid:
      name: facilityapplicationid
      in: path
      required: true
      style: simple
      schema:
        type: string
    disclosuresid:
      name: disclosuresid
      in: path
      required: true
      style: simple
      schema:
        type: string
    creditid:
      name: creditid
      in: path
      required: true
      style: simple
      schema:
        type: string
    underwritingid:
      name: underwritingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    complianceid:
      name: complianceid
      in: path
      required: true
      style: simple
      schema:
        type: string
    auditid:
      name: auditid
      in: path
      required: true
      style: simple
      schema:
        type: string
    collateralid:
      name: collateralid
      in: path
      required: true
      style: simple
      schema:
        type: string
    bookingid:
      name: bookingid
      in: path
      required: true
      style: simple
      schema:
        type: string
    correspondenceanddocumentsid:
      name: correspondenceanddocumentsid
      in: path
      required: true
      style: simple
      schema:
        type: string
    agreementid:
      name: agreementid
      in: path
      required: true
      style: simple
      schema:
        type: string
    productinitializationid:
      name: productinitializationid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    CustomerOfferProcedure:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerOfferProcedure'
      required: true
    FacilityApplication:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FacilityApplication'
      required: true
    Disclosures:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Disclosures'
      required: true
    Credit:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Credit'
      required: true
    Underwriting:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Underwriting'
      required: true
    Compliance:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Compliance'
      required: true
    Audit:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Audit'
      required: true
    Collateral:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collateral'
      required: true
    Booking:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Booking'
      required: true
    CorrespondenceandDocuments:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CorrespondenceandDocuments'
      required: true
    Agreement:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Agreement'
      required: true
    ProductInitialization:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductInitialization'
      required: true