openapi: 3.0.1
info:
  title: Syndicate Management
  description: This Service Domain manages syndicate membership and compliance
  contact:
    name: BIAN
    url: https://bian.org
  version: 11.0.0
servers:
  - url: https://virtserver.swaggerhub.com/B154/BIAN/SyndicateManagement/11.0.0
paths:
  '/SyndicateManagement/{syndicatemanagementid}/Control':
    put:
      tags:
        - CR - SyndicateMembership
      summary: Control Syndicate Membership
      description: Control Syndicate Membership
      operationId: Control
      parameters:
        - $ref: '#/components/parameters/syndicatemanagementid'
      requestBody:
        $ref: '#/components/requestBodies/SyndicateMembership'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateMembership'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SyndicateManagement/{syndicatemanagementid}/Grant':
    put:
      tags:
        - CR - SyndicateMembership
      summary: Grant Syndicate Membership
      description: Grant Syndicate Membership
      operationId: Grant
      parameters:
        - $ref: '#/components/parameters/syndicatemanagementid'
      requestBody:
        $ref: '#/components/requestBodies/SyndicateMembership'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateMembership'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SyndicateManagement/{syndicatemanagementid}/Notify':
    get:
      tags:
        - CR - SyndicateMembership
      summary: Notify Syndicate Membership
      description: Notify Syndicate Membership
      operationId: Notify
      parameters:
        - $ref: '#/components/parameters/syndicatemanagementid'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateMembership'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /SyndicateManagement/Register:
    post:
      tags:
        - CR - SyndicateMembership
      summary: Register Syndicate Membership
      description: Register Syndicate Membership
      operationId: Register
      requestBody:
        $ref: '#/components/requestBodies/SyndicateMembership'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateMembership'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SyndicateManagement/{syndicatemanagementid}/Request':
    put:
      tags:
        - CR - SyndicateMembership
      summary: Request Syndicate Membership
      description: Request Syndicate Membership
      operationId: Request
      parameters:
        - $ref: '#/components/parameters/syndicatemanagementid'
      requestBody:
        $ref: '#/components/requestBodies/SyndicateMembership'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateMembership'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SyndicateManagement/{syndicatemanagementid}/Retrieve':
    get:
      tags:
        - CR - SyndicateMembership
      summary: Retrieve Syndicate Membership
      description: Retrieve Syndicate Membership
      operationId: Retrieve
      parameters:
        - $ref: '#/components/parameters/syndicatemanagementid'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateMembership'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SyndicateManagement/{syndicatemanagementid}/Update':
    put:
      tags:
        - CR - SyndicateMembership
      summary: Update Syndicate Membership
      description: Update Syndicate Membership
      operationId: Update
      parameters:
        - $ref: '#/components/parameters/syndicatemanagementid'
      requestBody:
        $ref: '#/components/requestBodies/SyndicateMembership'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateMembership'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SyndicateManagement/{syndicatemanagementid}/SyndicateComplianceClauses/{syndicatecomplianceclausesid}/Notify':
    get:
      tags:
        - BQ - SyndicateComplianceClauses
      summary: Notify Syndicate Compliance Clauses
      description: Notify Syndicate Compliance Clauses
      operationId: NotifySyndicateComplianceClauses
      parameters:
        - $ref: '#/components/parameters/syndicatemanagementid'
        - $ref: '#/components/parameters/syndicatecomplianceclausesid'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateComplianceClauses'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SyndicateManagement/{syndicatemanagementid}/SyndicateEligibilityClauses/{syndicateeligibilityclausesid}/Notify':
    get:
      tags:
        - BQ - SyndicateEligibilityClauses
      summary: Notify Syndicate Eligibility Clauses
      description: Notify Syndicate Eligibility Clauses
      operationId: NotifySyndicateEligibilityClauses
      parameters:
        - $ref: '#/components/parameters/syndicatemanagementid'
        - $ref: '#/components/parameters/syndicateeligibilityclausesid'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateEligibilityClauses'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SyndicateManagement/{syndicatemanagementid}/SyndicateComplianceClauses/{syndicatecomplianceclausesid}/Retrieve':
    get:
      tags:
        - BQ - SyndicateComplianceClauses
      summary: Retrieve Syndicate Compliance Clauses
      description: Retrieve Syndicate Compliance Clauses
      operationId: RetrieveSyndicateComplianceClauses
      parameters:
        - $ref: '#/components/parameters/syndicatemanagementid'
        - $ref: '#/components/parameters/syndicatecomplianceclausesid'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateComplianceClauses'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SyndicateManagement/{syndicatemanagementid}/SyndicateEligibilityClauses/{syndicateeligibilityclausesid}/Retrieve':
    get:
      tags:
        - BQ - SyndicateEligibilityClauses
      summary: Retrieve Syndicate Eligibility Clauses
      description: Retrieve Syndicate Eligibility Clauses
      operationId: RetrieveSyndicateEligibilityClauses
      parameters:
        - $ref: '#/components/parameters/syndicatemanagementid'
        - $ref: '#/components/parameters/syndicateeligibilityclausesid'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateEligibilityClauses'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SyndicateManagement/{syndicatemanagementid}/SyndicateComplianceClauses/{syndicatecomplianceclausesid}/Update':
    put:
      tags:
        - BQ - SyndicateComplianceClauses
      summary: Update Syndicate Compliance Clauses
      description: Update Syndicate Compliance Clauses
      operationId: UpdateSyndicateComplianceClauses
      parameters:
        - $ref: '#/components/parameters/syndicatemanagementid'
        - $ref: '#/components/parameters/syndicatecomplianceclausesid'
      requestBody:
        $ref: '#/components/requestBodies/SyndicateComplianceClauses'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateComplianceClauses'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/SyndicateManagement/{syndicatemanagementid}/SyndicateEligibilityClauses/{syndicateeligibilityclausesid}/Update':
    put:
      tags:
        - BQ - SyndicateEligibilityClauses
      summary: Update Syndicate Eligibility Clauses
      description: Update Syndicate Eligibility Clauses
      operationId: UpdateSyndicateEligibilityClauses
      parameters:
        - $ref: '#/components/parameters/syndicatemanagementid'
        - $ref: '#/components/parameters/syndicateeligibilityclausesid'
      requestBody:
        $ref: '#/components/requestBodies/SyndicateEligibilityClauses'
      responses:
        '200':
          $ref: '#/components/responses/SyndicateEligibilityClauses'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    HTTPError:
      type: object
      properties:
        status_code:
          type: string
          format: string
        status:
          type: string
          format: string
        message:
          type: string
          format: string
      description: Status Attributes
    text:
      type: object
      properties:
        Text:
          type: string
          description: Text is a character string such as a finite set of characters generally in the form of words of a language. (UN/CEFACT)
          format: datatype
      description: "The type of Syndicate Eligibility Clauses ||\r\n|"
    name:
      type: object
      properties:
        Name:
          type: string
          description: 'A name is a word or phrase that constitutes the distinctive designation of a person, place, thing or concept. (UN/CEFAT)'
          format: datatype
      description: ''
    businessservicetypevalues:
      type: object
      properties:
        Businessservicetypevalues:
          type: string
          description: ''
          format: enumeration
      description: ''
    businessservice:
      type: object
      properties:
        BusinessServiceName:
          $ref: '#/components/schemas/name'
        BusinessServiceType:
          $ref: '#/components/schemas/businessservicetypevalues'
        BusinessServiceDescription:
          $ref: '#/components/schemas/text'
      description: The Syndicate Eligibility Clauses specific Business Service
    partytypevalues:
      enum:
        - Person
        - Organisation
      type: string
      description: ">\r\n* `Person` - Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person'). ISO20022\r\n* `Organisation` - Organised structure that is set up for a particular purpose. For example, a business, government body, department, charity, or financial institution. ISO20022\r\n"
    datetime:
      type: object
      properties:
        DateTimeContent:
          type: string
          description: ''
          format: string
        TimeZoneCode:
          type: string
          description: ''
          format: string
        DaylightSavingIndicator:
          type: string
          description: ''
          format: string
      description: ''
    partyidentificationtypevalues:
      enum:
        - LEI(LegalEntityIdentifier)
        - TaxIdentificationNumber
        - NationalRegistrationNumber
        - RegistrationAuthorityIdentification
        - PassportNumber
        - AlienRegistrationNumber
        - TaxExemptIdentificationNumber
        - ForeignInvestmentIdentityNumber
        - DriverLicenseNumber
        - CorporateIdentification
        - SocialSecurityNumber
        - IdentityCardNumber
        - NationalRegistrationIdentificationNumber
        - Concat
      type: string
      description: ">\r\n* `LEI(LegalEntityIdentifier)` - \r\n* `TaxIdentificationNumber` - \r\n* `NationalRegistrationNumber` - \r\n* `RegistrationAuthorityIdentification` - \r\n* `PassportNumber` - \r\n* `AlienRegistrationNumber` - \r\n* `TaxExemptIdentificationNumber` - \r\n* `ForeignInvestmentIdentityNumber` - \r\n* `DriverLicenseNumber` - \r\n* `CorporateIdentification` - \r\n* `SocialSecurityNumber` - \r\n* `IdentityCardNumber` - \r\n* `NationalRegistrationIdentificationNumber` - \r\n* `Concat` - \r\n"
    value:
      type: object
      properties:
        Value:
          type: string
          description: 'A value is the concept of worth in general that is assigned or is determined by measurement, assessment or calculation. (UN/CEFACT)'
          format: datatype
      description: ''
    identifier:
      type: object
      properties:
        IdentifierValue:
          $ref: '#/components/schemas/value'
        IdentifierIssuingAuthority:
          $ref: '#/components/schemas/involvedparty'
        IdentifierStartDate:
          $ref: '#/components/schemas/datetime'
        IdentifierEndDate:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyidentification:
      type: object
      properties:
        PartyIdentificationType:
          $ref: '#/components/schemas/partyidentificationtypevalues'
        PartyIdentification:
          $ref: '#/components/schemas/identifier'
      description: ''
    party:
      type: object
      properties:
        PartyName:
          $ref: '#/components/schemas/name'
        PartyType:
          $ref: '#/components/schemas/partytypevalues'
        PartyDateTime:
          $ref: '#/components/schemas/datetime'
        PartyIdentification:
          $ref: '#/components/schemas/partyidentification'
      description: ''
    datetimeperiod:
      type: object
      properties:
        FromDateTime:
          $ref: '#/components/schemas/datetime'
        ToDateTime:
          $ref: '#/components/schemas/datetime'
      description: ''
    partyinvolvementtypevalues:
      enum:
        - Agreementinvolvement
        - Partyinvolvement
        - Arrangementinvolvement
        - Designspecificationinvolvement
        - Relationshipinvolvement
        - Locationinvolvement
        - Bankguaranteeinvolvement
      type: string
      description: ">\r\n* `Agreementinvolvement` - \r\n* `Partyinvolvement` - \r\n* `Arrangementinvolvement` - \r\n* `Designspecificationinvolvement` - \r\n* `Relationshipinvolvement` - \r\n* `Locationinvolvement` - \r\n* `Bankguaranteeinvolvement` - \r\n"
    partyrole:
      type: object
      properties:
        PartyRoleType:
          $ref: '#/components/schemas/text'
        PartyRoleName:
          $ref: '#/components/schemas/name'
        PartyRoleValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PartyInvolvementType:
          $ref: '#/components/schemas/partyinvolvementtypevalues'
      description: ''
    involvedparty:
      type: object
      properties:
        PartyReference:
          $ref: '#/components/schemas/party'
        PartyInvolvement:
          $ref: '#/components/schemas/partyrole'
      description: The operating unit/employee responsible for governing Syndicate Eligibility Clauses by applying the Syndicate Eligibility Clauses clause
    condition:
      type: object
      properties:
        Condition:
          type: string
          description: "Condition is a premise upon which the fulfillment of an agreement depends \n\nGeneral and special arrangements, provisions, requirements, rules, specifications, and standards that form an integral part of an agreement or contract.\n\nRead more: http://www.businessdictionary.com/definition/terms-and-conditions.html\n\n"
          format: class
      description: The completion status once Syndicate Eligibility Clauses has been governed by applying the Syndicate Eligibility Clauses clause
    schedule:
      type: object
      properties:
        ScheduleType:
          type: string
          description: ''
          format: string
      description: The timing and key actions/milestones involved in governing Syndicate Eligibility Clauses by applying the Syndicate Eligibility Clauses clause
    SyndicateEligibilityClauses:
      type: object
      properties:
        SyndicateMembershipReference:
          type: string
          description: Reference to Syndicate Eligibility Clauses
          format: object
        SyndicateEligibilityClausesReference:
          type: string
          description: Reference to Syndicate Eligibility Clauses
          format: object
        SyndicateEligibilityClausesType:
          $ref: '#/components/schemas/text'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        BusinessUnitEmployeeReference:
          $ref: '#/components/schemas/involvedparty'
        Postconditions:
          $ref: '#/components/schemas/condition'
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
      description: The Syndicate Eligibility Clauses defines a particular clause or consideration that is applied to determine eligibility for Syndicate Eligibility Clauses
    SyndicateComplianceClauses:
      type: object
      properties:
        SyndicateMembershipReference:
          type: string
          description: Reference to Syndicate Compliance Clauses
          format: object
        SyndicateComplianceClausesReference:
          type: string
          description: Reference to Syndicate Compliance Clauses
          format: object
        SyndicateComplianceClausesType:
          $ref: '#/components/schemas/text'
        BusinessService:
          $ref: '#/components/schemas/businessservice'
        BusinessUnitEmployeeReference:
          $ref: '#/components/schemas/involvedparty'
        Postconditions:
          $ref: '#/components/schemas/condition'
        Preconditions:
          $ref: '#/components/schemas/condition'
        Schedule:
          $ref: '#/components/schemas/schedule'
      description: The Syndicate Eligibility Clauses defines a particular clause or consideration that is applied to determine eligibility for Syndicate Eligibility Clauses
    task:
      type: object
      properties:
        Task:
          type: string
          format: datatype
      description: ''
    directoryentrydatetypevalues:
      enum:
        - OpenDate
        - RefreshDate
      type: string
      description: ">\r\n* `OpenDate` - \r\n* `RefreshDate` - \r\n"
    date:
      type: object
      properties:
        DateContent:
          type: string
          description: ''
          format: string
      description: ''
    status:
      type: object
      properties:
        StatusReason:
          $ref: '#/components/schemas/text'
        StatusDateTime:
          $ref: '#/components/schemas/datetime'
        StatusValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        StatusInvolvedParty:
          $ref: '#/components/schemas/involvedparty'
      description: ''
    directoryentry:
      type: object
      properties:
        DirectoryEntryDateType:
          $ref: '#/components/schemas/directoryentrydatetypevalues'
        DirectoryEntryDate:
          $ref: '#/components/schemas/date'
        DirectoryEntryStatus:
          $ref: '#/components/schemas/status'
      description: ''
    SyndicateManagementOutcome:
      type: object
      properties:
        SyndicateManagementTask:
          $ref: '#/components/schemas/task'
        SyndicateManagementEntry:
          $ref: '#/components/schemas/directoryentry'
      description: The Syndicate Eligibility Clauses defines a particular clause or consideration that is applied to determine eligibility for Syndicate Eligibility Clauses
    servicetypevalues:
      enum:
        - AdministrativeService
        - BankingService
        - ITService
        - SystemService
        - BusinessService
      type: string
      description: ">\r\n* `AdministrativeService` - \r\n* `BankingService` - \r\n* `ITService` - \r\n* `SystemService` - \r\n* `BusinessService` - \r\n"
    servicetype:
      type: object
      properties:
        ServiceTypeName:
          $ref: '#/components/schemas/name'
        ServiceType:
          $ref: '#/components/schemas/servicetypevalues'
      description: ''
    service:
      type: object
      properties:
        ServiceName:
          $ref: '#/components/schemas/name'
        ServiceDescription:
          $ref: '#/components/schemas/text'
        ServiceType:
          $ref: '#/components/schemas/servicetype'
      description: "A selected optional business service as subject matter of Syndicate Membership ||\r\n|"
    instructiondatetypevalues:
      enum:
        - FulfillmentDate
        - DueDate
        - ExecutionDate
      type: string
      description: ">\r\n* `FulfillmentDate` - \r\n* `DueDate` - \r\n* `ExecutionDate` - \r\n"
    instructiondate:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/date'
        InstructionDateType:
          $ref: '#/components/schemas/instructiondatetypevalues'
      description: ''
    instructionlifecylestatustypevalues:
      enum:
        - Fulfilled
        - OnHold
        - Requested
        - Failed
        - Prepared
        - Inprogress
      type: string
      description: ">\r\n* `Fulfilled` - \r\n* `OnHold` - \r\n* `Requested` - \r\n* `Failed` - \r\n* `Prepared` - \r\n* `Inprogress` - \r\n"
    instructionlifecyclestatus:
      type: object
      properties:
        InstructionLifecycleStatusType:
          $ref: '#/components/schemas/instructionlifecylestatustypevalues'
        InstructionLifecycleStatus:
          $ref: '#/components/schemas/status'
      description: 'A characteristic of instruction which refers to the LifecycleStatus of instruction (e.g., requested, executed, fulfilled, etc.); '
    instructionidentificationtypevalues:
      enum:
        - OrderNumber
        - InstructionNumber
      type: string
      description: ">\r\n* `OrderNumber` - \r\n* `InstructionNumber` - \r\n"
    instructionidentification:
      type: object
      properties:
        InstructionIdentifier:
          $ref: '#/components/schemas/identifier'
        InstructionIdentifierType:
          $ref: '#/components/schemas/instructionidentificationtypevalues'
      description: "An identifier that allows to uniquely refer to an instance of an Instruction.\n"
    instructiontypevalues:
      enum:
        - PaymentInstruction
        - DeliveryOrder
        - InformationRequest
        - ExchangeInstruction
        - AllocationInstruction
        - MaintenanceInstruction
      type: string
      description: ">\r\n* `PaymentInstruction` - \r\n* `DeliveryOrder` - \r\n* `InformationRequest` - \r\n* `ExchangeInstruction` - \r\n* `AllocationInstruction` - \r\n* `MaintenanceInstruction` - \r\n"
    log:
      type: object
      properties:
        LogType:
          type: string
          description: ''
          format: string
        LogPeriod:
          type: string
          description: ''
          format: string
        LogDate:
          type: string
          description: Key dates associated with the log (e.g. start time).
          format: string
        LogIdentification:
          type: string
          description: ''
          format: string
      description: ''
    instruction:
      type: object
      properties:
        InstructionDate:
          $ref: '#/components/schemas/instructiondate'
        InstructionStatus:
          $ref: '#/components/schemas/instructionlifecyclestatus'
        InstructionIdentifier:
          $ref: '#/components/schemas/instructionidentification'
        InstructionType:
          $ref: '#/components/schemas/instructiontypevalues'
        InstructionResult:
          $ref: '#/components/schemas/text'
        InstructionDescription:
          $ref: '#/components/schemas/text'
        InstructionLog:
          $ref: '#/components/schemas/log'
        InstructionPurpose:
          $ref: '#/components/schemas/text'
      description: "Request to enroll Syndicate Membership ||\r\n|"
    goal:
      type: object
      properties:
        GoalType:
          type: string
          description: The type of goal
          format: string
        GoalDefinition:
          type: string
          description: 'A definition of the goal, including the intended actions required to achieve the goal'
          format: string
        GoalOrganisation:
          type: string
          description: Identifies the interested parties and their roles and responsibilities for the specific actions supporting the achievement of the goal
          format: ''
        GoalResult:
          type: string
          description: 'Assessment of how the work is progressing towards achieving the goal, including projections of likely outcomes'
          format: string
      description: ''
    budgettypevalues:
      enum:
        - FinancialBudget
        - ResourceBudget
        - OperatingBudget
      type: string
      description: ">\r\n* `FinancialBudget` - \r\n* `ResourceBudget` - \r\n* `OperatingBudget` - \r\n"
    budgettype:
      type: object
      properties:
        BudgetTypeName:
          $ref: '#/components/schemas/name'
        BudgetType:
          $ref: '#/components/schemas/budgettypevalues'
      description: A Classification value that specifies the type of Budget
    currencycode:
      type: object
      properties:
        Currencycode:
          type: string
          description: "A code identifying a currency according to ISO-4217.\nA currency is a system of money in general use in a particular country.\n\nCode allocated to a currency, by a maintenance agency, under an international identification scheme as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\". Valid currency codes are registered with the ISO 4217 Maintenance Agency, and consist of three contiguous letters. (ISO20022)\n\n"
          format: datatype
      description: ''
    amount:
      type: object
      properties:
        AmountValue:
          type: string
          description: ''
          format: string
        AmountCurrency:
          $ref: '#/components/schemas/currencycode'
        DecimalPointPosition:
          type: string
          description: "Decimal point position starts calulating from the right\n"
          format: string
      description: ''
    budgetarrangement:
      type: object
      properties:
        BudgetType:
          $ref: '#/components/schemas/budgettype'
        BudgetAmount:
          $ref: '#/components/schemas/amount'
      description: 'An arrangement which is specifying an estimate of costs, revenues, and resources over a specified period, reflecting a reading of future financial conditions and goals. (adapted from Business Dictionary)'
    plannedaction:
      type: object
      properties:
        PlannedAction:
          type: string
          description: 'An action that is arranged in a plan for doing or achieving something '
          format: class
      description: 'An action that is arranged in a plan for doing or achieving something '
    plantypevalues:
      enum:
        - AdministrativePlan
        - ManagementPlan
        - StratgyPlan
        - FinancialPlan
      type: string
      description: ">\r\n* `AdministrativePlan` - \r\n* `ManagementPlan` - \r\n* `StratgyPlan` - \r\n* `FinancialPlan` - \r\n"
    plantype:
      type: object
      properties:
        PlanTypeName:
          $ref: '#/components/schemas/name'
        PlanType:
          $ref: '#/components/schemas/plantypevalues'
      description: A Classification value that specifies the type of Plan
    plan:
      type: object
      properties:
        PlanGoal:
          $ref: '#/components/schemas/goal'
        PlanBudget:
          $ref: '#/components/schemas/budgetarrangement'
        PlannedAction:
          $ref: '#/components/schemas/plannedaction'
        PlanType:
          $ref: '#/components/schemas/plantype'
        PlanOrganisation:
          type: string
          description: ''
          format: string
        PlanValidityPeriod:
          $ref: '#/components/schemas/datetimeperiod'
        PlanDescription:
          $ref: '#/components/schemas/text'
      description: "Reference to  Syndicate Membership Plan ||\r\n|"
    actiontypevalues:
      enum:
        - Initiate
        - Execute
        - Create
        - Transfer
        - Pay
        - Deliver
        - Apply
        - Calculate
      type: string
      description: ">\r\n* `Initiate` - \r\n* `Execute` - \r\n* `Create` - \r\n* `Transfer` - \r\n* `Pay` - \r\n* `Deliver` - \r\n* `Apply` - \r\n* `Calculate` - \r\n"
    action:
      type: object
      properties:
        ActionType:
          $ref: '#/components/schemas/actiontypevalues'
      description: ''
    arrangementlifecyclestatustypevalues:
      enum:
        - Requested
        - Accepted
        - Fulfilled
        - Offered
        - Proposed
        - Terminated
        - Cancelled
      type: string
      description: ">\r\n* `Requested` - \r\n* `Accepted` - \r\n* `Fulfilled` - \r\n* `Offered` - \r\n* `Proposed` - \r\n* `Terminated` - \r\n* `Cancelled` - \r\n"
    arrangementlifecyclestatus:
      type: object
      properties:
        ArrangementLifecycleStatus:
          $ref: '#/components/schemas/status'
        ArrangementLifecycleStatusType:
          $ref: '#/components/schemas/arrangementlifecyclestatustypevalues'
      description: 'A characteristic of arrangement which refers to the LifecycleStatus of arrangement (e.g., requested, proposed, offered, accepted, cancelled, terminated, fulfilled, etc.)'
    subject:
      type: object
      properties:
        Subject:
          type: string
          description: A thing that is discussed or dealt whit in agreement/arrangement about doing or not doing (as action) something.
          format: class
      description: ''
    arrangementtypevalues:
      enum:
        - SweepArrangement
        - WithdrawalArrangement
        - DepositArrangement
        - InterestArrangement
        - FeeArrangement
        - LienArrangement
        - InformationArrangement
        - PaymentServiceArrangement
        - EntitlementArrangement
        - PeriodArrangement
        - CollateralArrangement
        - LimitArrangement
        - AccessArrangement
        - CardPaymentArrangement
        - StandingOrderArrangement
        - OverdraftArrangement
        - RepaymentArrangement
        - StatementArrangement
        - CreditTransferArrangement
        - ProductAndServiceArrangement
        - FactoringArrangement
        - RolloverArrangement
      type: string
      description: ">\r\n* `SweepArrangement` - An arrangement into which is promised for the set-up and execution of structured sweeps to and from the facility to a linked account.\r\n* `WithdrawalArrangement` - An arrangement into which is promised to deliver Withdraw Service  to take fund out of an account. \r\n* `DepositArrangement` - An arrangement into which is promised to deliver Deposit Service  to place funds into an account for safekeeping. \r\n* `InterestArrangement` - An arrangement into which is promised to apply a pricing element expressed in a percentage  to a principal amount.\r\n* `FeeArrangement` - An arrangement into which is promised to apply a charge for services rendered. \r\n* `LienArrangement` - An arrangement into which is promised for placing a lien or block on the account for a specified purpose, amount, and period. \r\n* `InformationArrangement` - An arrangement concerning the information the bank will provide about the agreement/account\r\n* `PaymentServiceArrangement` - An arrangement into which is promised to deliver a specific payment service including regular payments, standing orders, direct debits and bill pay instructions. \r\n* `EntitlementArrangement` - Right or obligation linked to the involvement of a party in an agreement\r\n* `PeriodArrangement` - \r\n* `CollateralArrangement` - An arrangement into which is promised for handling the oversight of the allocation, valuation and administration of collateral associated with the facility. \r\n* `LimitArrangement` - An arrangement to limit something\ne.g., the number of transaction per week, the amount of money allowed to withdraw per week/day and etc. \r\n* `AccessArrangement` - An arrangement that allows or restricts the access to a service or product, channel or device through a specific access point\r\n* `CardPaymentArrangement` - An arrangement into which is promised to deliver Card payment Service to execute payment transactions through a payment card, including online payments. \r\n* `StandingOrderArrangement` - An arrangement into which is promised to deliver Standing Order Service to make regular transfers on given dates to a named beneﬁciary. \r\n* `OverdraftArrangement` - An arrangement into which is promised to deliver Overdraft Service  that allows fund transfer even if there is no provision on the account. \r\n* `RepaymentArrangement` - An arrangement into which is promised for paying back money previously borrowed from a lender. \r\n* `StatementArrangement` - An arrangement into which is promised to deliver a reporting service on payment transactions registered on an account. \r\n* `CreditTransferArrangement` - An arrangement into which is promised to allow a payer to transfer fund to a beneficiary. \r\n* `ProductAndServiceArrangement` - \r\n* `FactoringArrangement` - \r\n* `RolloverArrangement` - Arrangement stipulating the modalities for an automatic renewal of the agreement\n\ni.e. the replacement of the agreement with a new one without renewed negociation and witout explicit agreement of the customer \r\n"
    arrangement:
      type: object
      properties:
        ArrangementAction:
          $ref: '#/components/schemas/action'
        ArrangementStartDate:
          $ref: '#/components/schemas/datetime'
        ArrangementEndDate:
          $ref: '#/components/schemas/datetime'
        ArrangementStatus:
          $ref: '#/components/schemas/arrangementlifecyclestatus'
        ArrangementSubjectMatter:
          $ref: '#/components/schemas/subject'
        Arrangementtype:
          $ref: '#/components/schemas/arrangementtypevalues'
      description: "Liability or duty to do something under the terms of Syndicate Membership ||\r\n| ||\r\n|"
    SyndicateMembership:
      type: object
      properties:
        SyndicateMembershipParameterType:
          $ref: '#/components/schemas/text'
        SyndicateMembershipSelectedOption:
          $ref: '#/components/schemas/service'
        SyndicateMembershipRequest:
          $ref: '#/components/schemas/instruction'
        SyndicateMembershipPlan:
          $ref: '#/components/schemas/plan'
        SyndicateMembershipObligation:
          $ref: '#/components/schemas/arrangement'
        SyndicateMembershipEntitlement:
          $ref: '#/components/schemas/arrangement'
        SyndicateMembershipReference:
          type: string
          description: An unique reference to an item or an occurrence of Syndicate Membership
          format: object
      description: 'Maintain a membership for some group or related collection of parties within Syndicate Management. '
  responses:
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    TooManyRequests:
      description: TooManyRequests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    InternalServerError:
      description: InternalServerError
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPError'
    SyndicateMembership:
      description: SyndicateMembership
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SyndicateMembership'
    SyndicateComplianceClauses:
      description: SyndicateComplianceClauses
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SyndicateComplianceClauses'
    SyndicateEligibilityClauses:
      description: SyndicateEligibilityClauses
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SyndicateEligibilityClauses'
  parameters:
    syndicatemanagementid:
      name: syndicatemanagementid
      in: path
      required: true
      style: simple
      schema:
        type: string
    syndicatecomplianceclausesid:
      name: syndicatecomplianceclausesid
      in: path
      required: true
      style: simple
      schema:
        type: string
    syndicateeligibilityclausesid:
      name: syndicateeligibilityclausesid
      in: path
      required: true
      style: simple
      schema:
        type: string
  requestBodies:
    SyndicateMembership:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SyndicateMembership'
      required: true
    SyndicateComplianceClauses:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SyndicateComplianceClauses'
      required: true
    SyndicateEligibilityClauses:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SyndicateEligibilityClauses'
      required: true